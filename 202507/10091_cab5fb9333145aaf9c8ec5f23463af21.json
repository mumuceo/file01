[{"bookSourceComment":"Pixiv \u5c0f\u8bf4(\u5907\u7528)\uff08\u66f4\u65b0\ud83d\udcc6\uff1a2025-07-12\uff09\n\n\u4e66\u6e90\u7248\u672c\uff1a2.2.3\n\u4f7f\u7528\u8bf4\u660e\uff1a\ud83d\udccc\u9605\u8bfb\u7248\u672c 3.23.0503 \u53ca\u4e4b\u540e\u7248\u672c\u53ef\u7528\n\u53ef\u7528\u529f\u80fd\uff1a\u2705\u641c\u7d22\u2705\u53d1\u73b0\u2705\u6dfb\u52a0\u7f51\u5740\u2705\u8ba2\u9605\u6e90\n\u641c\u7d22\u5c0f\u8bf4\uff1a\u2705\u5355\u7bc7\u2705\u7cfb\u5217\u2705\u6807\u7b7e\u2705\u4f5c\u8005\n\u53d1\u73b0\u5c0f\u8bf4\uff1a\u2705\u5173\u6ce8\u2705\u8ffd\u66f4\u2705\u63a8\u8350\u2705\u53d1\u73b0\n\u53d1\u73b0\u5c0f\u8bf4\uff1a\u2705\u6536\u85cf\u2705\u4e66\u7b7e\u2705\u9996\u9875\u2705\u6392\u884c\n\u6dfb\u52a0\u7f51\u5740\uff1a\u2705Pixiv\u5c0f\u8bf4\u94fe\u63a5\u2705Pixiv\u7cfb\u5217\u94fe\u63a5\n\u8ba2\u9605\u7528\u6cd5\uff1a\u70b9\u51fb\u8ba2\u9605\u6e90\u6253\u5f00\u5c0f\u8bf4\/\u7cfb\u5217\u5c0f\u8bf4\uff0c\u3010\u5237\u65b0\u3011\uff0c\u70b9\u51fb\u3010\u52a0\u5165\u4e66\u67b6\u3011\u6309\u94ae\uff0c\u6dfb\u52a0\u5230\u4e66\u67b6\n\n\u4e66\u6e90\u53d1\u5e03\uff1a\u517d\u4eba\u9605\u8bfb\u9891\u9053 https:\/\/t.me\/FurryReading\n\u9879\u76ee\u5730\u5740\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\n\u4f7f\u7528\u6559\u7a0b\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\/blob\/main\/doc\/Pixiv.md\n\n\u89c4\u5219\u8ba2\u9605\uff1aimport \u8ba2\u9605\u6e90\nhttps:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/import.json\nhttps:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/import.json\n\n\u2699\ufe0f \u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u8bbe\u7f6e1\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u57fa\u672c - \u53d8\u91cf\u8bf4\u660e - \u4fee\u6539\u5e76\u4fdd\u5b58\n\n\ud83d\udeab \u5c4f\u853d\u4f5c\u8005(\u672c\u5730)\uff1a\n\u8bbe\u7f6e\u65b9\u6cd51\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u3010\u82f1\u6587\u9017\u53f7\u3011\u95f4\u9694\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u5c4f\u853d\u4f5c\u8005\u6570\u636e\n\n\u2764\ufe0f \u67e5\u770b\u4ed6\u4eba\u6536\u85cf(\u5df2\u7981\u7528)\uff1a\n1\ufe0f\u20e3\u8ba2\u9605 - \u957f\u6309\u8ba2\u9605\u6e90\" - \u7f16\u8f91 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf\n2\ufe0f\u20e3\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u4e00\u884c\u4e00\u4e2a\uff0c\u4fdd\u5b58\n3\ufe0f\u20e3\u5bfc\u5165\uff1a\u6253\u5f00\u8ba2\u9605\u6e90 - \u83dc\u5355 - \u767b\u5f55 - \u2764\ufe0f \u4ed6\u4eba\u6536\u85cf\n4\ufe0f\u20e3\u66f4\u65b0\uff1a\u53d1\u73b0 - \u957f\u6309\"Pixiv\" - \u5237\u65b0 - \u67e5\u770b\u4ed6\u4eba\u6536\u85cf","bookSourceGroup":"\ud83d\udd1e Pixiv","bookSourceName":"\ud83d\udd1e Pixiv \u5c0f\u8bf4\u5907\u7528","bookSourceType":0,"bookSourceUrl":"https:\/\/www.pixiv.net\/","bookUrlPattern":"(https?:\/\/)?(www\\.)?pixiv\\.net(\/ajax)?\/novel\/(show\\.php\\?id=|series\/)?\\d+","concurrentRate":"180\/60000","customOrder":7,"enabled":false,"enabledCookieJar":true,"enabledExplore":true,"exploreUrl":"@js:\nlet SHOW_R18_GENRE, SHOW_GENERAL_NEW, SHOW_GENERAL_RANK, SHOW_GENERAL_GENRE\ntry {\n    settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    SHOW_R18_GENRE = settings.SHOW_R18_GENRE         \/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793aR18\u5c0f\u8bf4\n    SHOW_GENERAL_NEW = settings.SHOW_GENERAL_NEW     \/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n    SHOW_GENERAL_RANK = settings.SHOW_GENERAL_RANK   \/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n    SHOW_GENERAL_GENRE = settings.SHOW_GENERAL_GENRE \/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n} catch (e) {\n    SHOW_R18_GENRE = false\n    SHOW_GENERAL_NEW = false\n    SHOW_GENERAL_RANK = false\n    SHOW_GENERAL_GENRE = false\n}\n\nli = [\n    {\"\u2b50\ufe0f \u5173\u6ce8\": \"https:\/\/www.pixiv.net\/ajax\/follow_latest\/novel?p={{page}}&mode=r18&lang=zh\"},\n    {\"\ud83d\udcc3 \u8ffd\u66f4\": \"https:\/\/www.pixiv.net\/ajax\/watch_list\/novel?p={{page}}&new=1&lang=zh\"},\n    {\"\ud83d\udcaf \u63a8\u8350\": \"https:\/\/www.pixiv.net\/ajax\/top\/novel?mode=r18&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=r18&lang=zh\"},\n    {\"\u2764\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh\"},\n    {\"\u3299\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=hide&lang=zh\"},\n    {\"\ud83c\udff7\ufe0f \u4e66\u7b7e\": \"https:\/\/www.pixiv.net\/novel\/marker_all.php\"},\n    {\"\ud83c\udfe0 \u9996\u9875\": \"https:\/\/www.pixiv.net\"},\n]\n\nnormal = [\n    {\"\u2705 \u5e38\u89c4 \u5c0f\u8bf4 \u63a8\u8350 \u2705\": \"\"},\n    {\"\u2b50\ufe0f \u5173\u6ce8\": \"https:\/\/www.pixiv.net\/ajax\/follow_latest\/novel?p={{page}}&mode=all&lang=zh\"},\n    {\"\ud83d\udcaf \u63a8\u8350\": \"https:\/\/www.pixiv.net\/ajax\/top\/novel?mode=all&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=safe&lang=zh\"},\n    {\"\ud83c\udd99 \u66f4\u65b0\": \"https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/pixiv.json\"},\n]\n\nr18New = [\n    {\"\ud83c\udd95 \u6700\u65b0 \u4f01\u5212 \u7ea6\u7a3f \ud83d\udcb0\": \"\"},\n    {\"\ud83c\udd95 \u6700\u65b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/new?lastId=0&limit=20&r18=true&lang=zh\"},\n    {\"\ud83d\udcd1 \u4f01\u5212\": \"https:\/\/www.pixiv.net\/ajax\/user_event\/portal\/novels?mode=r18&p={{page}}&lang=zh\"},\n    {\"\ud83d\udcb0 \u7ea6\u7a3f\": \"https:\/\/www.pixiv.net\/ajax\/commission\/page\/request\/complete\/novels?mode=r18&p={{page}}&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=all&lang=zh\"},\n]\n\ngeneralNew = [\n    {\"\u2705 \u6700\u65b0 \u4f01\u5212 \u7ea6\u7a3f \u2705\": \"\"},\n    {\"\u6700\u65b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/new?lastId=0&limit=20&r18=false&lang=zh\"},\n    {\"\u4f01\u5212\": \"https:\/\/www.pixiv.net\/ajax\/user_event\/portal\/novels?mode=all&p={{page}}&lang=zh\"},\n    {\"\u7ea6\u7a3f\": \"https:\/\/www.pixiv.net\/ajax\/commission\/page\/request\/complete\/novels?mode=all&p={{page}}&lang=zh\"},\n    {\"\u7f16\u8f91\": \"https:\/\/www.pixiv.net\/novel\/editors_picks\"},\n]\n\nr18Rank = [\n    {\"\ud83d\udc51 \u6392\u884c\u699c\u5355 \ud83d\udc51\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=daily_r18\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_r18\"},\n    {\"R18G\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=r18g\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=male_r18\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=female_r18\"}\n]\n\ngeneralRank = [\n    {\"\ud83c\udfc6 \u6392\u884c\u699c\u5355 \ud83c\udfc6\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=daily\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly\"},\n    {\"\u672c\u6708\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=monthly\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=male\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=female\"},\n    {\"\u65b0\u4eba\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=rookie\"},\n    {\"\u539f\u521b\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_original\"},\n    {\"AI\u751f\u6210\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_ai\"}\n]\n\nr18Genre = [\n    {\"\ud83d\udd25 \u539f\u521b\u70ed\u95e8 \ud83d\udd25\": \"\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/male?mode=r18&lang=zh\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/female?mode=r18&lang=zh\"},\n    {\"\u604b\u7231\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/romance?mode=r18&lang=zh\"},\n    {\"\u5f02\u4e16\u754c\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/isekai_fantasy?mode=r18&lang=zh\"},\n    {\"\u73b0\u4ee3\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/contemporary_fantasy?mode=r18&lang=zh\"},\n    {\"\u60ac\u7591\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/mystery?mode=r18&lang=zh\"},\n    {\"\u6050\u6016\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/horror?mode=r18&lang=zh\"},\n    {\"\u79d1\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/sci-fi?mode=r18&lang=zh\"},\n    {\"\u6587\u5b66\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/literature?mode=r18&lang=zh\"},\n    {\"\u60c5\u611f\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/drama?mode=r18&lang=zh\"},\n    {\"\u5386\u53f2\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/historical_pieces?mode=r18&lang=zh\"},\n    {\"\u803d\u7f8e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/bl?mode=r18&lang=zh\"},\n    {\"\u767e\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/yuri?mode=r18&lang=zh\"},\n    {\"\u6563\u6587\u00b7\u8bd7\u6b4c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/poetry?mode=r18&lang=zh\"},\n    {\"\u968f\u7b14\u00b7\u7eaa\u5b9e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/non-fiction??mode=r18&lang=zh\"},\n    {\"\u5267\u672c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/screenplays?mode=r18&lang=zh\"},\n    {\"\u8bc4\u8bba\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/reviews?mode=r18&lang=zh\"},\n    {\"\u5176\u4ed6\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/other?mode=r18&lang=zh\"}\n]\n\ngeneralgGenre = [\n    {\"\u2764\ufe0f\u200d\ud83d\udd25 \u539f\u521b\u70ed\u95e8 \u2764\ufe0f\u200d\ud83d\udd25\": \"\"},\n    {\"\u7efc\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/all?mode=safe&lang=zh\"},\n    {\"\u604b\u7231\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/romance?mode=safe&lang=zh\"},\n    {\"\u5f02\u4e16\u754c\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/isekai_fantasy?mode=safe&lang=zh\"},\n    {\"\u73b0\u4ee3\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/contemporary_fantasy?mode=safe&lang=zh\"},\n    {\"\u60ac\u7591\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/mystery?mode=safe&lang=zh\"},\n    {\"\u6050\u6016\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/horror?mode=safe&lang=zh\"},\n    {\"\u79d1\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/sci-fi?mode=safe&lang=zh\"},\n    {\"\u6587\u5b66\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/literature?mode=safe&lang=zh\"},\n    {\"\u60c5\u611f\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/drama?mode=safe&lang=zh\"},\n    {\"\u5386\u53f2\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/historical_pieces?mode=safe&lang=zh\"},\n    {\"\u803d\u7f8e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/bl?mode=safe&lang=zh\"},\n    {\"\u767e\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/yuri?mode=safe&lang=zh\"},\n    {\"\u6563\u6587\u00b7\u8bd7\u6b4c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/poetry?mode=safe&lang=zh\"},\n    {\"\u968f\u7b14\u00b7\u7eaa\u5b9e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/non-fiction??mode=safe&lang=zh\"},\n    {\"\u5267\u672c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/screenplays?mode=safe&lang=zh\"},\n    {\"\u8bc4\u8bba\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/reviews?mode=safe&lang=zh\"},\n    {\"\u5176\u4ed6\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/other?mode=safe&lang=zh\"}\n]\n\nbookmarks = [{\"\u2764\ufe0f \u4ed6\u4eba\u6536\u85cf \u2764\ufe0f\": \"\"}]\n\nli = li.concat(normal)\nli = li.concat(r18New)\nif (SHOW_GENERAL_NEW === true) {\n    li = li.concat(generalNew)\n}\nli = li.concat(r18Rank)\nif (SHOW_GENERAL_RANK === true) {\n    li = li.concat(generalRank)\n}\nif (SHOW_R18_GENRE === true) {\n    li = li.concat(r18Genre)\n}\nif (SHOW_GENERAL_GENRE === true) {\n    li = li.concat(generalgGenre)\n}\n\nsleepToast('\u4f7f\u7528\u6307\u5357\ud83d\udd16\\n\\n\u53d1\u73b0 - \u66f4\u65b0 - \u70b9\u51fb\"\ud83d\udd30 \u4f7f\u7528\u6307\u5357\" - \u67e5\u770b')\n\nlet isSourceRead = eval(String(cache.get(\"isSourceRead\")))\nlet isBackupSource = eval(String(cache.get(\"isBackupSource\")))\nif (!isBackupSource && !isSourceRead) {\n    let authors = JSON.parse(cache.get(\"pixivLikeAuthors\"))\n    if (authors !== null && authors.length >= 1) {\n        authors.forEach(authorId => {\n            let resp = getAjaxJson(urlUserDetailed(authorId))\n            if (resp.error !== true) {\n                let bookmark = {}\n                bookmark[resp.body.name] = `https:\/\/www.pixiv.net\/ajax\/user\/${authorId}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh`\n                bookmarks.push(bookmark)\n            }\n        })\n        li = li.concat(bookmarks)\n    } else {\n        sleepToast(\"\u2764\ufe0f \u4ed6\u4eba\u6536\u85cf\\n \u5237\u65b0\u53d1\u73b0\u524d\uff0c\u8bf7\u5728\u3010\u8ba2\u9605\u6e90\u3011\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff0c\u5e76\u5728\u3010\u8ba2\u9605\u6e90\u3011\u7684\u767b\u5f55\u754c\u9762\u70b9\u51fb \u2764\ufe0f \u4ed6\u4eba\u6536\u85cf \u5bfc\u5165\u6570\u636e\")\n    }\n}\n\nli.forEach(item => {\n    item.title = Object.keys(item)[0]\n    item.url = Object.values(item)[0]\n    delete item[Object.keys(item)[0]]\n    item.style = {}\n    item.style.layout_flexGrow = 1\n    item.style.layout_flexShrink = 1\n    item.style.layout_alignSelf = \"auto\"\n    item.style.layout_wrapBefore = \"false\"\n    if (item.url === \"\") {\n        item.style.layout_flexBasisPercent = 1\n    } else {\n        item.style.layout_flexBasisPercent = -1\n    }\n})\n\nJSON.stringify(li)","header":"{\"referer\":\"https:\/\/www.pixiv.net\"}","jsLib":"var checkTimes = 0\nvar cacheSaveSeconds = 7*24*60*60  \/\/ \u7f13\u5b58\u65f6\u95f47\u5929\n\n\nfunction cacheGetAndSet(cache, key, supplyFunc) {\n    let v = cache.get(key)\n    if (v === undefined || v === null) {\n        v = JSON.stringify(supplyFunc())\n        cache.put(key, v, cacheSaveSeconds)\n    }\n    return JSON.parse(v)\n}\nfunction putInCache(objectName, object, saveSeconds) {\n    const {java, cache} = this\n    if (object === undefined) object = null\n    if (saveSeconds === undefined) saveSeconds = 0\n    cache.put(objectName, JSON.stringify(object), saveSeconds)\n}\nfunction getFromCache(objectName) {\n    const {java, cache} = this\n    let object = cache.get(objectName)\n    if (object === undefined) return null  \/\/ \u517c\u5bb9\u6e90\u9605\n    return JSON.parse(object)\n}\n\nfunction isHtmlString(str) {\n    return str.startsWith(\"<!DOCTYPE html>\")\n}\nfunction isJsonString(str) {\n    try {\n        if (typeof JSON.parse(str) === \"object\") {\n            return true\n        }\n    } catch(e) {}\n    return false\n}\n\nfunction getWebViewUA() {\n    const {java, cache} = this\n    let userAgent = String(java.getWebViewUA())\n    if (userAgent.includes(\"Windows NT 10.0; Win64; x64\")) {\n        userAgent = \"Mozilla\/5.0 (Linux; Android 10; K) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Mobile Safari\/537.36\"\n    }\n    \/\/ java.log(`userAgent=${userAgent}`)\n    cache.put(\"userAgent\", userAgent)\n    return String(userAgent)\n}\nfunction isLogin() {\n    const {java, cache} = this\n    let cookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n    return cookie.includes(\"first_visit_datetime\")\n}\n\nfunction getAjaxJson(url, forceUpdate) {\n    const {java, cache} = this\n    if (forceUpdate === true) {\n        let result = JSON.parse(java.ajax(url))\n        cache.put(url, JSON.stringify(result), cacheSaveSeconds)\n        return result\n    }\n    return cacheGetAndSet(cache, url, () => {\n        return JSON.parse(java.ajax(url))\n    })\n}\nfunction getAjaxAllJson(urls, forceUpdate) {\n    const {java, cache} = this\n    if (forceUpdate === true) {\n        let result = java.ajaxAll(urls).map(resp => JSON.parse(resp.body()))\n        cache.put(urls, JSON.stringify(result), cacheSaveSeconds)\n        for (let i in urls) cache.put(urls[i], JSON.stringify(result[i]), cacheSaveSeconds)\n        return result\n    }\n    return cacheGetAndSet(cache, urls, () => {\n        let result = java.ajaxAll(urls).map(resp => JSON.parse(resp.body()))\n        cache.put(urls, JSON.stringify(result), cacheSaveSeconds)\n        for (let i in urls) cache.put(urls[i], JSON.stringify(result[i]), cacheSaveSeconds)\n        return result\n    })\n}\nfunction getWebviewJson(url, parseFunc) {\n    const {java, cache} = this\n    return cacheGetAndSet(cache, url, () => {\n        let html = java.webView(null, url, null)\n        return JSON.parse(parseFunc(html))\n    })\n}\n\nfunction urlNovelUrl(novelId) {\n    return `https:\/\/www.pixiv.net\/novel\/show.php?id=${novelId}`\n}\nfunction urlNovelDetailed(novelId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/${novelId}`\n}\nfunction urlNovelsDetailed(userId, nidList) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\nfunction urlNovelBookmarkData(novelId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/${novelId}\/bookmarkData`\n}\nfunction urlNovelComments(novelId, offset, limit) {\n    return `https:\/\/www.pixiv.net\/ajax\/novels\/comments\/roots?novel_id=${novelId}&offset=${offset}&limit=${limit}&lang=zh`\n}\nfunction urlNovelCommentsReply(commentId, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/novels\/comments\/replies?comment_id=${commentId}&page=${page}&lang=zh`\n}\n\nfunction urlSeriesUrl(seriesId) {\n    return `https:\/\/www.pixiv.net\/novel\/series\/${seriesId}`\n}\nfunction urlSeriesDetailed(seriesId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${seriesId}?lang=zh`\n}\nfunction urlSeriesNovelsTitles(seriesId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${seriesId}\/content_titles`\n}\nfunction urlSeriesNovels(seriesId, limit, offset) {\n    if (limit > 30) limit = 30\n    if (limit < 10) limit = 10\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series_content\/${seriesId}?limit=${limit}&last_order=${offset}&order_by=asc&lang=zh`\n}\n\nfunction urlUserUrl(userID) {\n    return `https:\/\/www.pixiv.net\/users\/${userID}\/novels`\n}\nfunction urlUserDetailed(userID) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userID}`\n}\nfunction urlUserWorkLatest(userID) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userID}\/works\/latest`\n}\nfunction urlUserAllWorks(userId) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/profile\/all?lang=zh`\n}\n\nfunction urlSearchNovel(novelName, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/novels\/${encodeURI(novelName)}?word=${encodeURI(novelName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`\n}\nfunction urlSearchSeries(seriesName, page) {\n    return`https:\/\/www.pixiv.net\/ajax\/search\/novels\/${encodeURI(seriesName)}?word=${encodeURI(seriesName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&gs=1&lang=zh`\n}\n\/\/ \u4e0d\u5b8c\u5168\u5339\u914d\u7528\u6237\u540d\nfunction urlSearchUser(userName, full) {\n    if (full === undefined || full === false) {\n        return `https:\/\/www.pixiv.net\/search\/users?nick=${userName}&s_mode=s_usr&nick_mf=1`\n    } else {\n        return `https:\/\/www.pixiv.net\/search\/users?nick=${userName}&s_mode=s_usr_full&i=1`\n    }\n}\n\nfunction urlCoverUrl(url) {\n    return `${url}, {\"headers\": {\"Referer\":\"https:\/\/www.pixiv.net\/\"}}`\n}\nfunction urlIllustDetailed(illustId) {\n    return `https:\/\/www.pixiv.net\/ajax\/illust\/${illustId}?lang=zh`\n}\nfunction urlIllustOriginal(illustId, order) {\n    const {java, cache} = this\n    if (order <= 1) order = 1\n    let url = urlIllustDetailed(illustId)\n    let illustOriginal = cacheGetAndSet(cache, url, () => {\n        return JSON.parse(java.ajax(url))\n    }).body.urls.original\n    return urlCoverUrl(illustOriginal.replace(`_p0`, `_p${order - 1}`))\n}\nfunction urlEmojiUrl(emojiId) {\n    return urlCoverUrl(`https:\/\/s.pximg.net\/common\/images\/emoji\/${emojiId}.png`)\n}\nfunction urlStampUrl(stampId) {\n    return urlCoverUrl(`https:\/\/s.pximg.net\/common\/images\/stamp\/generated-stamps\/${stampId}_s.jpg`)\n}\n\nfunction urlMessageThreadLatest(max) {\n    if (max === undefined || max <= 5) max = 5\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=latest_message_threads2&num=${max}&lang=zh`\n}\nfunction urlMessageThreadContents(threadId, max) {\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=message_thread_contents&thread_id=${threadId}&num=${max}`\n}\nfunction urlMessageThreadDetail(threadId) {\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=message_thread&thread_id=${threadId}`\n}\nfunction urlNotification() {\n    return `https:\/\/www.pixiv.net\/ajax\/notification&lang=zh`\n}\n\nfunction dateFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let Y = time.getFullYear() + \"\u5e74\";\n    let M = addZero(time.getMonth() + 1) + \"\u6708\";\n    let D = addZero(time.getDate()) + \"\u65e5\";\n    return Y + M + D;\n}\nfunction timeFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let YY = time.getFullYear()\n    let MM = addZero(time.getMonth() + 1)\n    let DD = addZero(time.getDate())\n    let hh = addZero(time.getHours())\n    let mm = addZero(time.getMinutes())\n    let ss = addZero(time.getSeconds())\n    return `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n}\nfunction timeTextFormat(text) {\n    return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n}\nfunction sleep(time) {\n    let endTime = new Date().getTime() + time\n    while(true){\n        if (new Date().getTime() > endTime){\n            return;\n        }\n    }\n}\nfunction sleepToast(text, second) {\n    const {java} = this\n    java.log(text)\n    java.longToast(text)\n    if (second === undefined) second = 0.01\n    sleep(1000*second)\n}","lastUpdateTime":"1752819569449","loginCheckJs":"var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\nfunction isBackupSource() {\n    let isBackupSource = source.bookSourceName.includes(\"\u5907\u7528\")\n    cache.put(\"isBackupSource\", isBackupSource)\n    return isBackupSource\n}\n\/\/ \u68c0\u6d4b \u6e90\u9605\n\/\/ \u53ef\u7528 java.ajax() \u4e0d\u53ef\u7528 java.webview() java.ajaxAll()\n\/\/ \u53ef\u7528 java.getCookie() cache.put() cache.get() \u9ed8\u8ba4\u503c\u4e3a undefined\n\/\/ \u53ef\u7528 java.startBrowser() \u4e0d\u53ef\u7528 java.startBrowserAwaitAwait\n\/\/ \u53ef\u7528 source.bookSourceName source.getVariable() source.setVariable()\u7b49\n\/\/ java.getUserAgent() java.getWebViewUA() \u76ee\u524d\u8fd4\u56de\u5185\u5bb9\u76f8\u540c\nfunction isSourceRead() {\n    let isSourceReadStatus = java.getUserAgent() === java.getWebViewUA()\n    cache.put(\"isSourceRead\", isSourceReadStatus)\n    return isSourceReadStatus\n}\n\nfunction publicFunc() {\n    let u = {}, settings\n    \/\/ \u8f93\u51fa\u4e66\u6e90\u4fe1\u606f\n    java.log(`\ud83c\udd7f\ufe0f ${source.bookSourceComment.split(\"\\n\")[0]}`)\n    java.log(`\ud83d\udccc ${source.bookSourceComment.split(\"\\n\")[2]}`)\n    if (isSourceRead()) {\n        java.log(`\ud83d\udcc6 \u66f4\u65b0\u65f6\u95f4\uff1a${java.timeFormat(source.lastUpdateTime)}`)\n        java.log(\"\ud83d\udcf1 \u8f6f\u4ef6\u5e73\u53f0\uff1a\ud83c\udf4e \u6e90\u9605 SourceRead\")\n    } else {\n        java.log(`\ud83d\udcc6 \u66f4\u65b0\u65f6\u95f4\uff1a${timeFormat(source.lastUpdateTime)}`)\n        java.log(\"\ud83d\udcf1 \u8f6f\u4ef6\u5e73\u53f0\uff1a\ud83e\udd16 \u5f00\u6e90\u9605\u8bfb Leagdo\")\n    }\n\n    \/\/ \u83b7\u53d6\u8bbe\u7f6e\uff0c\u5907\u7528\u4e66\u6e90\u4f7f\u7528\u65e7\u7248\u8bbe\u7f6e\uff0c\u4e66\u6e90\u4ece\u7f13\u5b58\u83b7\u53d6\u8bbe\u7f6e\n    if (isBackupSource()) {\n        settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    } else {\n        \/\/ cache.delete(\"pixivSettings\")\n        settings = getFromCache(\"pixivSettings\")\n    }\n    if (settings !== null) {\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u81ea\u5b9a\u4e49\u8bbe\u7f6e\")\n    } else {\n        settings = {}\n        settings.SEARCH_AUTHOR = true       \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n        settings.CONVERT_CHINESE = true     \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\n        settings.SHOW_LIKE_NOVELS = true    \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\n        settings.SHOW_WATCHED_SERIES = true \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u8ffd\u6574\u7cfb\u5217\u5c0f\u8bf4\n        settings.MORE_INFORMATION = false   \/\/ \u8be6\u60c5\uff1a\u4e66\u7c4d\u7b80\u4ecb\u663e\u793a\u66f4\u591a\u4fe1\u606f\n        settings.SHOW_UPDATE_TIME = true    \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u66f4\u65b0\u65f6\u95f4\uff0c\u4f46\u4f1a\u589e\u52a0\u5c11\u8bb8\u8bf7\u6c42\n        settings.SHOW_ORIGINAL_LINK = true  \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u539f\u59cb\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u5927\u91cf\u8bf7\u6c42\n        settings.REPLACE_TITLE_MARKS = true \/\/ \u6b63\u6587\uff1a\u6ce8\u97f3\u5185\u5bb9\u4e3a\u6c49\u5b57\u65f6\uff0c\u66ff\u6362\u4e3a\u4e66\u540d\u53f7\n        settings.SHOW_CAPTIONS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u9996\u663e\u793a\u63cf\u8ff0\n        settings.SHOW_COMMENTS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u5c3e\u663e\u793a\u8bc4\u8bba\n        settings.FAST  = false              \/\/ \u5168\u5c40\uff1a\u5feb\u901f\u6a21\u5f0f\n        settings.DEBUG = false              \/\/ \u5168\u5c40\uff1a\u8c03\u8bd5\u6a21\u5f0f\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\uff08\u65e0\u81ea\u5b9a\u4e49\u8bbe\u7f6e \u6216 \u81ea\u5b9a\u4e49\u8bbe\u7f6e\u6709\u8bef\uff09\")\n    }\n    if (settings.FAST === true) {\n        settings.SEARCH_AUTHOR = false        \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n        settings.CONVERT_CHINESE = false      \/\/ \u641c\u7d22\uff1a\u7e41\u7b80\u901a\u641c\n        settings.SHOW_UPDATE_TIME = false     \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u66f4\u65b0\u65f6\u95f4\n        settings.SHOW_ORIGINAL_LINK = false   \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u6e90\u94fe\u63a5\n        settings.SHOW_COMMENTS = false        \/\/ \u6b63\u6587\uff1a\u663e\u793a\u8bc4\u8bba\n    } else {\n        settings.SEARCH_AUTHOR = true        \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n    }\n    settings.IS_LEGADO = !isSourceRead()\n    settings.IS_SOURCE_READ = isSourceRead()\n    settings.IS_BACKUP_SOURCE = isBackupSource()\n    u.settings = settings\n    putInCache(\"pixivSettings\", settings)  \/\/ \u8bbe\u7f6e\u5199\u5165\u7f13\u5b58\n\n    u.debugFunc = (func) => {\n        if (util.settings.DEBUG === true) {\n            func()\n        }\n    }\n\n    u.checkStatus = function(status) {\n        if (status === true) return \"\u2705 \u5df2\"\n        else if (status === false) return \"\u274c \u672a\"\n        else if (status === undefined) return \"\ud83c\ude1a\ufe0f \u65e0\u6570\u636e\uff1a\"\n    }\n\n    u.login = function() {\n        let resp = java.startBrowserAwait(`https:\/\/accounts.pixiv.net\/login,\n    {\"headers\": {\"User-Agent\": \"${java.getWebViewUA()}\"}}`, '\u767b\u5f55\u8d26\u53f7', false)\n        if (resp.code() === 200) {\n            this.getCookie(); this.getCsrfToken()\n        } else {\n            java.log(resp.code()); sleepToast(\"\u26a0\ufe0f \u767b\u5f55\u5931\u8d25\")\n        }\n    }\n\n    u.logout = function() {\n        this.removeCookie()\n        java.startBrowser(\"https:\/\/www.pixiv.net\/logout.php\", \"\u9000\u51fa\u8d26\u53f7\")\n        this.removeCookie()\n        sleepToast(`\u2705 \u5df2\u9000\u51fa\u5f53\u524d\u8d26\u53f7\\n\\n\u9000\u51fa\u540e\u8bf7\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \u2714\ufe0f \u9000\u51fa\\n\\n\u767b\u5f55\u8bf7\u70b9\u51fb\u3010\u767b\u5f55\u8d26\u53f7\u3011\u8fdb\u884c\u767b\u5f55`)\n    }\n\n    u.getCookie = function() {\n        let pixivCookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n        if (pixivCookie.includes(\"first_visit_datetime\")) {\n            \/\/ java.log(typeof pixivCookie)\n            \/\/ java.log(pixivCookie)\n            cache.put(\"pixivCookie\", pixivCookie, 60*60)\n            return pixivCookie\n        } else {\n            cache.delete(\"pixivCookie\")\n            sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(pixivCookie)\")\n            return null\n        }\n    }\n\n    u.removeCookie = function() {\n        cookie.removeCookie('https:\/\/www.pixiv.net')\n        cookie.removeCookie('https:\/\/accounts.pixiv.net')\n        cookie.removeCookie('https:\/\/accounts.google.com')\n        cookie.removeCookie('https:\/\/api.weibo.com')\n        cache.delete(\"pixivCookie\")\n        cache.delete(\"csfrToken\")  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n        cache.delete(\"headers\")\n    }\n\n    u.vote = function (id, to, dt) {\n        id = id || 25245136; let k = 'vote_' + id;\n        if (Date.now() > (+dt || 17531e8) || +String(cache.get(k)) > 0) return;\n        let b = `https:\/\/www.pixiv.net\/ajax\/novel\/${id}`,\n            t = _ => Date.parse(new Date().toLocaleDateString()) + 828e5 - Date.now(),\n            f = _ => cache.put(k, '1', Math.min(3600, t() \/ 1e3 | 0)) & java.ajax(b);\n        try {\n            java.post(b + '\/poll\/answer', `{\"choice_id\":${to || 2}}`, {\n                'x-csrf-token': cache.get('csfrToken') || this.getCsrfToken(),\n                'Cookie': cache.get(\"pixivCookie\") || this.getCookie(),\n                'Content-Type': 'application\/json'\n            }).statusCode() === 200 && f();\n        } catch (e) {\n            String(e).includes('403') && f();\n        }\n    }\n\n    \/\/ \u83b7\u53d6 Csrf Token\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6536\u85cf\u7b49\u8bf7\u6c42\n    \/\/ \u83b7\u53d6\u65b9\u6cd5\u6765\u81ea\u811a\u672c Pixiv Previewer\n    \/\/ https:\/\/github.com\/Ocrosoft\/PixivPreviewer\n    \/\/ https:\/\/greasyfork.org\/zh-CN\/scripts\/30766-pixiv-previewer\/code\n    u.getCsrfToken = function() {\n        let csfrToken\n        let html = java.webView(null, \"https:\/\/www.pixiv.net\/\", null)\n        try {\n            csfrToken = html.match(\/token\\\\\":\\\\\"([a-z0-9]{32})\/)[1]\n        } catch (e) {\n            csfrToken = null\n            sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(csfrToken)\")\n        }\n        java.log(typeof csfrToken)\n        java.log(csfrToken)\n        cache.put(\"csfrToken\", csfrToken)  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n        return csfrToken\n    }\n\n    \/\/ \u5c06\u591a\u4e2a\u957f\u7bc7\u5c0f\u8bf4\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n    u.combineNovels = function(novels) {\n        return novels.filter(novel => {\n            \/\/ \u5355\u672c\u76f4\u63a5\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                return true\n            }\n            \/\/ \u96c6\u5408\u4e2d\u6ca1\u6709\u8be5\u7cfb\u5217\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                return true\n            }\n            return false\n        })\n    }\n\n    \/\/ \u5c4f\u853d\u4f5c\u8005\n    u.authorFilter = function(novels) {\n        let authors = getFromCache(\"blockAuthorList\")\n        if (authors !== null && authors.length >= 0) {\n            java.log(`\ud83d\udeab \u5c4f\u853d\u4f5c\u8005ID\uff1a${JSON.stringify(authors)}`)\n            authors.forEach(author => {\n                novels = novels.filter(novel => novel.userId !== String(author))\n            })\n        }\n        return novels\n    }\n\n    u.novelFilter = function(novels) {\n        let novels1 = [], novels2 = [], msg\n        let likeNovels = getFromCache(\"likeNovels\")\n        let watchedSeries = getFromCache(\"watchedSeries\")\n        let novels0 = novels.map(novel => novel.id)\n\n        msg = util.checkStatus(util.settings.SHOW_LIKE_NOVELS).replace(\"\u672a\",\"\u4e0d\")\n        java.log(`${msg}\u663e\u793a\u6536\u85cf\u5c0f\u8bf4`)\n        if (util.settings.SHOW_LIKE_NOVELS === false) {\n            novels = novels.filter(novel => !likeNovels.includes(Number(novel.id)))\n            novels1 = novels.map(novel => novel.id)\n            java.log(`\u23ec \u8fc7\u6ee4\u6536\u85cf\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels1.length}`)\n        }\n\n        msg = util.checkStatus(util.settings.SHOW_WATCHED_SERIES).replace(\"\u672a\",\"\u4e0d\")\n        java.log(`${msg}\u663e\u793a\u8ffd\u66f4\u7cfb\u5217`)\n        if (util.settings.SHOW_WATCHED_SERIES === false) {\n            novels = novels.filter(novel => !watchedSeries.includes(Number(novel.seriesId)))\n            novels2 = novels.map(novel => novel.id)\n            if (novels1.length >= 1) novels0 = novels1\n            java.log(`\u23ec \u8fc7\u6ee4\u8ffd\u66f4\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n        }\n\n        let novels3 = novels.map(novel => novel.id)\n        if (novels0.length >= 1 && novels3.length === 0) {\n            let msg = `\u23ec \u8fc7\u6ee4\u5c0f\u8bf4\\n\u26a0\ufe0f \u8fc7\u6ee4\u540e\u65e0\u7ed3\u679c\\n\\n\u8bf7\u6839\u636e\u9700\u8981\\n`\n            if (util.settings.SHOW_LIKE_NOVELS === false) msg += \"\u5f00\u542f\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\\n\"\n            if (util.settings.SHOW_WATCHED_SERIES === false) msg += \"\u5f00\u542f\u663e\u793a\u8ffd\u66f4\u7cfb\u5217\"\n            sleepToast(msg, 1)\n        }\n\n        util.debugFunc(() => {\n            \/\/ java.log(JSON.stringify(novels0))\n            java.log(JSON.stringify(novels0.length))\n            \/\/ java.log(JSON.stringify(novels1))\n            java.log(JSON.stringify(novels1.length))\n            \/\/ java.log(JSON.stringify(novels2))\n            java.log(JSON.stringify(novels2.length))\n        })\n        return novels\n    }\n\n    \/\/ \u6536\u85cf\u5c0f\u8bf4\/\u8ffd\u66f4\u7cfb\u5217 \u5199\u5165\u7f13\u5b58\n    u.saveNovels = function(listInCacheName, list) {\n        let listInCache = getFromCache(listInCacheName)\n        if (listInCache === null) listInCache = []\n\n        listInCache = listInCache.concat(list)\n        listInCache = Array.from(new Set(listInCache))\n        cache.put(listInCacheName, JSON.stringify(listInCache))\n\n        if (listInCacheName === \"likeNovels\") listInCacheName = \"\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4ID\"\n        else if (listInCacheName === \"watchedSeries\") listInCacheName = \"\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217ID\"\n        java.log(`${listInCacheName}\uff1a${JSON.stringify(listInCache)}`)\n    }\n\n    \/\/ \u5904\u7406 novels \u5217\u8868\n    u.handNovels = function(novels) {\n        let likeNovels = [], watchedSeries = []\n        novels = util.authorFilter(novels)\n        novels.forEach(novel => {\n            \/\/ novel.id = novel.id\n            \/\/ novel.title = novel.title\n            \/\/ novel.userName = novel.userName\n            \/\/ novel.userId = novel.userId\n            \/\/ novel.tags = novel.tags\n            cache.put(`${novel.userName}`, novel.userId)  \/\/ \u52a0\u5165\u7f13\u5b58\uff0c\u4fbf\u4e8e\u641c\u7d22\u4f5c\u8005\n            if (novel.tags === undefined || novel.tags === null) {\n                novel.tags = []\n            }\n            \/\/ \u641c\u7d22\u5355\u7bc7\n            if (novel.isOneshot === undefined) {\n                \/\/ novel.seriesId = novel.seriesId\n                \/\/ novel.seriesTitle = novel.seriesTitle\n                \/\/ novel.textCount = novel.textCount\n                \/\/ novel.description = novel.description\n                novel.coverUrl = novel.url\n                \/\/ novel.createDate = novel.createDate\n                \/\/ novel.updateDate = novel.updateDate\n            }\n\n            \/\/ \u641c\u7d22\u7cfb\u5217\n            if (novel.isOneshot !== undefined) {\n                if (novel.isOneshot === true) {\n                    novel.seriesId = undefined\n                    novel.id = novel.novelId  \/\/ \u83b7\u53d6\u771f\u6b63\u7684 novelId\n                    novel.seriesTitle = undefined\n                } else {\n                    novel.seriesId = novel.id\n                    novel.id = novel.novelId = novel.latestEpisodeId  \/\/ \u83b7\u53d6\u771f\u6b63\u7684 novelId\n                    novel.seriesTitle = novel.title\n                    \/\/ novel.isWatched = novel.isWatched  \/\/ \u641c\u7d22\u7cfb\u5217\u53ef\u83b7\u53d6\n                }\n                novel.textCount = novel.textLength\n                novel.description = novel.caption\n                novel.coverUrl = novel.cover.urls[\"480mw\"]\n                novel.createDate = novel.createDateTime\n                novel.updateDate = novel.updateDateTime\n            }\n\n            \/\/ \u5355\u7bc7\u6b63\u6587\u8be6\u60c5\u9875\n            if (novel.content) {\n                novel.novelId = novel.id\n                novel.tags = novel.tags.tags.map(item => item.tag)\n                novel.textCount = novel.userNovels[`${novel.id}`].textCount\n                \/\/ novel.latestChapter = novel.title\n                \/\/ novel.description = novel.description\n                novel.coverUrl = novel.userNovels[`${novel.id}`].url\n                \/\/ novel.createDate = novel.createDate\n                novel.updateDate = novel.uploadDate\n\n                if (novel.seriesNavData) {\n                    novel.seriesId = novel.seriesNavData.seriesId\n                    novel.seriesTitle = novel.seriesNavData.title\n                }\n            }\n\n            \/\/ \u7cfb\u5217\u8be6\u60c5\n            if (novel.firstNovelId) {\n                novel.seriesId = novel.id\n                novel.id = novel.novelId = novel.firstNovelId\n                novel.seriesTitle = novel.title\n                novel.coverUrl = novel.cover.urls[\"480mw\"]\n                \/\/ novel.isWatched = novel.isWatched  \/\/ \u641c\u7d22\u7cfb\u5217\u53ef\u83b7\u53d6\n            }\n\n            \/\/ \u5355\u7bc7\u52a0\u66f4\u591a\u4fe1\u606f\n            if (!novel.seriesId) {\n                novel.tags.unshift(\"\u5355\u672c\")\n                novel.latestChapter = novel.title\n                novel.detailedUrl = urlNovelDetailed(novel.id)\n                novel.total = 1\n                if (novel.bookmarkData) {\n                    novel.isBookmark = true\n                    cache.put(`collect${novel.id}`, novel.bookmarkData.id)\n                    likeNovels.push(Number(novel.id))\n                } else {\n                    novel.isBookmark = false\n                }\n            }\n            \/\/ \u7cfb\u5217\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\n            if (novel.seriesId) {\n                let series = getAjaxJson(urlSeriesDetailed(novel.seriesId)).body\n                novel.id = series.firstNovelId\n                novel.title = series.title\n                novel.tags = novel.tags.concat(series.tags)\n                novel.tags.unshift(\"\u957f\u7bc7\")\n                novel.textCount = series.publishedTotalCharacterCount\n                novel.description = series.caption\n                novel.coverUrl = series.cover.urls[\"480mw\"]\n                novel.detailedUrl = urlSeriesDetailed(novel.seriesId)\n                novel.createDate = series.createDate\n                novel.updateDate = series.updateDate\n                novel.total = series.publishedContentCount\n                novel.isWatched = series.isWatched\n                if (novel.isWatched === true) {\n                    watchedSeries.push(Number(novel.seriesId))\n                }\n\n                \/\/ \u53d1\u9001\u8bf7\u6c42\u83b7\u53d6\u7b2c\u4e00\u7ae0 \u83b7\u53d6\u6807\u7b7e\u4e0e\u7b80\u4ecb\n                let firstNovel = {}\n                try {\n                    firstNovel = getAjaxJson(urlNovelDetailed(series.firstNovelId)).body\n                    novel.tags = novel.tags.concat(firstNovel.tags.tags.map(item => item.tag))\n                    if (firstNovel.bookmarkData) {\n                        firstNovel.isBookmark = true\n                        cache.put(`collect${firstNovel.id}`, firstNovel.bookmarkData.id)\n                        likeNovels.push(Number(firstNovel.id))\n                    }\n                } catch (e) {  \/\/ \u9632\u6b62\u7cfb\u5217\u9996\u7bc7\u65e0\u6743\u9650\u83b7\u53d6\n                    try {\n                        firstNovel = getAjaxJson(urlSeriesNovels(novel.seriesId, 30, 0)).body.thumbnails.novel[0]\n                        novel.id = novel.firstNovelId = firstNovel.id\n                        novel.tags = novel.tags.concat(firstNovel.tags)\n                    } catch (e) { \/\/ \u9632\u6b62\u7cfb\u5217\u9996\u7bc7\u65e0\u6743\u9650\u83b7\u53d6\n                        firstNovel = {}\n                        firstNovel.description = \"\"\n                    }\n                }\n                novel.tags.unshift(\"\u957f\u7bc7\")\n                if (novel.description === \"\") {\n                    novel.description = firstNovel.description\n                }\n            }\n        })\n        \/\/ \u6536\u85cf\u5c0f\u8bf4\/\u8ffd\u66f4\u7cfb\u5217 \u5199\u5165\u7f13\u5b58\n        util.saveNovels(\"likeNovels\", likeNovels)\n        util.saveNovels(\"watchedSeries\", watchedSeries)\n        util.debugFunc(() => {\n            java.log(`\u5904\u7406\u5c0f\u8bf4\u5b8c\u6210`)\n        })\n        return novels\n    }\n\n    \/\/ \u5c0f\u8bf4\u4fe1\u606f\u683c\u5f0f\u5316\n    u.formatNovels = function(novels) {\n        novels = util.novelFilter(novels)\n        novels.forEach(novel => {\n            if (novel.title) novel.title = novel.title.replace(RegExp(\/^\\s+|\\s+$\/g), \"\")\n            novel.coverUrl = urlCoverUrl(novel.coverUrl)\n            novel.readingTime = `${novel.readingTime \/ 60} \u5206\u949f`\n            novel.createDate = dateFormat(novel.createDate)\n            novel.updateDate = dateFormat(novel.updateDate)\n\n            novel.tags2 = []\n            for (let i in novel.tags) {\n                let tag = novel.tags[i]\n                if (tag.includes(\"\/\")) {\n                    let tags = tag.split(\"\/\")\n                    novel.tags2 = novel.tags2.concat(tags)\n                } else {\n                    novel.tags2.push(tag)\n                }\n            }\n            novel.tags = Array.from(new Set(novel.tags2))\n            novel.tags = novel.tags.join(\",\")\n            if (novel.seriesId) {\n                collectMsg = `\ud83d\udcc3 \u8ffd\u66f4\uff1a${util.checkStatus(novel.isWatched)}\u8ffd\u66f4\u7cfb\u5217`\n            } else {\n                collectMsg = `\u2764\ufe0f \u6536\u85cf\uff1a${util.checkStatus(novel.isBookmark)}\u52a0\u5165\u6536\u85cf`\n            }\n\n            if (util.settings.MORE_INFORMATION) {\n                novel.description = `\\n\ud83c\udd7f\ufe0f \u767b\u5f55\uff1a${util.checkStatus(isLogin())}\u767b\u5f55\u8d26\u53f7\n                ${collectMsg}\\n\ud83d\udcd6 \u4e66\u540d\uff1a${novel.title}\\n\ud83d\udc64 \u4f5c\u8005\uff1a${novel.userName}\n                #\ufe0f \u6807\u7b7e\uff1a${novel.tags}\\n\u2b06\ufe0f \u4e0a\u4f20\uff1a${novel.createDate}\n                \ud83d\udd04 \u66f4\u65b0\uff1a${novel.updateDate}\\n\ud83d\udcc4 \u7b80\u4ecb\uff1a${novel.description}`\n            } else {\n                novel.description = `\\n\ud83c\udd7f\ufe0f \u767b\u5f55\uff1a${util.checkStatus(isLogin())}\u767b\u5f55\u8d26\u53f7\n                ${collectMsg}\\n\u2b06\ufe0f \u4e0a\u4f20\uff1a${novel.createDate}\\n\ud83d\udd04 \u66f4\u65b0\uff1a${novel.updateDate}\n                \ud83d\udcc4 \u7b80\u4ecb\uff1a${novel.description}`\n            }\n        })\n        return novels\n    }\n\n    \/\/ \u6b63\u6587\uff0c\u8be6\u60c5\uff0c\u641c\u7d22\uff1a\u4ece\u7f51\u5740\u83b7\u53d6id\uff0c\u8fd4\u56de\u5355\u7bc7\u5c0f\u8bf4 res\uff0c\u7cfb\u5217\u8fd4\u56de\u9996\u7bc7\u5c0f\u8bf4 res\n    \/\/ pixiv \u9ed8\u8ba4\u5206\u4eab\u4fe1\u606f\u4e2d\u6709#\u53f7\uff0c\u4e0d\u4f1a\u88ab\u8bc6\u522b\u6210\u94fe\u63a5\uff0c\u65e0\u6cd5\u4f7f\u7528\u6dfb\u52a0\u7f51\u5740\n    u.getNovelRes = function(result) {\n        let novelId = 0, res = {\"body\": {}}\n        let isJson = isJsonString(result)\n        let isHtml = isHtmlString(result)\n\n        if (!isJson && isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/series\/\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                java.log(`\u7cfb\u5217ID\uff1a${id}`)\n                try {\n                    novelId = getAjaxJson(urlSeriesDetailed(id)).body.firstNovelId\n                } catch (e) {\n                    novelId = getAjaxJson(urlSeriesNovels(id, 30, 0)).body.thumbnails.novel[0].id\n                }\n            } else {\n                let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    novelId = id\n                }\n            }\n        }\n        if (isJson) {\n            res = JSON.parse(result)\n        }\n\n        if (novelId) {\n            java.log(`\u5339\u914d\u5c0f\u8bf4ID\uff1a${novelId}`)\n            res = getAjaxJson(urlNovelDetailed(novelId))\n        }\n        if (res.error === true) {\n            java.log(`\u65e0\u6cd5\u4ece Pixiv \u83b7\u53d6\u5f53\u524d\u5c0f\u8bf4`)\n            java.log(JSON.stringify(res))\n        }\n        return res.body\n    }\n\n    \/\/ \u76ee\u5f55\uff1a\u4ece\u7f51\u5740\u83b7\u53d6id\uff0c\u5c3d\u53ef\u80fd\u8fd4\u56de\u7cfb\u5217 res\uff0c\u5355\u7bc7\u5c0f\u8bf4\u8fd4\u56de\u5c0f\u8bf4 res\n    u.getNovelResSeries = function(result) {\n        let seriesId = 0, res = {\"body\": {}}\n        let isJson = isJsonString(result)\n        let isHtml = isHtmlString(result)\n\n        if (!isJson && isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/series\/\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                seriesId = id\n            } else {\n                let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    java.log(`\u5339\u914d\u5c0f\u8bf4ID\uff1a${id}`)\n                    res = getAjaxJson(urlNovelDetailed(id))\n                }\n            }\n        }\n        if (isJson) {\n            res = JSON.parse(result)\n        }\n\n        if (res.body && res.body.seriesNavData) {\n            seriesId = res.body.seriesNavData.seriesId\n        }\n        if (seriesId) {\n            java.log(`\u7cfb\u5217ID\uff1a${seriesId}`)\n            res = getAjaxJson(urlSeriesDetailed(seriesId))\n        }\n        if (res.error === true) {\n            java.log(`\u65e0\u6cd5\u4ece Pixiv \u83b7\u53d6\u5f53\u524d\u5c0f\u8bf4`)\n            java.log(JSON.stringify(res))\n        }\n        return res.body\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\nfunction checkMessageThread(checkTimes) {\n    if (checkTimes === undefined) {\n        checkTimes = cache.get(\"checkTimes\")\n    }\n    if (checkTimes === 0 && isLogin()) {\n        let latestMsg = getAjaxJson(urlMessageThreadLatest(5))\n        if (latestMsg.error === true) {\n            java.log(JSON.stringify(latestMsg))\n        } else if (latestMsg.body.total >= 1) {\n            let msg = latestMsg.body.message_threads.filter(item => item.thread_name === \"pixiv\u4e8b\u52d9\u5c40\")[0]\n            if (msg && new Date().getTime()- 1000*msg.modified_at <= 3*24*60*60*1000) { \/\/ 3\u5929\u5185\u8fdb\u884c\u63d0\u793a\n                sleepToast(`\u60a8\u4e8e ${timeFormat(1000*msg.modified_at)} \u89e6\u53d1 Pixiv \u3010\u8fc7\u5ea6\u8bbf\u95ee\u3011\uff0c\u8bf7\u4fee\u6539\u5bc6\u7801\u5e76\u91cd\u65b0\u767b\u5f55\u3002\\n\u5982\u5df2\u4fee\u6539\u8bf7\u5ffd\u7565`, 3)\n                sleepToast(`${msg.latest_content}`, 5)\n                java.startBrowser(\"https:\/\/accounts.pixiv.net\/password\/change\",'\u4fee\u6539\u5bc6\u7801')\n            }\n        }\n    }\n    cache.put(\"checkTimes\", checkTimes + 1, 4*60*60)  \/\/ \u7f13\u5b584h\uff0c\u6bcf4h\u63d0\u9192\u4e00\u6b21\n    \/\/ cache.put(\"checkTimes\", checkTimes + 1, 60)  \/\/ \u6d4b\u8bd5\u7528\uff0c\u7f13\u5b5860s\uff0c\u6bcf\u5206\u949f\u63d0\u9192\u4e00\u6b21\n    \/\/ java.log(checkTimes + 1)\n}\n\n\/\/ \u83b7\u53d6\u8bf7\u6c42\u7684user id\u65b9\u4fbf\u5176\u4ed6ajax\u8bf7\u6c42\u6784\u9020\nfunction getPixivUid() {\n    let uid = java.getResponse().headers().get(\"x-userid\")\n    if (uid != null) {\n        cache.put(\"pixiv:uid\", String(uid))\n    } else {\n        cache.delete(\"pixiv:uid\")\n    }\n}\n\nfunction getHeaders() {\n    let headers = {\n        \"accept\": \"application\/json\",\n        \"accept-encoding\": \"gzip, deflate, br, zstd\",\n        \"accept-language\": \"zh-CN\",\n        \/\/ \"content-type\": \"application\/json; charset=utf-8\",\n        \/\/ \"content-type\": \"application\/x-www-form-urlencoded; charset=utf-8\",\n        \"origin\": \"https\/\/www.pixiv.net\",\n        \"referer\": \"https:\/\/www.pixiv.net\/\",\n        \/\/ \"sec-ch-ua\": `\"Not\/A)Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"`,\n        \/\/ \"sec-ch-ua-mobile\": \"?0\",\n        \/\/ \"sec-ch-ua-platform\": \"Windows\",\n        \/\/ \"sec-fetch-dest\": \"empty\",\n        \/\/ \"sec-fetch-mode\": \"cors\",\n        \/\/ \"sec-fetch-site\": \"same-origin\",\n        \"user-agent\": cache.get(\"userAgent\"),\n        \"x-csrf-token\": cache.get(\"csfrToken\"),\n        \"Cookie\": cache.get(\"pixivCookie\")\n    }\n    putInCache(\"headers\", headers)\n    return headers\n}\n\nfunction getBlockAuthorsFromSource() {\n    let authors = []\n    try {\n        authors = JSON.parse(`[${source.getVariable().replace(\"\uff0c\", \",\")}]`)\n        \/\/ sleepToast(JSON.stringify(authors))\n    } catch (e) {\n        sleepToast(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\\n\u26a0\ufe0f \u3010\u4e66\u6e90\u3011\u6e90\u53d8\u91cf\u8bbe\u7f6e\u6709\u8bef\\n\u8f93\u5165\u4f5c\u8005ID\uff0c\u4ee5\u82f1\u6587\u9017\u53f7\u95f4\u9694\uff0c\u4fdd\u5b58\")\n    }\n    return authors\n}\n\nfunction syncBlockAuthorList() {\n    let authors1 = getFromCache(\"blockAuthorList\")\n    let authors2 = getBlockAuthorsFromSource()\n    util.debugFunc(() => {\n        java.log(`\u5c4f\u853d\u4f5c\u8005\uff1a\u7f13\u5b58\u3000\uff1a${JSON.stringify(authors1)}`)\n        java.log(`\u5c4f\u853d\u4f5c\u8005\uff1a\u6e90\u53d8\u91cf\uff1a${JSON.stringify(authors2)}`)\n    })\n    putInCache(\"blockAuthorList\", authors2)\n    if (authors1 === null || authors1.length !== authors2.length) {\n        java.log(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\uff1a\u5df2\u5c06\u6e90\u53d8\u91cf\u540c\u6b65\u81f3\u7f13\u5b58\")\n    } else if (authors2.length === 0) {\n        java.log(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\uff1a\u5df2\u6e05\u7a7a\u5c4f\u853d\u4f5c\u8005\")\n    }\n}\n\npublicFunc()\nsyncBlockAuthorList()\nif (result.code() === 200) {\n    if (isBackupSource() && !isLogin()) {\n        util.getCsrfToken()\n    }\n    getPixivUid(); getWebViewUA(); util.getCookie(); getHeaders()\n    if (!util.settings.FAST) checkMessageThread()   \/\/ \u68c0\u6d4b\u8fc7\u5ea6\u8bbf\u95ee\n    util.vote();\n}\n\nutil.debugFunc(() => {\n    java.log(`DEBUG = ${util.settings.DEBUG}\\n`)\n    java.log(JSON.stringify(util.settings, null, 4))\n    java.log(`${getWebViewUA()}\\n`)\n    java.log(`${cache.get(\"csfrToken\")}\\n`)\n    java.log(`${cache.get(\"pixivCookie\")}\\n`)\n})\n\njava.getStrResponse(null, null)","loginUrl":"https:\/\/accounts.pixiv.net\/login","respondTime":180000,"ruleBookInfo":{"author":"userName","canReName":"true","coverUrl":"coverUrl","init":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction novelHandler(novel){\n    novel = util.formatNovels(util.handNovels([novel]))[0]\n    if (novel.seriesId === undefined || novel.seriesId === null) {\n        book.bookUrl = novel.detailedUrl = urlNovelUrl(novel.id)\n        book.tocUrl = novel.catalogUrl = urlNovelDetailed(novel.id)\n    } else {\n        book.bookUrl = novel.detailedUrl = urlSeriesUrl(novel.seriesId)\n        book.tocUrl = novel.catalogUrl = urlSeriesDetailed(novel.seriesId)\n    }\n    \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    source.putLoginInfo(JSON.stringify(novel))\n    cache.put(\"novel\", JSON.stringify(novel))\n    return novel\n}\n\n(() => {\n    return novelHandler(util.getNovelRes(result))\n})()","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","tocUrl":"catalogUrl","wordCount":"textCount"},"ruleContent":{"content":"@js:\nvar util = objParse(String(java.get(\"util\")))\nlet emoji = {\n    \"normal\": 101, \"surprise\": 102, \"serious\": 103, \"heaven\": 104, \"happy\": 105,\n    \"excited\": 106, \"sing\": 107, \"cry\": 108, \"normal2\": 201, \"shame2\": 202,\n    \"love2\": 203, \"interesting2\": 204, \"blush2\": 205, \"fire2\": 206, \"angry2\": 207,\n    \"shine2\": 208, \"panic2\": 209, \"normal3\": 301, \"satisfaction3\": 302, \"surprise3\": 303,\n    \"smile3\": 304, \"shock3\": 305, \"gaze3\": 306, \"wink3\": 307, \"happy3\": 308,\n    \"excited3\": 309, \"love3\": 310, \"normal4\": 401, \"surprise4\": 402, \"serious4\": 403,\n    \"love4\": 404, \"shine4\": 405, \"sweet4\": 406, \"shame4\": 407, \"sleep4\": 408,\n    \"heart\": 501, \"teardrop\": 502, \"star\": 503\n}\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction getNovelInfo(res) {\n    \/\/ \u653e\u5165\u5c0f\u8bf4\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    let novel = source.getLoginInfoMap()\n    if (novel === undefined) novel = JSON.parse(cache.get(\"novel\"))\n    novel.id = Number(res.id)\n    novel.title = res.title\n    novel.userId = res.userId\n    novel.userName = res.userName\n\n    if (res.bookmarkData) {\n        novel.isBookmark = true\n        cache.put(`collect${novel.id}`, res.bookmarkData.id)\n        util.saveNovels(\"likeNovels\", [Number(novel.id)])\n    } else {\n        novel.isBookmark = false\n    }\n\n    if (res.seriesNavData) {\n        novel.seriesId = Number(res.seriesNavData.seriesId)\n        novel.seriesTitle = res.seriesNavData.title\n        novel.isWatched = res.seriesNavData.isWatched\n        util.saveNovels(\"watchedSeries\", [Number(novel.seriesId)])\n    } else {\n        novel.seriesId = null\n        novel.seriesTitle = \"\"\n        novel.isWatched = false\n    }\n\n    \/\/ \u7cfb\u5217 + \u9605\u8bfb\uff0c\u4f7f\u7528\u5f53\u524d\u7ae0\u8282\u540d\u79f0\n    if (novel.seriesId && util.settings.IS_LEGADO) {\n        let novelIds = JSON.parse(cache.get(`novelIds${novel.seriesId}`))\n        novel.id = novelIds[book.durChapterIndex]\n        novel.title = book.durChapterTitle\n\n        let bookmarkId = JSON.parse(cache.get(`collect${novel.id}`))\n        novel.isBookmark = !!bookmarkId\n    }\n\n    source.putLoginInfo(JSON.stringify(novel))\n    cache.put(\"novel\", JSON.stringify(novel))\n}\n\nfunction getContent(res) {\n    getNovelInfo(res)  \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    \/\/ charpterReading()  \/\/ \u8f93\u51fa\u7ae0\u8282\u4fe1\u606f\n    let content = String(res.content)\n    \/\/ let content = \"undefined\"\n    if (content.includes(\"undefined\")) {\n        return checkContent()\n    }\n\n    \/\/ \u5728\u6b63\u6587\u5185\u90e8\u6dfb\u52a0\u5c0f\u8bf4\u63cf\u8ff0\n    if (util.settings.SHOW_CAPTIONS && res.description !== \"\") {\n        content = res.description + \"\\n\" + \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\".repeat(2) + content\n    }\n\n    \/\/ \u83b7\u53d6 [uploadedimage:] \u7684\u56fe\u7247\u94fe\u63a5\n    let hasEmbeddedImages = res.textEmbeddedImages !== undefined && res.textEmbeddedImages !== null\n    if (hasEmbeddedImages) {\n        Object.keys(res.textEmbeddedImages).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${urlCoverUrl(res.textEmbeddedImages[key].urls.original)}\">`)\n        })\n    }\n\n    \/\/ \u83b7\u53d6 [pixivimage:] \u7684\u56fe\u7247\u94fe\u63a5 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(\/\\[pixivimage:(\\d+)-?(\\d+)]\/gm))\n    if (matched) {\n        matched.forEach(pixivimage => {\n            let matched2, illustId, order = 0\n            if (pixivimage.includes(\"-\")) {\n                matched2 = pixivimage.match(RegExp(\"(\\\\d+)-(\\\\d+)\"))\n                illustId = matched2[1]; order = matched2[2]\n            } else {\n                matched2 = pixivimage.match(RegExp(\"\\\\d+\"))\n                illustId = matched2[0];\n            }\n            content = content.replace(`${pixivimage}`, `<img src=\"${urlIllustOriginal(illustId, order)}\">`)\n        })\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u5206\u9875\u6807\u8bb0\u7b26\u53f7 [newpage]\n    matched = content.match(RegExp(\/[ \u3000]*\\[newpage][ \u3000]*\/gm))\n    if (matched) {\n        for (let i in matched) {\n            content = content.replace(`${matched[i]}`, `${\"<p>\u200b<p\/>\".repeat(3)}`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u7ae0\u8282\u6807\u8bb0\u7b26\u53f7 [chapter:]\n    matched = content.match(RegExp(\/\\[chapter:(.*?)]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[chapter:(.*?)]\/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>\u200b<p\/>`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u8df3\u8f6c\u9875\u9762\u6807\u8bb0\u7b26\u53f7 [[jump:]]\n    matched = content.match(RegExp(\/\\[jump:(\\d+)]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(\/\\d+\/)\n            content = content.replace(`${matched[i]}`, `\\n\\n\u8df3\u8f6c\u81f3\u7b2c${page}\u8282`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u94fe\u63a5\u6807\u8bb0\u7b26\u53f7 [[jumpuri: > ]]\n    matched = content.match(RegExp(\/\\[\\[jumpuri:(.*?)>(.*?)]]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[\\[jumpuri:(.*?)>(.*?)]]\/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            \/\/ \u9605\u8bfb\u4e0d\u652f\u6301\u8d85\u94fe\u63a5\n            \/\/content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}<\/a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u6ce8\u97f3\u6807\u8bb0\u7b26\u53f7 [[rb: > ]]\n    matched = content.match(RegExp(\/\\[\\[rb:(.*?)>(.*?)]]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[\\[rb:(.*?)>(.*?)]]\/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (!util.settings.REPLACE_TITLE_MARKS) {\n                \/\/ \u9ed8\u8ba4\u66ff\u6362\u6210\uff08\u62ec\u53f7\uff09\n                content = content.replace(`${matchedText}`, `${kanji}\uff08${kana}\uff09`)\n            } else {\n                let reg = RegExp(\"[\\\\u4E00-\\\\u9FFF]+\", \"g\");\n                if (reg.test(kana)) {\n                    \/\/ kana\u4e3a\u4e2d\u6587\uff0c\u5219\u66ff\u6362\u56de\u300a\u4e66\u540d\u53f7\u300b\n                    content = content.replace(`${matchedText}`, `${kanji}\u300a${kana}\u300b`)\n                } else {\n                    \/\/ \u9605\u8bfb\u4e0d\u652f\u6301 <ruby> <rt> \u6ce8\u97f3\n                    \/\/ content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}<\/rt><\/ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}\uff08${kana}\uff09`)\n                }\n            }\n        }\n    }\n\n    if (util.settings.SHOW_COMMENTS) {\n        return content + getComment(res)\n    } else {\n        return content\n    }\n}\n\nfunction getComment(res) {\n    let comments = \"\"\n    let resp = getAjaxJson(urlNovelComments(res.id, 0, 1000), true)\n    if (resp.error === true) return comments;\n    let getTime = obj => obj.commentDate && obj.commentDate.replace(\/-0?\/g, '.');\n    let func = ($, x) => emoji[x] ? `<img src=\"${urlEmojiUrl(emoji[x])}\">` : $;\n    let addImg = obj => obj.comment === '' && obj.stampId ? `<img src=\"${urlStampUrl(obj.stampId)}\">` : obj.comment.replace(\/\\(([a-z]\\w+)\\)\/g, func);\n    resp.body.comments.forEach(comment => {\n        if (comment.comment === \"\") {\n            comment.comment = `<img src=\"${urlStampUrl(comment.stampId)}\">`\n        }\n        comments += `\ud83d\udc64${comment.userName}\uff1a${addImg(comment)}\\n(${getTime(comment)})\\n`\n\n        \/\/ \u83b7\u53d6\u8bc4\u8bba\u56de\u590d\n        if (comment.hasReplies === true) {\n            let resp = getAjaxJson(urlNovelCommentsReply(comment.id, 1), true)\n            if (resp.error === true) return comments;\n\n            resp.body.comments.reverse().forEach(reply => {\n                comments += `\ud83d\udc64${reply.userName}(\u2934\ufe0f${reply.replyToUserName})\uff1a${addImg(reply)}\\n(${getTime(reply)})\\n`\n            })\n            comments += \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\"\n        }\n    })\n    if (comments) {\n        comments = \"\\n\" + \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\".repeat(2) + \"\u7ae0\u8282\u8bc4\u8bba\uff1a\\n\" + comments\n    }\n    return comments;\n}\n\n(() => {\n    return getContent(util.getNovelRes(result))\n})()","imageStyle":"DEFAULT"},"ruleExplore":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  \/\/ \u5b58\u50a8seriesID \u6709BUG\u65e0\u6cd5\u5904\u7406\u7ffb\u9875\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction handlerFactory() {\n    if (baseUrl.includes(\"https:\/\/cdn.jsdelivr.net\")) {\n        return () => {updateSource(); return []}\n    }\n    if (!isLogin()) {\n        return handlerNoLogin()\n    }\n    if (baseUrl.includes(\"\/bookmark\")) {\n        return handlerBookMarks()\n    }\n    if (baseUrl.includes(\"\/top\")) {\n        return handlerRecommend()\n    }\n    if (baseUrl.includes(\"\/follow_latest\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/watch_list\")) {\n        return handlerWatchList()\n    }\n    if (baseUrl.includes(\"\/discovery\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/new\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/commission\/\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/user_event\/portal\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/genre\")) {\n        return handlerWatchList()\n    }\n    \/\/ \u6b63\u5219\u5339\u914d\u7f51\u5740\u5185\u5bb9\n    if (baseUrl.includes(\"\/ranking\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"\/marker_all\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"\/editors_picks\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"https:\/\/www.pixiv.net\")) {\n        return handlerRanking()\n    }\n    else {\n        return []\n    }\n}\n\nfunction handlerNoLogin() {\n    return () => {\n        sleepToast(\"\u26a0\ufe0f \u5f53\u524d\u672a\u767b\u5f55\u8d26\u53f7\\n\\n\u8bf7\u767b\u5f55 Pixiv \u8d26\u53f7\", 1.5)\n        util.removeCookie(); util.login()\n        sleepToast(\"\u767b\u5f55\u6210\u529f\u540e\uff0c\u8bf7\u91cd\u65b0\u8fdb\u5165\u53d1\u73b0\", 2)\n        return []\n    }\n}\n\n\/\/ \u63a8\u8350\u5c0f\u8bf4\nfunction handlerRecommend() {\n    return () => {\n        let res = JSON.parse(result)\n        const recommend = res.body.page.recommend\n        const novels = res.body.thumbnails.novel\n        let nidSet = new Set(recommend.ids)\n        \/\/ java.log(nidSet.size)\n        let list = novels.filter(novel => nidSet.has(String(novel.id)))\n        \/\/ java.log(`\u8fc7\u6ee4\u7ed3\u679c:${JSON.stringify(list)}`)\n        return util.formatNovels(util.handNovels(util.combineNovels(list)))\n    }\n}\n\n\/\/ \u6536\u85cf\u5c0f\u8bf4\uff0c\u4ed6\u4eba\u6536\u85cf\nfunction handlerBookMarks() {\n    return () => {\n        let res = JSON.parse(result).body.works\n        if (res === undefined || res.length === 0) {\n            \/\/\u6d41\u7a0b\u65e0\u6cd5\u672c\u73af\u8282\u4e2d\u6b62 \u53ea\u80fd\u4ea4\u7ed9\u4e0b\u4e00\u6d41\u7a0b\u5904\u7406\n            return []\n        }\n        return util.formatNovels(util.handNovels(res))\n    }\n}\n\n\/\/\u5173\u6ce8\u4f5c\u8005\uff0c\u5c0f\u8bf4\u59d4\u6258\uff0c\u5c0f\u8bf4\u4f01\u5212\nfunction handlerFollowLatest() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(util.combineNovels(res.body.thumbnails.novel)))\n    }\n}\n\n\/\/\u63a8\u8350\u5c0f\u8bf4\uff0c\u6700\u8fd1\u5c0f\u8bf4\nfunction handlerDiscovery() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(util.combineNovels(res.body.novels)))\n    }\n}\n\n\/\/ \u8ffd\u66f4\u5217\u8868\uff0c\u70ed\u95e8\u5206\u7c7b\nfunction handlerWatchList() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(res.body.thumbnails.novelSeries))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\uff0c\u7f16\u8f91\u90e8\u63a8\u8350\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRanking() {\n    if (util.settings.IS_LEGADO) return handlerRankingAjaxAll()\n    \/\/ else if (util.settings.IS_SOURCE_READ) return handlerRankingWebview()\n    else if (util.settings.IS_SOURCE_READ) return handlerRankingAjax()\n    else return []\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\uff0c\u7f16\u8f91\u90e8\u63a8\u8350\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRankingAjaxAll() {\n    return () => {\n        let  novelIds = [], novelUrls = []\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n                novelUrls.push(urlNovelDetailed(novelId))\n            }\n        }\n        \/\/ java.log(JSON.stringify(novelIds))\n        let novels = getAjaxAllJson(novelUrls).map(resp => resp.body)\n        return util.formatNovels(util.handNovels(util.combineNovels(novels)))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\nfunction handlerRankingWebview() {\n    return () => {\n        let novelIds = []  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n            }\n        }\n        \/\/ java.log(JSON.stringify(novelIds))\n        let userNovels = getWebviewJson(\n            urlNovelsDetailed(`${cache.get(\"pixiv:uid\")}`, novelIds), html => {\n                return (html.match(new RegExp(\">\\\\{.*?}<\"))[0].replace(\">\", \"\").replace(\"<\", \"\"))\n            }).body\n        return util.formatNovels(util.handNovels(util.combineNovels(Object.values(userNovels))))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRankingAjax() {\n    return () => {\n        let novels = [], novelIds = []\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n                \/\/ java.log(urlNovelDetailed(novelId))\n                let res = getAjaxJson(urlNovelDetailed(novelId))\n                if (res.error !== true) {\n                    novels.push(res.body)\n                } else {\n                    java.log(JSON.stringify(res))\n                }\n            }\n        }\n        return util.formatNovels(util.handNovels(util.combineNovels(novels)))\n    }\n}\n\n(() => {\n    return handlerFactory()()\n})()","bookUrl":"detailedUrl","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","wordCount":"textCount"},"ruleSearch":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nvar first = true;\n\/\/ \u5b58\u50a8seriesID\nvar seriesSet = {\n    keywords: \"Pixiv:Search\",\n    has: (value) => {\n        let page = Number(java.get(\"page\"))\n        if (page === 1 && first) {\n            first = false\n            cache.deleteMemory(this.keywords)\n            return false\n        }\n\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            return false\n        }\n        let set = new Set(JSON.parse(v))\n        return set.has(value)\n    },\n\n    add: (value) => {\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            cache.putMemory(this.keywords, JSON.stringify([value]))\n\n        } else {\n            let arr = JSON.parse(v)\n            if (typeof arr === \"string\") {\n                arr = Array(arr)\n            }\n            arr.push(value)\n            cache.putMemory(this.keywords, JSON.stringify(arr))\n        }\n    },\n};\n\nfunction getUserNovels() {\n    if (!isLogin()) {\n        sleepToast(\"\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\\n\\n\u26a0\ufe0f \u5f53\u524d\u672a\u767b\u5f55\u8d26\u53f7\\n\u8bf7\u767b\u5f55 Pixiv \u8d26\u53f7\", 1.5)\n        util.removeCookie(); util.login()\n        sleepToast(\"\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\\n\\n\u767b\u5f55\u6210\u529f\u540e\uff0c\u8bf7\u91cd\u65b0\u641c\u7d22\", 2)\n        return []\n    }\n\n    let uidList = [], novels = []\n    let username = String(java.get(\"keyword\"))\n    let page = Number(java.get(\"page\"))\n\n    \/\/ cache.delete(username)\n    let userid = cache.get(username)\n    if (userid !== undefined && userid !== null) {\n        uidList = [userid]\n        java.log(`\ud83d\udc64 \u7f13\u5b58\u4f5c\u8005ID\uff1a${userid}`)\n    } else {\n        html = java.ajax(urlSearchUser(username))\n        \/\/ java.log(html)\n        \/\/ \u4ec5\u5339\u914d\u6709\u6295\u7a3f\u4f5c\u54c1\u7684\u7528\u6237\n        let match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n        \/\/ java.log(JSON.stringify(match))\n        if (match === null || match.length === 0) {\n            return []\n        }\n\n        match = JSON.stringify(match).replace(\"\\\\\",\"\").split(\",\")\n        \/\/ java.log(JSON.stringify(match))\n        let regNumber = new RegExp(\"\\\\d+\")\n        uidList = match.map(v => {\n            return v.match(regNumber)[0]\n        })\n        java.log(`\ud83d\udc64 \u83b7\u53d6\u4f5c\u8005ID\uff1a${JSON.stringify(uidList)}`)\n    }\n\n    let tempUids = []\n    for (let i in uidList) {\n        let uid = uidList[i]\n        let resp = getAjaxJson(urlUserAllWorks(uid), true)\n        \/\/ java.log(urlUserAllWorks(id))\n        \/\/ java.log(JSON.stringify(resp))\n        if (resp.error === true) {\n            return []\n        }\n\n        \/\/ \u4ec5\u83b7\u53d6\u524d3\u4e2a\u6709\u5c0f\u8bf4\u7684\u4f5c\u8005\n        let novelIds = Object.keys(resp.body.novels)\n        \/\/ java.log(`${uid}-${novelIds.length}`)\n        if (novelIds.length >= 1) tempUids.push(uid)\n        if (tempUids.length === 3) {\n            java.log(`\ud83d\udc64 \u663e\u793a\u4f5c\u8005ID\uff1a${JSON.stringify(tempUids)}`)\n            break\n        }\n\n        \/\/ \u83b7\u53d6\u7cfb\u5217\u5c0f\u8bf4\uff0c\u4e0e util.handnovels \u7cfb\u5217\u8be6\u60c5\u517c\u5bb9\n        let seriesIds = []\n        if (resp.body.novelSeries.length >= 1) {\n            resp.body.novelSeries.forEach(novel =>{\n                seriesIds.push(novel.id)\n                novel.textCount = novel.publishedTotalCharacterCount\n                novel.description = novel.caption\n            })\n            novels = novels.concat(resp.body.novelSeries)\n        }\n\n        \/\/ \u83b7\u53d6\u6240\u6709\u7cfb\u5217\u5185\u90e8\u7684\u5c0f\u8bf4 ID\n        let seriesNovelIds = []\n        seriesIds.forEach(seriesId => {\n            let returnList = getAjaxJson(urlSeriesNovelsTitles(seriesId)).body\n            returnList.map(novel => {return seriesNovelIds.push(novel.id)})\n        })\n        \/\/ java.log(`\u6709\u7cfb\u5217\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(seriesNovelIds)}`)\n        \/\/ java.log(JSON.stringify(seriesNovelIds.length))\n\n        \/\/ \u83b7\u53d6\u5355\u7bc7\u5c0f\u8bf4\n        if (novelIds.length >= 1 && util.settings.IS_LEGADO) {\n            novelIds = novelIds.filter(novelid => (!seriesNovelIds.includes(novelid)))\n            novelIds = novelIds.reverse().slice((page - 1) * 20, page * 20)\n            \/\/ java.log(`\u771f\u5355\u7bc7\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(novelIds)}`)\n            \/\/ java.log(JSON.stringify(novelIds.length))\n            let novelUrls = novelIds.map(novelId => {return urlNovelDetailed(novelId)})\n            \/\/ java.log(JSON.stringify(novelUrls))\n            \/\/ cache.delete(novelUrls)\n            novels = novels.concat(getAjaxAllJson(novelUrls).map(resp => resp.body))\n        }\n\n        \/\/ \/\/ \u83b7\u53d6\u5355\u7bc7\u5c0f\u8bf4\n        if (novelIds.length >= 1 && util.settings.IS_SOURCE_READ) {\n            novelIds = novelIds.filter(novelid => (!seriesNovelIds.includes(novelid)))\n            \/\/ java.log(`\u771f\u5355\u7bc7\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(novelIds)}`)\n            \/\/ java.log(JSON.stringify(novelIds.length))\n            novelIds = novelIds.reverse().slice((page - 1) * 20, page * 20)\n            novelIds.forEach(novelId => {\n                \/\/ java.log(urlNovelDetailed(novelId))\n                let res = getAjaxJson(urlNovelDetailed(novelId))\n                if (res.error !== true) {\n                    novels.push(res.body)\n                } else {\n                    java.log(JSON.stringify(res))\n                }\n            })\n        }\n    }\n    \n    util.debugFunc(() => {\n        java.log(`\u83b7\u53d6\u7528\u6237\u641c\u7d22\u5c0f\u8bf4\u7ed3\u675f`)\n    })\n    return novels\n}\n\nfunction search(name, type, page) {\n    let resp = {}\n    if (type.includes(\"novel\")) {\n        resp = getAjaxJson(urlSearchNovel(name, page))\n        java.log(urlSearchNovel(name, page))\n    }\n    if (type.includes(\"series\")) {\n        resp = getAjaxJson(urlSearchSeries(name, page))\n        java.log(urlSearchSeries(name, page))\n    }\n    if (resp.error === true || resp.total === 0) {\n        return {\"data\": [], \"total\":0, \"lastPage\": 0}\n    }\n    return resp.body.novel\n}\n\nfunction getSeries() {\n    let novels = []\n    let name = String(java.get(\"keyword\"))\n    let maxPages = getFromCache(\"maxPages\")  \/\/ \u4ec5\u9ed8\u8ba4\u641c\u7d22\u4f7f\u7528\n    if (!maxPages) {\n        maxPages = getFromCache(\"seriesMaxPages\")  \/\/ \u641c\u7d22\u6807\u7b7e\u4f7f\u7528\n        if (!maxPages) maxPages = 1\n        putInCache(\"seriesMaxPages\", maxPages)\n    }\n    java.log(`\ud83d\udcc4 \u641c\u7d22\u7cfb\u5217\u6700\u5927\u9875\u7801\uff1a${maxPages}`)\n\n    if (JSON.parse(result).error === true) {\n        return []\n    }\n    let lastPage = JSON.parse(result).body.novel.lastPage\n    novels = novels.concat(JSON.parse(result).body.novel.data)\n    java.log(urlSearchSeries(name, 1))\n    cache.put(urlSearchSeries(name, 1), result, cacheSaveSeconds)  \/\/ \u52a0\u5165\u7f13\u5b58\n    for (let page = Number(java.get(\"page\")) + 1; page <= lastPage, page <= maxPages; page++) {\n        novels = novels.concat(search(name,\"series\", page).data)\n    }\n    return novels\n}\n\nfunction getNovels() {\n    let novels = []\n    let name = String(java.get(\"keyword\"))\n    let maxPages = getFromCache(\"maxPages\")  \/\/ \u4ec5\u9ed8\u8ba4\u641c\u7d22\u4f7f\u7528\n    if (!maxPages) {\n        maxPages = getFromCache(\"novelsMaxPages\")  \/\/ \u641c\u7d22\u6807\u7b7e\u4f7f\u7528\n        if (!maxPages) maxPages = 1\n        putInCache(\"novelsMaxPages\", maxPages)\n    }\n    java.log(`\ud83d\udcc4 \u641c\u7d22\u5355\u7bc7\u6700\u5927\u9875\u7801\uff1a${maxPages}`)\n\n    let resp = search(name, \"novel\", 1)\n    novels = novels.concat(resp.data)\n    for (let page = Number(java.get(\"page\")) + 1; page <= resp.lastPage, page <= maxPages; page++) {\n        novels = novels.concat(search(name,\"novel\", page).data)\n    }\n    return util.combineNovels(novels)\n}\n\nfunction getConvertNovels() {\n    let novels = []\n    let novelName = String(java.get(\"keyword\"))\n    let name1 = String(java.s2t(novelName))\n    let name2 = String(java.t2s(novelName))\n    if (name1 !== novelName) novels = novels.concat(search(name1, \"novel\", 1).data)\n    if (name2 !== novelName) novels = novels.concat(search(name2, \"novel\", 1).data)\n    novels = util.combineNovels(novels)\n    if (name1 !== novelName) novels = novels.concat(search(name1, \"series\", 1).data)\n    if (name2 !== novelName) novels = novels.concat(search(name2, \"series\", 1).data)\n    return novels\n}\n\nfunction novelFilter(novels) {\n    let textCount = 0, tags = []\n    let limitedTextCount = String(java.get(\"limitedTextCount\")).replace(\"\u5b57\u6570\", \"\").replace(\"\u5b57\u6578\", \"\")\n    \/\/ limitedTextCount = `3w 3k 3w5 3k5`.[0]\n    if (limitedTextCount.includes(\"w\") || limitedTextCount.includes(\"W\")) {\n        let num = limitedTextCount.toLowerCase().split(\"w\")\n        textCount = 10000 * num[0] + 1000 * num[1]\n    } else if (limitedTextCount.includes(\"k\") || limitedTextCount.includes(\"K\")) {\n        let num = limitedTextCount.toLowerCase().split(\"k\")\n        textCount = 1000 * num[0] + 100 * num[1]\n    }\n\n    let novels0 = novels.map(novel => novel.id)\n    if (textCount >= 1) {\n        novels = novels.filter(novel => novel.textCount >= textCount)\n        let novels1 = novels.map(novel => novel.id)\n        java.log(`\ud83d\udd22 \u5b57\u6570\u9650\u5236\uff1a${limitedTextCount}`)\n        java.log(`\u23ec \u5b57\u6570\u9650\u5236\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels1.length}`)\n    }\n\n    let inputTags = String(java.get(\"inputTags\")).split(\" \")\n    for (let i in inputTags) {\n        let tag = inputTags[i].trim()\n        if (tag !== \"\") tags.push(`${tag}`)\n    }\n\n    if (tags.length >= 1) {\n        \/\/ novels = novels.filter(novel => {\n        \/\/     \/\/ java.log(`${JSON.stringify(novel.tags)}\\n${tags.every(item => novel.tags.includes(item))}`)\n        \/\/     return tags.every(item => novel.tags.includes(item))\n        \/\/ })\n        novels = novels.filter(novel => tags.every(item => novel.tags.includes(item)))\n        let novels2 = novels.map(novel => novel.id)\n        java.log(`#\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a${tags.join(\"\u3001\")}`)\n        java.log(`#\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n    }\n\n    let inputAuthor = String(java.get(\"inputAuthor\")).trim()\n    if (inputAuthor) {\n        \/\/ novels = novels.filter(novel => {\n        \/\/     java.log(`${novel.userName}-${novel.userName.includes(inputAuthor)}`)\n        \/\/     return novel.userName.includes(inputAuthor)\n        \/\/ })\n        novels = novels.filter(novel => novel.userName.includes(inputAuthor))\n        let novels2 = novels.map(novel => novel.id)\n        java.log(`\ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a${tags.join(\"\u3001\")}`)\n        java.log(`\ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n    }\n    return novels\n}\n\n(() => {\n    let novels = []\n    let keyword = String(java.get(\"keyword\"))\n    if (keyword.startsWith(\"@\") || keyword.startsWith(\"\uff20\")) {\n        java.put(\"keyword\", keyword.slice(1))\n        novels = novels.concat(getUserNovels())\n    } else if (keyword.startsWith(\"#\") || keyword.startsWith(\"\uff03\")) {\n        java.put(\"keyword\", keyword.slice(1))\n        \/\/ \u5220\u9664\u9ed8\u8ba4\u641c\u7d22\u6700\u5927\u9875\u7801\uff0c\u4f7f\u7528\u5185\u90e8\u8bbe\u5b9a\u7684\u6700\u5927\u9875\u7801\n        cache.delete(\"maxPages\")\n        novels = novels.concat(getSeries())\n        novels = novels.concat(getNovels())\n    } else {\n        \/\/ \u8bbe\u7f6e\u9ed8\u8ba4\u641c\u7d22\u6700\u5927\u9875\u7801\n        putInCache(\"maxPages\", 1)\n        novels = novels.concat(getSeries())\n        novels = novels.concat(getNovels())\n        if (util.settings.SEARCH_AUTHOR) novels = novels.concat(getUserNovels())\n        if (util.settings.CONVERT_CHINESE) novels = novels.concat(getConvertNovels())\n    }\n    \/\/ java.log(JSON.stringify(novels))\n    \/\/ \u8fd4\u56de\u7a7a\u5217\u8868\u4e2d\u6b62\u6d41\u7a0b\n    if (novels.length === 0) {\n        return []\n    }\n    return novelFilter(util.formatNovels(util.handNovels(novels)))\n})()","bookUrl":"detailedUrl","checkKeyWord":"\u6d4b\u8bd5\u9875\u9762","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","wordCount":"textCount"},"ruleToc":{"chapterList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction urlNovel(novelId) {\n    if (util.settings.SHOW_ORIGINAL_LINK) {\n        return urlNovelUrl(novelId)\n    } else {\n        return urlNovelDetailed(novelId)\n    }\n}\n\nfunction oneShotHandler(res) {\n    res.textCount = res.userNovels[`${res.id}`].textCount\n    res.createDate = timeTextFormat(res.createDate)\n    return [{\n        title: res.title.trim(),\n        chapterUrl: urlNovel(res.id),\n        chapterInfo: `${res.createDate}\u3000\u3000${res.textCount}\u5b57`\n    }]\n}\n\nfunction seriesHandler(res) {\n    const limit = 30\n    let returnList = [], novelIds = []\n    let seriesID = res.id, allChaptersCount = res.total\n    util.debugFunc(() => {\n        java.log(`\u672c\u7cfb\u5217 ${seriesID} \u4e00\u5171\u6709${allChaptersCount}\u7ae0`);\n    })\n\n    \/\/\u53d1\u9001\u8bf7\u6c42\u83b7\u5f97\u76f8\u5e94\u6570\u91cf\u7684\u76ee\u5f55\u5217\u8868\n    function sendAjaxForGetChapters(lastIndex) {\n        resp = getAjaxJson(urlSeriesNovels(seriesID, limit, lastIndex), true)\n        res = resp.body.thumbnails.novel\n        \/\/ res = resp.body.page.seriesContents\n        res.forEach(v => {\n            v.title = v.title.trim()\n            java.log(urlNovel(v.id))\n            v.chapterUrl = urlNovel(v.id)\n            novelIds.push(v.id)\n            if (v.updateDate !== undefined) {\n                v.updateDate = timeTextFormat(v.createDate)\n                v.chapterInfo = `${v.updateDate}\u3000\u3000${v.textCount}\u5b57`\n            } else {\n                v.updateDate = java.timeFormat(v.uploadTimestamp)\n                v.chapterInfo = `${v.updateDate}\u3000\u3000${v.textLength}\u5b57`\n            }\n            util.debugFunc(() => {\n                java.log(`${v.title}`)\n            })\n        })\n        return res;\n    }\n\n    if (!util.settings.SHOW_UPDATE_TIME) {\n        returnList = getAjaxJson(urlSeriesNovelsTitles(seriesID), true).body\n        returnList.forEach(v => {\n            v.title = v.title.trim()\n            v.chapterUrl = urlNovel(v.id)\n            novelIds.push(v.id)\n        })\n    } else {\n        \/\/\u903b\u8f91\u63a7\u5236\u8005 \u4e5f\u5c31\u662f\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u4e24\u4e2a\u51fd\u6570\u6765\u505a\u5bf9\u5e94\u529f\u80fd\n        \/\/\u8981\u722c\u53d6\u7684\u603b\u6b21\u6570\n        let max = (allChaptersCount \/ limit) + 1\n        for (let i = 0; i < max; i++) {\n            \/\/java.log(\"i\u7684\u503c:\"+i)\n            let list = sendAjaxForGetChapters(i * limit);\n            \/\/\u53d6\u51fa\u6bcf\u4e2a\u503c\n            returnList = returnList.concat(list)\n        }\n    }\n    \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    cache.put(`novelIds${seriesID}`, JSON.stringify(novelIds), cacheSaveSeconds)\n    \/\/ java.log(JSON.stringify(returnList))\n    return returnList\n}\n\n(function (res) {\n    res = util.getNovelResSeries(result)\n    if (res.firstNovelId === undefined || res.seriesNavData === null) {\n        return oneShotHandler(res)\n    } else {\n        return seriesHandler(res)\n    }\n})()","chapterName":"title","chapterUrl":"chapterUrl","updateTime":"chapterInfo"},"searchUrl":"@js:\njava.put(\"key\", key)\njava.put(\"page\", page)\nlet keyword = key.split(\" \")\nlet limitedTextCount\nif (key.includes(\"\u5b57\u6570\") || key.includes(\"\u5b57\u6578\") ) {\n    limitedTextCount = keyword.pop()\n    keyword = keyword.join(\" \")\n} else {\n    limitedTextCount = \"\"\n    keyword = key\n}\njava.put(\"keyword\", keyword)\njava.put(\"limitedTextCount\", limitedTextCount)\n\nif (keyword.startsWith(\"@\") || keyword.startsWith(\"\uff20\")) {\n    if (keyword.includes(\"#\") || keyword.includes(\"\uff03\")) {\n        let author = keyword.split(\" \")[0]\n        let tags = keyword.replace(author, \"\").trim().slice(1)\n        java.put(\"keyword\", author)\n        java.put(\"inputTags\", tags)\n        java.log(`\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\uff1a${author} #\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a${tags.replace(\" \", \"\u3001\")}`)\n    } else {\n        java.put(\"keyword\", keyword)\n        java.log(`\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\uff1a${keyword.slice(1)}`)\n    }\n\n} else if (keyword.startsWith(\"#\") || keyword.startsWith(\"\uff03\")) {\n    keyword = keyword.slice(1)\n    if (keyword.includes(\"@\") || keyword.includes(\"\uff20\")) {\n        let author = keyword.match(new RegExp(\/[@\uff20](.*)\/))\n        keyword = keyword.replace(author[0], \"\").trim()\n        java.put(\"inputAuthor\", author[1])\n        java.log(`#\ufe0f\u20e3 \u641c\u7d22\u6807\u7b7e\uff1a${keyword} \ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a${author[1]}`)\n    } else {\n        java.log(`#\ufe0f\u20e3 \u641c\u7d22\u6807\u7b7e\uff1a${keyword}`)\n    }\n    java.put(\"keyword\", `#${keyword}`)\n\n} else {\n    java.log(`\ud83d\udd0d \u641c\u7d22\u5185\u5bb9\uff1a${keyword}`)\n}\nurlSearchSeries(keyword, page)","variableComment":"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005(\u672c\u5730)\uff1a\n\u8bbe\u7f6e\u65b9\u6cd51\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u3010\u82f1\u6587\u9017\u53f7\u3011\u95f4\u9694\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u5c4f\u853d\u4f5c\u8005\u6570\u636e\n\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u6e90\u53d8\u91cf\u6a21\u677f\uff1a\n12345, 67890\n\n\n\u2699\ufe0f \u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u8bbe\u7f6e1\ufe0f\u20e3\uff1a\u6253\u5f00\u5c0f\u8bf4 - \u83dc\u5355 - \u767b\u5f55 - \u70b9\u51fb\u4e0b\u65b9\u6309\u94ae\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u8bbe\u7f6e\u6570\u636e\n\n\u8bbe\u7f6e2\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u57fa\u672c - \u53d8\u91cf\u8bf4\u660e - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u2699\ufe0f \u81ea\u5b9a\u4e49\u8bbe\u7f6e\uff1a\u5c06 true \u6539\u4e3a false\uff0c\u6216\u76f8\u53cd\n\u26a0\ufe0f \u8bbe\u7f6e\u6e90\u53d8\u91cf\u3010\u65e0\u6cd5\u3011\u66f4\u6539\u4e66\u6e90\u81ea\u5b9a\u4e49\u8bbe\u7f6e\n\u26a0\ufe0f \u6ce8\u610f\u4e0d\u8981\u6dfb\u52a0\u6216\u5220\u9664\u5c3e\u968f\u9017\u53f7\",\"\n\u26a0\ufe0f \u66f4\u65b0\u53d1\u73b0\u9875\u9700\u8981\u957f\u6309\"Pixiv\"\uff0c\u624b\u52a8\u5237\u65b0\n\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u4e66\u6e90\u8bbe\u7f6e\uff1a\n{\n\"SEARCH_AUTHOR\": true,\n\"CONVERT_CHINESE\": true,\n\"SHOW_LIKE_NOVELS\": true,\n\"SHOW_WATCHED_SERIES\": true,\n\n\"SHOW_UPDATE_TIME\": true,\n\"MORE_INFORMATION\": false,\n\"SHOW_ORIGINAL_LINK\": true,\n\n\"REPLACE_TITLE_MARKS\": true,\n\"SHOW_CAPTIONS\": true,\n\"SHOW_COMMENTS\": true,\n\n\"FAST\": false,\n\"DEBUG\": false,\n\n\"SHOW_GENERAL_NEW\": false,\n\"SHOW_GENERAL_RANK\": false,\n\"SHOW_R18_GENRE\": false,\n\"SHOW_GENERAL_GENRE\": false\n}\n\n\/\/ SEARCH_AUTHOR\n\/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n\/\/ CONVERT_CHINESE\n\/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\uff0c\u4f46\u641c\u7d22\u4f1a\u53d8\u6162\n\/\/ SHOW_LIKE_NOVELS\n\/\/ \u641c\u7d22\/\u53d1\u73b0\uff1a\u7ed3\u679c\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\n\/\/ SHOW_WATCHED_SERIES\n\/\/ \u641c\u7d22\/\u53d1\u73b0\uff1a\u7ed3\u679c\u663e\u793a\u8ffd\u66f4\u7cfb\u5217\n\n\/\/ MORE_INFORMATION\n\/\/ \u8be6\u60c5\uff1a\u4e66\u7c4d\u7b80\u4ecb\u663e\u793a\u66f4\u591a\u4fe1\u606f\n\n\/\/ SHOW_UPDATE_TIME\n\/\/ \u76ee\u5f55\uff1a\u663e\u793a\u66f4\u65b0\u65f6\u95f4\uff0c\u4f46\u4f1a\u589e\u52a0\u5c11\u8bb8\u8bf7\u6c42\n\/\/ SHOW_ORIGINAL_LINK\n\/\/ \u76ee\u5f55\uff1a\u663e\u793a\u539f\u59cb\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u5927\u91cf\u8bf7\u6c42\n\n\/\/ REPLACE_TITLE_MARKS\n\/\/ \u6b63\u6587\uff1a\u6ce8\u97f3\u5185\u5bb9\u4e3a\u6c49\u5b57\u65f6\uff0c\u66ff\u6362\u4e3a\u4e66\u540d\u53f7\n\/\/ SHOW_CAPTIONS\n\/\/ \u6b63\u6587\uff1a\u7ae0\u9996\u663e\u793a\u5c0f\u8bf4\u63cf\u8ff0\n\/\/ SHOW_COMMENTS\n\/\/ \u6b63\u6587\uff1a\u7ae0\u5c3e\u663e\u793a\u5c0f\u8bf4\u8bc4\u8bba\n\n\/\/ FAST\n\/\/ \u5feb\u901f\u6a21\u5f0f\uff0c\u7981\u7528\u7e41\u7b80\u7edf\u641c\uff0c\u4e0d\u663e\u793a\u7ae0\u8282\u6765\u6e90\u94fe\u63a5\n\/\/ DEBUG\n\/\/ \u8c03\u8bd5\u6a21\u5f0f\n\n\/\/ SHOW_GENERAL_NEW\n\/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\/\/ SHOW_GENERAL_RANK\n\/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\/\/ SHOW_R18_GENRE\n\/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793aR18\u5c0f\u8bf4\n\/\/ SHOW_GENERAL_GENRE\n\/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\n","weight":0},{"bookSourceComment":"Pixiv \u6f2b\u753b\uff08\u66f4\u65b0\ud83d\udcc6\uff1a2025-05-21\uff09\n\n\u53ef\u7528\u529f\u80fd\uff1a\u2705\u641c\u7d22\u2705\u53d1\u73b0\u2705\u6dfb\u52a0\u7f51\u5740\u2705\u8ba2\u9605\u6e90\n\u641c\u7d22\u63d2\u753b\uff1a\u2705\u6f2b\u753b\u2611\ufe0f\u63d2\u753b\u274c\u52a8\u56fe\u2705\u6807\u7b7e\n\u53d1\u73b0\u6f2b\u753b\uff1a\u2705\u5173\u6ce8\u2705\u8ffd\u66f4\u2705\u63a8\u8350\u2705\u53d1\u73b0\u2705\u6536\u85cf\n\u6dfb\u52a0\u7f51\u5740\uff1a\u2705Pixiv\u63d2\u753b\u94fe\u63a5\u2705Pixiv\u6f2b\u753b\u76ee\u5f55\n\u8ba2\u9605\u7528\u6cd5\uff1a\u70b9\u51fb\u8ba2\u9605\u6e90\u6253\u5f00\u63d2\u753b\/\u6f2b\u753b\u76ee\u5f55\uff0c\u3010\u5237\u65b0\u3011\uff0c\u70b9\u51fb\u3010\u52a0\u5165\u4e66\u67b6\u3011\u6309\u94ae\uff0c\u6dfb\u52a0\u5230\u4e66\u67b6\n\n\u4e66\u6e90\u53d1\u5e03\uff1a\u517d\u4eba\u9605\u8bfb\u9891\u9053 https:\/\/t.me\/FurryReading\n\u9879\u76ee\u5730\u5740\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\n\u4f7f\u7528\u6559\u7a0b\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\/blob\/main\/doc\/Pixiv.md\n\n\u89c4\u5219\u8ba2\u9605\uff1aimport \u8ba2\u9605\u6e90\nhttps:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/import.json\nhttps:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/import.json\n\n\u2699\ufe0f \u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u4e66\u6e90\u7ba1\u7406 - \u7f16\u8f91\u4e66\u6e90 - \u57fa\u672c - \u53d8\u91cf\u8bf4\u660e - \u4fee\u6539\u5e76\u4fdd\u5b58","bookSourceGroup":"\ud83d\udd1e Pixiv \u6f2b\u753b","bookSourceName":"\ud83d\udd1e Pixiv \u6f2b\u753b","bookSourceType":2,"bookSourceUrl":"https:\/\/www.pixiv.net\/manga#2025-05-21","bookUrlPattern":"(https?:\/\/)?(www\\.)?pixiv\\.net\/((artworks|user\/\\d+\/series)|ajax\/(illust|series))\/\\d+","concurrentRate":"180\/60000","customOrder":13,"enabled":true,"enabledCookieJar":false,"enabledExplore":true,"exploreUrl":"@js:\nlet SHOW_GENERAL_ILLUST_NEW, SHOW_GENERAL_ILLUST_RANK\ntry {\n    settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    SHOW_GENERAL_ILLUST_NEW = settings.SHOW_GENERAL_ILLUST_NEW     \/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n    SHOW_GENERAL_ILLUST_RANK = settings.SHOW_GENERAL_ILLUST_RANK   \/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n} catch (e) {\n    SHOW_GENERAL_ILLUST_NEW = false\n    SHOW_GENERAL_ILLUST_RANK = false\n}\n\nli = [\n    {\"\u2b50\ufe0f \u5173\u6ce8\": \"https:\/\/www.pixiv.net\/ajax\/follow_latest\/illust?p={{page}}&mode=all&lang=zh\"},\n    {\"\ud83d\udcc3 \u8ffd\u66f4\": \"https:\/\/www.pixiv.net\/ajax\/watch_list\/manga?p={{page}}&new=1&lang=zh\"},\n    {\"\ud83d\udcaf \u63a8\u8350\": \"https:\/\/www.pixiv.net\/ajax\/top\/illust?mode=all&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/illust\/discovery?mode=all&lang=zh\"},\n    {\"\u2764\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/illusts\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh\"},\n    {\"\u3299\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/illusts\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=hide&lang=zh\"},\n    {\"\ud83c\udfe0 \u9996\u9875\": \"https:\/\/www.pixiv.net\"},\n    {\"\ud83c\udd99 \u66f4\u65b0\": \"https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/pixiv.json\"}\n]\n\ngeneralNew = [\n    {\"\ud83c\udd95 \u6700\u65b0 \u4f01\u5212 \u7ea6\u7a3f \ud83d\udcb0\": \"\"},\n    {\"\ud83c\udd95 \u6700\u65b0\": \"https:\/\/www.pixiv.net\/ajax\/illust\/new?lastId=0&limit=20&type=manga&lang=zh\"},\n    {\"\ud83d\udcd1 \u4f01\u5212\": \"https:\/\/www.pixiv.net\/ajax\/user_event\/portal\/artworks?mode=all&p={{page}}&lang=zh\"},\n    {\"\ud83d\udcb0 \u7ea6\u7a3f\": \"https:\/\/www.pixiv.net\/ajax\/commission\/page\/request\/complete\/manga?mode=all&p={{page}}&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/illust\/discovery?mode=all&lang=zh\"}\n]\n\nr18Rank = [\n    {\"\ud83d\udc51 \u6392\u884c\u699c\u5355 \ud83d\udc51\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/ranking.php?mode=daily_r18&content=manga&p={{page}}&format=json\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/ranking.php?mode=weekly_r18&content=manga&p={{page}}&format=json\"},\n    {\"R18G\": \"https:\/\/www.pixiv.net\/ranking.php?mode=r18g&content=manga&p={{page}}&format=json\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/ranking.php?mode=male_r18\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/ranking.php?mode=female_r18\"}\n]\n\ngeneralRank = [\n    {\"\ud83c\udfc6 \u6392\u884c\u699c\u5355 \ud83c\udfc6\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/ranking.php?mode=daily&content=manga&p={{page}}&format=json\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/ranking.php?mode=weekly&content=manga&p={{page}}&format=json\"},\n    {\"\u672c\u6708\": \"https:\/\/www.pixiv.net\/ranking.php?mode=monthly&content=manga&p={{page}}&format=json\"},\n    {\"\u65b0\u4eba\": \"https:\/\/www.pixiv.net\/ranking.php?mode=rookie&content=manga&p={{page}}&format=json\"}\n]\n\nif (SHOW_GENERAL_ILLUST_RANK === true) {\n    li = li.concat(generalNew)\n}\nli = li.concat(r18Rank)\nif (SHOW_GENERAL_ILLUST_RANK === true) {\n    li = li.concat(generalRank)\n}\n\nli.forEach(item => {\n    item.title = Object.keys(item)[0]\n    item.url = Object.values(item)[0]\n    delete item[Object.keys(item)[0]]\n    item.style = {}\n    item.style.layout_flexGrow = 1\n    item.style.layout_flexShrink = 1\n    item.style.layout_alignSelf = \"auto\"\n    item.style.layout_wrapBefore = \"false\"\n    if (item.url === \"\") {\n        item.style.layout_flexBasisPercent = 1\n    } else {\n        item.style.layout_flexBasisPercent = -1\n    }\n})\n\nJSON.stringify(li)","header":"{\"referer\":\"https:\/\/www.pixiv.net\"}","jsLib":"function cacheGetAndSet(cache, key, supplyFunc) {\n    let v = cache.get(key)\n    if (v === undefined || v === null) {\n        v = JSON.stringify(supplyFunc())\n        \/\/ \u7f13\u5b5810\u5206\u949f\n        cache.put(key, v, 600)\n    }\n    return JSON.parse(v)\n}\nfunction isJsonString(str) {\n    try {\n        if (typeof JSON.parse(str) === \"object\") {\n            return true\n        }\n    } catch(e) {}\n    return false\n}\nfunction getAjaxJson(url) {\n    const {java, cache} = this\n    return cacheGetAndSet(cache, url, () => {\n        return JSON.parse(java.ajax(url))\n    })\n}\nfunction getWebviewJson(url, parseFunc) {\n    const {java, cache} = this\n    return cacheGetAndSet(cache, url, () => {\n        let html = java.webView(null, url, null)\n        return JSON.parse(parseFunc(html))\n    })\n}\n\nfunction isLogin() {\n    const {java} = this\n    let cookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n    return cookie.includes(\"first_visit_datetime\")\n}\n\nfunction urlIllustUrl(illustId) {\n    return `https:\/\/www.pixiv.net\/artworks\/${illustId}`\n}\nfunction urlIllustDetailed(illustId) {\n    return `https:\/\/www.pixiv.net\/ajax\/illust\/${illustId}?lang=zh`\n}\nfunction urlIllustsDetailed(userId, idList) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/illusts?${idList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\nfunction urlSeriesUrl(userId, seriesId) {\n    return `https:\/\/www.pixiv.net\/user\/${userId}\/series\/${seriesId}`\n}\nfunction urlSeriesDetailed(seriesId, page=1) {\n    return `https:\/\/www.pixiv.net\/ajax\/series\/${seriesId}?p=${page}&lang=zh`\n}\n\nfunction urlUserAllWorks(userId) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/profile\/all?lang=zh`\n}\n\nfunction urlSearchArtwork(name, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/artworks\/${encodeURI(name)}?word=${encodeURI(name)}&order=date_d&mode=all&p=${page}&s_mode=s_tc&type=all&lang=zh`\n}\nfunction urlSearchIllust(name, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/artworks\/${encodeURI(name)}?word=${encodeURI(name)}&order=date_d&mode=all&p=${page}&s_mode=s_tc&type=illust&lang=zh`\n}\nfunction urlSearchManga(name, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/artworks\/${encodeURI(name)}?word=${encodeURI(name)}&order=date_d&mode=all&p=${page}&s_mode=s_tc&type=manga&lang=zh`\n}\nfunction urlSearchUgoira(name, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/artworks\/${encodeURI(name)}?word=${encodeURI(name)}&order=date_d&mode=all&p=${page}&s_mode=s_tc&type=ugoira&lang=zh`\n}\n\/\/ \u5b8c\u5168\u5339\u914d\u7528\u6237\u540d\nfunction urlSearchUser(name) {\n    return `https:\/\/www.pixiv.net\/search\/users?nick=${encodeURI(name)}&s_mode=s_usr&nick_mf=1`\n}\n\nfunction urlCoverUrl(url) {\n    return `${url}, {\"headers\": {\"Referer\":\"https:\/\/www.pixiv.net\/\"}}`\n}\n\nfunction dateFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let Y = time.getFullYear() + \"\u5e74\";\n    let M = addZero(time.getMonth() + 1) + \"\u6708\";\n    let D = addZero(time.getDate()) + \"\u65e5\";\n    return Y + M + D;\n}\nfunction timeTextFormat(text) {\n    return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n}\nfunction sleep(time) {\n    let endTime = new Date().getTime() + time\n    while(true){\n        if (new Date().getTime() > endTime){\n            return;\n        }\n    }\n}\nfunction sleepToast(text, second) {\n    const {java} = this\n    java.log(text)\n    java.longToast(text)\n    if (second === undefined || second <= 2) {second = 2}\n    sleep(1000*second)\n}","lastUpdateTime":"1752822919187","loginCheckJs":"var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction publicFunc() {\n    let u = {}, settings = {}\n    \/\/ \u8f93\u51fa\u4e66\u6e90\u4fe1\u606f\n    java.log(`${source.bookSourceComment.split(\"\\n\")[0]}`)\n    java.log(`\ud83d\udccc ${source.bookSourceComment.split(\"\\n\")[2]}`)\n    java.log(`\ud83d\udcc6 \u66f4\u65b0\u65f6\u95f4\uff1a${timeFormat(source.lastUpdateTime)}`)\n\n    settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    if (settings !== null) {\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u81ea\u5b9a\u4e49\u8bbe\u7f6e\")\n    } else {\n        settings = {}\n        settings.CONVERT_CHINESE = true     \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\n        settings.SEARCH_ILLUSTS = false     \/\/ \u641c\u7d22\u63d2\u753b\n        settings.SHOW_ORIGINAL_LINK = true  \/\/ \u76ee\u5f55\u5904\u663e\u793a\u6e90\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u8bf7\u6c42\u6b21\u6570\n        settings.DEBUG = false              \/\/ \u8c03\u8bd5\u6a21\u5f0f\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\uff08\u65e0\u81ea\u5b9a\u4e49\u8bbe\u7f6e \u6216 \u81ea\u5b9a\u4e49\u8bbe\u7f6e\u6709\u8bef\uff09\")\n    }\n    u.CONVERT_CHINESE = settings.CONVERT_CHINESE\n    u.SEARCH_ILLUSTS = settings.SEARCH_ILLUSTS\n    u.SHOW_ORIGINAL_LINK = settings.SHOW_ORIGINAL_LINK\n    u.DEBUG = settings.DEBUG\n\n    u.debugFunc = (func) => {\n        if (util.DEBUG === true) {\n            func()\n        }\n    }\n\n    u.handIllusts = function (illusts) {\n        illusts.forEach(illust => {\n            \/\/ illust.id = illust.id\n            \/\/ illust.title = illust.title\n            \/\/ illust.userName = illust.userName\n            \/\/ illust.tags = illust.tags\n            if (!(illust.tags instanceof Array)) {\n                illust.tags = illust.tags.tags.map(item => item.tag)\n                illust.coverUrl = illust.url = illust.urls.regular  \/\/ \u517c\u5bb9\u6b63\u6587\u641c\u7d22\n                illust.updateDate = illust.uploadDate\n            }\n            illust.textCount = null\n            \/\/ illust.pageCount = illust.pageCount\n            \/\/ illust.description = illust.description\n            illust.coverUrl = illust.url\n            illust.detailedUrl = urlIllustDetailed(illust.id)\n            \/\/ illust.createDate = illust.createDate\n            \/\/ illust.updateDate = illust.updateDate\n            \/\/ illust.aiType = illust.aiType\n\n            if (illust.seriesNavData === undefined || illust.seriesNavData === null) {\n                illust.latestChapter = illust.title\n            } else {\n                illust.seriesId = illust.seriesNavData.seriesId\n                illust.title = illust.seriesNavData.title\n            }\n\n            if (illust.seriesId !== undefined) {\n                let resp = getAjaxJson(urlSeriesDetailed(illust.seriesId)).body\n                let series = resp.illustSeries.filter(item => item.id === illust.seriesId)[0]\n                \/\/ illust.title = illust.title\n                illust.tags = illust.tags.concat(series.tags)\n                illust.latestChapter = resp.thumbnails.illust.filter(item => item.id === series.latestIllustId)[0].title\n                illust.description = series.description\n                if (series.url === undefined) {\n                    let firstChapter = getAjaxJson(urlIllustDetailed(series.firstIllustId)).body\n                    illust.coverUrl = firstChapter.urls.regular\n                    illust.tags = illust.tags.concat(firstChapter.tags.tags.map(item => item.tag))\n                }\n                illust.createDate = series.createDate\n                illust.updateDate = series.updateDate\n                illust.total = series.total\n            }\n        })\n        return illusts\n    }\n\n    u.formatIllusts = function (illusts) {\n        illusts.forEach(illust => {\n            illust.title = illust.title.replace(RegExp(\/^\\s+|\\s+$\/g), \"\")\n            illust.tags = Array.from(new Set(illust.tags))\n            illust.tags = illust.tags.join(\",\")\n            illust.coverUrl = urlCoverUrl(illust.coverUrl)\n            illust.createDate = dateFormat(illust.createDate)\n            illust.updateDate = dateFormat(illust.updateDate)\n            if (util.MORE_INFORMATION) {\n                illust.description = `\\n\u4e66\u540d\uff1a${illust.title}\\n\u4f5c\u8005\uff1a${illust.userName}\\n\u6807\u7b7e\uff1a${illust.tags}\\n\u9875\u9762\uff1a${illust.pageCount}\\n\u4e0a\u4f20\uff1a${illust.createDate}\\n\u66f4\u65b0\uff1a${illust.updateDate}\\n\u7b80\u4ecb\uff1a${illust.description}`\n            } else {\n                illust.description = `\\n${illust.title}\uff0c\u5171${illust.pageCount}\u9875\\n${illust.description}\\n\u4e0a\u4f20\u65f6\u95f4\uff1a${illust.createDate}\\n\u66f4\u65b0\u65f6\u95f4\uff1a${illust.updateDate}`\n            }\n        })\n        return illusts\n    }\n\n    u.vote = function (id, to, dt) {\n        id = id || 25245136; let k = 'vote_' + id;\n        if (Date.now() > (+dt || 1754e9) || +String(cache.get(k)) > 0) return;\n        let b = `https:\/\/www.pixiv.net\/ajax\/novel\/${id}`,\n            t = _ => Date.parse(new Date().toLocaleDateString()) + 828e5 - Date.now(),\n            f = _ => cache.put(k, '1', Math.min(3600, t() \/ 1e3 | 0)) & java.ajax(b);\n        try {\n            java.post(b + '\/poll\/answer', `{\"choice_id\":${to || 2}}`, {\n                'x-csrf-token': cache.get('csfrToken') || this.getCsrfToken(),\n                'Cookie': cache.get(\"pixivCookie\") || this.getCookie(),\n                'Content-Type': 'application\/json'\n            }).statusCode() === 200 && f();\n        } catch (e) {\n            String(e).includes('403') && f();\n        }\n    }\n\n    u.getIllustRes = function (result) {\n        let illustId = 0, res = {}\n        let isJson = isJsonString(result)\n        let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n        if (!isJson && isHtml) {\n            let pattern1 = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/(artworks|ajax\/illust)\/(\\\\d+)\"\n            let isIllust = baseUrl.match(new RegExp(pattern1))\n            let pattern2 = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/(user\/\\\\d+|ajax)\/series\/(\\\\d+)\"\n            let isSeries = baseUrl.match(new RegExp(pattern2))\n\n            if (isIllust) {\n                illustId = isIllust[4]\n            } else if (isSeries) {\n                seriesId = isSeries[4]\n                java.log(`\u5339\u914d\u7cfb\u5217ID\uff1a${seriesId}`)\n                illustId = getAjaxJson(urlSeriesDetailed(seriesId)).body.page.series.reverse()[0].workId\n            }\n        }\n        if (isJson) {\n            res = JSON.parse(result)\n        }\n\n        if (illustId) {\n            java.log(`\u5339\u914d\u63d2\u753bID\uff1a${illustId}`)\n            res = getAjaxJson(urlIllustDetailed(illustId))\n        }\n        if (res.error) {\n            java.log(`\u65e0\u6cd5\u4ece Pixiv \u83b7\u53d6\u5f53\u524d\u6f2b\u753b`)\n            java.log(JSON.stringify(res))\n            return []\n        }\n        return res.body\n    }\n  \n    util = u\n    isLogin() && util.vote()\n    java.put(\"util\", objStringify(u))\n}\n\nfunction getCsrfToken() {\n    let csfrToken\n    let html = java.webView(null, \"https:\/\/www.pixiv.net\/\", null)\n    try {\n        csfrToken = html.match(\/token\\\\\":\\\\\"([a-z0-9]{32})\/)[1]\n    } catch (e) {\n        csfrToken = null\n    }\n    \/\/ java.log(csfrToken)\n    cache.put(\"csfrToken\", csfrToken)  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n    return csfrToken\n}\n\nfunction getCookie() {\n    let pixivCookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n    if (pixivCookie.includes(\"first_visit_datetime\")) {\n        \/\/ java.log(pixivCookie)\n        cache.put(\"pixivCookie\", pixivCookie, 60*60)\n        return pixivCookie\n    } else {\n        cache.delete(\"pixivCookie\")\n        sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(pixivCookie)\")\n        return null\n    }\n}\n\n\/\/ \u83b7\u53d6\u8bf7\u6c42\u7684user id\u65b9\u4fbf\u5176\u4ed6ajax\u8bf7\u6c42\u6784\u9020\nfunction getPixivUid() {\n    let uid = java.getResponse().headers().get(\"x-userid\")\n    if (uid != null) {\n        cache.put(\"pixiv:uid\", String(uid))\n    } else {\n        cache.delete(\"pixiv:uid\")\n    }\n}\n\nfunction timeFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let YY = time.getFullYear()\n    let MM = addZero(time.getMonth() + 1)\n    let DD = addZero(time.getDate())\n    let hh = addZero(time.getHours())\n    let mm = addZero(time.getMinutes())\n    let ss = addZero(time.getSeconds())\n    return `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n}\n\npublicFunc()\nif (result.code() === 200) {\n    getPixivUid()\n}\njava.getStrResponse(null, null)","loginUrl":"https:\/\/accounts.pixiv.net\/login","respondTime":180000,"ruleBookInfo":{"author":"userName","canReName":"true","coverUrl":"coverUrl","init":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction illustHandler(illust){\n    illust = util.formatIllusts(util.handIllusts([illust]))[0]\n    illust.detailedUrl = urlIllustUrl(illust.id)\n    illust.catalogUrl = urlIllustDetailed(illust.id)\n    return illust\n}\n\n(() => {\n    try {\n        return illustHandler(util.getIllustRes(result))\n    } catch (e) {\n        java.log(e)\n        java.log(`\u53d7 Pixiv \u7684\u9650\u5236\uff0c\u65e0\u6cd5\u83b7\u53d6\u5f53\u524d\u63d2\u753b\u7684\u6570\u636e`)\n    }\n})()","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","tocUrl":"catalogUrl"},"ruleContent":{"content":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction getContent(res) {\n    let content = [\"\"]\n    \/\/ li = \"mini thumb small regular original\".split(\" \")\n    let illustLink = getAjaxJson(urlIllustDetailed(res.id)).body.urls.regular\n    for (let order = 0; order < res.pageCount; order++) {\n        content.push(`<img src=\"${illustLink}\">`)\n        illustLink = illustLink.replace(`_p${order}`, `_p${order + 1}`)\n    }\n    content = content.join(\"\\n\")\n    return content\n}\n\n(function () {\n    return getContent(util.getIllustRes(result))\n})()","imageStyle":"FULL"},"ruleExplore":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  \/\/ \u5b58\u50a8seriesID \u6709BUG\u65e0\u6cd5\u5904\u7406\u7ffb\u9875\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction handlerFactory() {\n    if (baseUrl.includes(\"https:\/\/cdn.jsdelivr.net\")) {\n        return updateSource()\n    }\n    if (!isLogin()) {\n        return handlerNoLogin()\n    }\n    if (baseUrl.includes(\"\/follow_latest\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/watch_list\")) {\n        return handlerWatchList()\n    }\n    if (baseUrl.includes(\"\/top\")) {\n        return handlerRecommend()\n    }\n    if (baseUrl.includes(\"\/discovery\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/bookmark\")) {\n        return handlerBookMarks()\n    }\n    if (baseUrl.includes(\"\/new\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/commission\/\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/user_event\/portal\")) {\n        return handlerFollowLatest()\n    }\n    \/\/ \u6b63\u5219\u5339\u914d\u7f51\u5740\u5185\u5bb9\n    if (baseUrl.includes(\"\/ranking\") && (baseUrl.endsWith(\"json\"))) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"\/ranking\")) {\n        return handlerRegexIllusts()\n    }\n    else {\n        return []\n    }\n}\n\nfunction handlerNoLogin() {\n    return () => {\n        sleepToast(\"\u6b64\u529f\u80fd\u9700\u8981\u5728\u4e66\u6e90\u767b\u5f55\u540e\u624d\u80fd\u4f7f\u7528\")\n        sleepToast('\u53d1\u73b0 - \u957f\u6309\"Pixiv\" - \u767b\u5f55 - \u767b\u5f55\u8d26\u53f7')\n        return []\n    }\n}\n\n\/\/\u5173\u6ce8\u4f5c\u8005\uff0c\u6f2b\u753b\u59d4\u6258\uff0c\u6f2b\u753b\u4f01\u5212\nfunction handlerFollowLatest() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatIllusts(util.handIllusts(res.body.thumbnails.illust))\n    }\n}\n\n\/\/ \u8ffd\u66f4\u5217\u8868\nfunction handlerWatchList() {\n    return () => {\n        let res = JSON.parse(result)\n        \/\/ li =  res.body.page.watchedSeriesIds\n        return util.formatIllusts(util.handIllusts(res.body.thumbnails.illust))\n    }\n}\n\n\/\/ \u63a8\u8350\u6f2b\u753b\nfunction handlerRecommend() {\n    return () => {\n        let res = JSON.parse(result)\n        const recommend = res.body.page.recommend\n        const illusts = res.body.thumbnails.illust\n        let nidSet = new Set(recommend.ids)\n        \/\/ java.log(nidSet.size)\n        let list = illusts.filter(illust => nidSet.has(String(illust.id)))\n        \/\/ java.log(`\u8fc7\u6ee4\u7ed3\u679c:${JSON.stringify(list)}`)\n        return util.formatIllusts(util.handIllusts(list))\n    }\n}\n\n\/\/\u53d1\u73b0\u6f2b\u753b\nfunction handlerDiscovery() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatIllusts(util.handIllusts(res.body.illusts))\n    }\n}\n\n\/\/ \u6536\u85cf\u6f2b\u753b\nfunction handlerBookMarks() {\n    return () => {\n        let res = JSON.parse(result).body.works\n        if (res === undefined || res.length === 0) {\n            \/\/\u6d41\u7a0b\u65e0\u6cd5\u672c\u73af\u8282\u4e2d\u6b62 \u53ea\u80fd\u4ea4\u7ed9\u4e0b\u4e00\u6d41\u7a0b\u5904\u7406\n            return []\n        }\n        return util.formatIllusts(util.handIllusts(res))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRanking() {\n    return () => {\n        let res = JSON.parse(result)\n        res.contents.forEach(item =>{\n            item.id = item.illust_id\n            \/\/ item.title = item.title\n            item.userName = item.user_name\n            \/\/ item.tags = item.tags\n            item.latestChapter = item.title\n            item.description = null\n            item.coverUrl = item.url\n            item.detailedUrl = urlIllustDetailed(item.id)\n            item.createDate = item.updateDate = item.illust_upload_timestamp * 1000\n\n            if (item.illust_series !== false) {\n                let series = item.illust_series\n                item.seriesId = series.illust_series_id\n                item.order = series.illust_series_content_order\n                item.total = series.illust_series_content_count\n                if (item.order === item.total) item.latestChapter = item.title\n                item.title = series.illust_series_title\n                item.description = series.illust_series_caption\n                item.pageCount = series.illust_page_count\n                item.createDate = item.updateDate = series.illust_series_create_datetime\n            }\n        })\n        return util.formatIllusts(util.handIllusts(res.contents))\n    }\n}\n\n\/\/\u9996\u9875\uff0c\u7f16\u8f91\u90e8\u63a8\u8350\uff0c\u987a\u5e8f\u968f\u673a\nfunction handlerRegexIllusts() {\n    return () => {\n        let illustIds = []  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 illustId\n        let matched = result.match(RegExp(\/\\\/artworks\\\/\\d{5,}\/gm))\n        for (let i in matched) {\n            let illustId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (illustIds.indexOf(illustId) === -1) {\n                illustIds.push(illustId)\n            }\n        }\n        let userIllusts = getWebviewJson(\n            urlIllustsDetailed(`${cache.get(\"pixiv:uid\")}`, illustIds), html => {\n                return (html.match(new RegExp(\">\\\\{.*?}<\"))[0].replace(\">\", \"\").replace(\"<\", \"\"))\n            }).body\n        return util.formatIllusts(util.handIllusts(Object.values(userIllusts)))\n    }\n}\n\n(() => {\n    return handlerFactory()()\n})()","bookUrl":"detailedUrl","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title"},"ruleSearch":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction getManga() {\n    if (JSON.parse(result).error === true) {\n        return []\n    }\n    let illusts = JSON.parse(result).body.illustManga.data\n    illusts.forEach(illust => {illust.tags.unshift(\"\u6f2b\u753b\")})\n    return illusts\n}\n\nfunction getConvertManga() {\n    let MAXPAGES = 2, illusts = []\n    let novelName = String(java.get(\"key\"))\n    let name = java.s2t(java.t2s(java.s2t(novelName)))\n    let resp = getAjaxJson(urlSearchManga(name, 1)).body\n    java.log(urlSearchManga(name, 1))\n    illusts = illusts.concat(resp.illustManga.data)\n    \/\/ for (let page = 2; page < resp.lastPage, page < MAXPAGES; page++) {\n    \/\/     illusts = illusts.concat(getAjaxJson(urlSearchManga(name, page)).body.illustManga.data)\n    \/\/     java.log(urlSearchManga(name, page))\n    \/\/ }\n    illusts.forEach(illust => {illust.tags.unshift(\"\u6f2b\u753b\")})\n    return illusts\n}\n\nfunction getIllust() {\n    let MAXPAGES = 3, illusts = []\n    let name = String(java.get(\"key\"))\n    java.log(urlSearchIllust(name, 1))\n    let resp = getAjaxJson(urlSearchIllust(name, 1))\n    if (resp.error === true) {\n        return []\n    }\n    illusts = illusts.concat(resp.body.illustManga.data)\n    for (let page = Number(java.get(\"page\")) + 1; page < resp.body.illustManga.lastPage, page < MAXPAGES; page++) {\n        java.log(`\u6b63\u5728\u641c\u7d22\u7b2c${page}\u9875`)\n        let resp = getAjaxJson(urlSearchIllust(name, page))\n        if (resp.error === true) {\n            return []\n        }\n        illusts = illusts.concat(resp.body.illustManga.data)\n    }\n    illusts.forEach(illust => {illust.tags.unshift(\"\u63d2\u753b\")})\n    return illusts\n}\n\n(() => {\n    let artworks = []\n    artworks = artworks.concat(getManga())\n    if (util.CONVERT_CHINESE_CHARACTERS) artworks = artworks.concat(getConvertManga())\n    if (util.SEARCH_ILLUSTS) artworks = artworks.concat(getIllust())\n    \/\/ java.log(JSON.stringify(artworks))\n    \/\/ \u8fd4\u56de\u7a7a\u5217\u8868\u4e2d\u6b62\u6d41\u7a0b\n    if (artworks.length === 0) {\n        return []\n    }\n    return util.formatIllusts(util.handIllusts(artworks))\n})()","bookUrl":"detailedUrl","checkKeyWord":"\u6d4b\u8bd5","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title"},"ruleToc":{"chapterList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction urlIllust(novelId){\n    if (util.SHOW_ORIGINAL_ILLUST_LINK) {\n        return urlIllustUrl(novelId)\n    } else {\n        return urlIllustDetailed(novelId)\n    }\n}\n\nfunction oneShotHandler(res) {\n    return [{\n        title: res.title.replace(RegExp(\/^\\s+|\\s+$\/g), \"\"),\n        chapterUrl: urlIllust(res.id),\n        chapterInfo: `${timeTextFormat(res.createDate)}`\n    }]\n}\n\nfunction seriesHandler(res) {\n    \/\/ todo\uff1a\u6f2b\u753b\u76ee\u5f55\u7ffb\u9875\n    let limit = 12, total = 0, illusts = []\n    let seriesId = res.seriesNavData.seriesId\n    if (res.seriesId === undefined) {\n        total = getAjaxJson(urlSeriesDetailed(res.seriesNavData.seriesId)).body.page.total\n    } else {\n        total = res.total\n    }\n    util.debugFunc(() => {\n        java.log(`\u672c\u7cfb\u5217 ${seriesId} \u4e00\u5171\u6709${total}\u7ae0`);\n    })\n\n    \/\/\u8981\u722c\u53d6\u7684\u603b\u6b21\u6570\n    let max = (total \/ limit) + 1\n    for (let page = 1; page < max; page++) {\n        \/\/ java.log(urlSeriesDetailed(seriesId, page))\n        res = getAjaxJson(urlSeriesDetailed(seriesId, page)).body\n        let illusts_id = res.page.series.map(item => item.workId)\n        illusts = illusts.concat(res.thumbnails.illust.filter(illust => illusts_id.includes(illust.id)))\n    }\n    illusts.reverse().forEach(illust => {\n        illust.title = illust.title.replace(RegExp(\/^\\s+|\\s+$\/g), \"\")\n        illust.chapterUrl = urlIllust(illust.id)\n        illust.chapterInfo = timeTextFormat(illust.createDate)\n    })\n    \/\/ java.log(JSON.stringify(illusts))\n    return illusts\n}\n\n(() => {\n    let res = util.getIllustRes(result)\n    if (res.seriesNavData !== null) {\n        return seriesHandler(res)\n    } else {\n        return oneShotHandler(res)\n    }\n})()","chapterName":"title","chapterUrl":"chapterUrl","updateTime":"chapterInfo"},"searchUrl":"@js:\njava.put(\"key\",key)\njava.put(\"page\",page)\nurlSearchManga(key, page)","variableComment":"\u2699\ufe0f \u81ea\u5b9a\u4e49\u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u2699\ufe0f \u81ea\u5b9a\u4e49\u8bbe\u7f6e\uff1a\u8bf7\u5728\u57fa\u672c-\u53d8\u91cf\u8bf4\u660e\u5904\u4fee\u6539\u4ee3\u7801\n\u2699\ufe0f \u81ea\u5b9a\u4e49\u8bbe\u7f6e\uff1a\u5c06 true \u6539\u4e3a false\uff0c\u6216\u76f8\u53cd\n\u26a0\ufe0f \u8bbe\u7f6e\u6e90\u53d8\u91cf\u3010\u65e0\u6cd5\u3011\u66f4\u6539\u4e66\u6e90\u81ea\u5b9a\u4e49\u8bbe\u7f6e\n\u26a0\ufe0f \u6ce8\u610f\u4e0d\u8981\u6dfb\u52a0\u6216\u5220\u9664\u5c3e\u968f\u9017\u53f7\",\"\n\u26a0\ufe0f \u53d1\u73b0\u9875\u9700\u8981\u957f\u6309\"Pixiv\"\uff0c\u624b\u52a8\u5237\u65b0\n\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u4e66\u6e90\u8bbe\u7f6e\uff1a\n{\n\"CONVERT_CHINESE_CHARACTERS\": true,\n\"SEARCH_ILLUSTS\": false,\n\"SHOW_GENERAL_ILLUST_NEW\": false,\n\"SHOW_GENERAL_ILLUST_RANK\": false,\n\"SHOW_ORIGINAL_ILLUST_LINK\": true,\n\"DEBUG\": false\n}\n\n\/\/ CONVERT_CHINESE_CHARACTERS\n\/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\n\/\/ SEARCH_ILLUSTS\n\/\/ \u641c\u7d22\uff1a\u540c\u65f6\u641c\u7d22\u63d2\u753b\n\/\/ SHOW_GENERAL_ILLUST_NEW\n\/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u6f2b\u753b\n\/\/ SHOW_GENERAL_ILLUST_RANK\n\/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u6f2b\u753b\n\/\/ SHOW_ORIGINAL_ILLUST_LINK\n\/\/ \u76ee\u5f55\uff1a\u663e\u793a\u6e90\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u8bf7\u6c42\u6b21\u6570\n\/\/ DEBUG\n\/\/ \u8c03\u8bd5\u6a21\u5f0f\n\n","weight":0},{"bookSourceComment":"Pixiv \u5c0f\u8bf4\uff08\u66f4\u65b0\ud83d\udcc6\uff1a2025-07-12\uff09\n\n\u4e66\u6e90\u7248\u672c\uff1a2.2.3\n\u4f7f\u7528\u8bf4\u660e\uff1a\ud83d\udccc\u9605\u8bfb\u7248\u672c 3.25.0527 \u53ca\u4e4b\u540e\u7248\u672c\u53ef\u7528\n\u53ef\u7528\u529f\u80fd\uff1a\u2705\u641c\u7d22\u2705\u53d1\u73b0\u2705\u6dfb\u52a0\u7f51\u5740\u2705\u8ba2\u9605\u6e90\n\u641c\u7d22\u5c0f\u8bf4\uff1a\u2705\u5355\u7bc7\u2705\u7cfb\u5217\u2705\u6807\u7b7e\u2705\u4f5c\u8005\n\u53d1\u73b0\u5c0f\u8bf4\uff1a\u2705\u5173\u6ce8\u2705\u8ffd\u66f4\u2705\u63a8\u8350\u2705\u53d1\u73b0\n\u53d1\u73b0\u5c0f\u8bf4\uff1a\u2705\u6536\u85cf\u2705\u4e66\u7b7e\u2705\u9996\u9875\u2705\u6392\u884c\n\u6dfb\u52a0\u7f51\u5740\uff1a\u2705Pixiv\u5c0f\u8bf4\u94fe\u63a5\u2705Pixiv\u7cfb\u5217\u94fe\u63a5\n\u8ba2\u9605\u7528\u6cd5\uff1a\u70b9\u51fb\u8ba2\u9605\u6e90\u6253\u5f00\u5c0f\u8bf4\/\u7cfb\u5217\u5c0f\u8bf4\uff0c\u3010\u5237\u65b0\u3011\uff0c\u70b9\u51fb\u3010\u52a0\u5165\u4e66\u67b6\u3011\u6309\u94ae\uff0c\u6dfb\u52a0\u5230\u4e66\u67b6\n\n\u4e66\u6e90\u53d1\u5e03\uff1a\u517d\u4eba\u9605\u8bfb\u9891\u9053 https:\/\/t.me\/FurryReading\n\u9879\u76ee\u5730\u5740\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\n\u4f7f\u7528\u6559\u7a0b\uff1ahttps:\/\/github.com\/windyhusky\/PixivSource\/blob\/main\/doc\/Pixiv.md\n\n\u89c4\u5219\u8ba2\u9605\uff1aimport \u8ba2\u9605\u6e90\nhttps:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/import.json\nhttps:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/import.json\n\n\u2699\ufe0f \u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u8bbe\u7f6e1\ufe0f\u20e3\uff1a\u6253\u5f00\u5c0f\u8bf4 - \u83dc\u5355 - \u767b\u5f55 - \u70b9\u51fb\u4e0b\u65b9\u6309\u94ae\n\u8bbe\u7f6e2\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u57fa\u672c - \u53d8\u91cf\u8bf4\u660e - \u4fee\u6539\u5e76\u4fdd\u5b58\n\n\ud83d\udeab \u5c4f\u853d\u4f5c\u8005(\u672c\u5730)\uff1a\n\u8bbe\u7f6e\u65b9\u6cd51\ufe0f\u20e3\uff1a\u6253\u5f00\u5c0f\u8bf4 - \u83dc\u5355 - \u767b\u5f55 - \ud83d\udeab \u5c4f\u853d\u4f5c\u8005\n\u8bbe\u7f6e\u65b9\u6cd52\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u3010\u82f1\u6587\u9017\u53f7\u3011\u95f4\u9694\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u5c4f\u853d\u4f5c\u8005\u6570\u636e\n\n\u2764\ufe0f \u67e5\u770b\u4ed6\u4eba\u6536\u85cf\uff1a\n1\ufe0f\u20e3\u8ba2\u9605 - \u957f\u6309\u8ba2\u9605\u6e90\" - \u7f16\u8f91 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf\n2\ufe0f\u20e3\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u4e00\u884c\u4e00\u4e2a\uff0c\u4fdd\u5b58\n3\ufe0f\u20e3\u5bfc\u5165\uff1a\u6253\u5f00\u8ba2\u9605\u6e90 - \u83dc\u5355 - \u767b\u5f55 - \u2764\ufe0f \u4ed6\u4eba\u6536\u85cf\n4\ufe0f\u20e3\u66f4\u65b0\uff1a\u53d1\u73b0 - \u957f\u6309\"Pixiv\" - \u5237\u65b0 - \u67e5\u770b\u4ed6\u4eba\u6536\u85cf","bookSourceGroup":"\ud83d\udd1e Pixiv","bookSourceName":"\ud83d\udd1e Pixiv \u5c0f\u8bf4","bookSourceType":0,"bookSourceUrl":"https:\/\/www.pixiv.net\/novel\/","bookUrlPattern":"(https?:\/\/)?(www\\.)?pixiv\\.net(\/ajax)?\/novel\/(show\\.php\\?id=|series\/)?\\d+","concurrentRate":"180\/60000","customOrder":4,"enabled":true,"enabledCookieJar":false,"enabledExplore":true,"exploreUrl":"@js:\nlet SHOW_R18_GENRE, SHOW_GENERAL_NEW, SHOW_GENERAL_RANK, SHOW_GENERAL_GENRE\ntry {\n    settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    SHOW_R18_GENRE = settings.SHOW_R18_GENRE         \/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793aR18\u5c0f\u8bf4\n    SHOW_GENERAL_NEW = settings.SHOW_GENERAL_NEW     \/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n    SHOW_GENERAL_RANK = settings.SHOW_GENERAL_RANK   \/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n    SHOW_GENERAL_GENRE = settings.SHOW_GENERAL_GENRE \/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n} catch (e) {\n    SHOW_R18_GENRE = false\n    SHOW_GENERAL_NEW = false\n    SHOW_GENERAL_RANK = false\n    SHOW_GENERAL_GENRE = false\n}\n\nli = [\n    {\"\u2b50\ufe0f \u5173\u6ce8\": \"https:\/\/www.pixiv.net\/ajax\/follow_latest\/novel?p={{page}}&mode=r18&lang=zh\"},\n    {\"\ud83d\udcc3 \u8ffd\u66f4\": \"https:\/\/www.pixiv.net\/ajax\/watch_list\/novel?p={{page}}&new=1&lang=zh\"},\n    {\"\ud83d\udcaf \u63a8\u8350\": \"https:\/\/www.pixiv.net\/ajax\/top\/novel?mode=r18&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=r18&lang=zh\"},\n    {\"\u2764\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh\"},\n    {\"\u3299\ufe0f \u6536\u85cf\": \"https:\/\/www.pixiv.net\/ajax\/user\/{{cache.get(\\\"pixiv:uid\\\")}}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=hide&lang=zh\"},\n    {\"\ud83c\udff7\ufe0f \u4e66\u7b7e\": \"https:\/\/www.pixiv.net\/novel\/marker_all.php\"},\n    {\"\ud83c\udfe0 \u9996\u9875\": \"https:\/\/www.pixiv.net\"},\n]\n\nnormal = [\n    {\"\u2705 \u5e38\u89c4 \u5c0f\u8bf4 \u63a8\u8350 \u2705\": \"\"},\n    {\"\u2b50\ufe0f \u5173\u6ce8\": \"https:\/\/www.pixiv.net\/ajax\/follow_latest\/novel?p={{page}}&mode=all&lang=zh\"},\n    {\"\ud83d\udcaf \u63a8\u8350\": \"https:\/\/www.pixiv.net\/ajax\/top\/novel?mode=all&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=safe&lang=zh\"},\n    {\"\ud83c\udd99 \u66f4\u65b0\": \"https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/pixiv.json\"},\n]\n\nr18New = [\n    {\"\ud83c\udd95 \u6700\u65b0 \u4f01\u5212 \u7ea6\u7a3f \ud83d\udcb0\": \"\"},\n    {\"\ud83c\udd95 \u6700\u65b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/new?lastId=0&limit=20&r18=true&lang=zh\"},\n    {\"\ud83d\udcd1 \u4f01\u5212\": \"https:\/\/www.pixiv.net\/ajax\/user_event\/portal\/novels?mode=r18&p={{page}}&lang=zh\"},\n    {\"\ud83d\udcb0 \u7ea6\u7a3f\": \"https:\/\/www.pixiv.net\/ajax\/commission\/page\/request\/complete\/novels?mode=r18&p={{page}}&lang=zh\"},\n    {\"\ud83d\udd0d \u53d1\u73b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/discovery?mode=all&lang=zh\"},\n]\n\ngeneralNew = [\n    {\"\u2705 \u6700\u65b0 \u4f01\u5212 \u7ea6\u7a3f \u2705\": \"\"},\n    {\"\u6700\u65b0\": \"https:\/\/www.pixiv.net\/ajax\/novel\/new?lastId=0&limit=20&r18=false&lang=zh\"},\n    {\"\u4f01\u5212\": \"https:\/\/www.pixiv.net\/ajax\/user_event\/portal\/novels?mode=all&p={{page}}&lang=zh\"},\n    {\"\u7ea6\u7a3f\": \"https:\/\/www.pixiv.net\/ajax\/commission\/page\/request\/complete\/novels?mode=all&p={{page}}&lang=zh\"},\n    {\"\u7f16\u8f91\": \"https:\/\/www.pixiv.net\/novel\/editors_picks\"},\n]\n\nr18Rank = [\n    {\"\ud83d\udc51 \u6392\u884c\u699c\u5355 \ud83d\udc51\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=daily_r18\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_r18\"},\n    {\"R18G\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=r18g\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=male_r18\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=female_r18\"}\n]\n\ngeneralRank = [\n    {\"\ud83c\udfc6 \u6392\u884c\u699c\u5355 \ud83c\udfc6\": \"\"},\n    {\"\u4eca\u65e5\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=daily\"},\n    {\"\u672c\u5468\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly\"},\n    {\"\u672c\u6708\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=monthly\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=male\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=female\"},\n    {\"\u65b0\u4eba\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=rookie\"},\n    {\"\u539f\u521b\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_original\"},\n    {\"AI\u751f\u6210\": \"https:\/\/www.pixiv.net\/novel\/ranking.php?mode=weekly_ai\"}\n]\n\nr18Genre = [\n    {\"\ud83d\udd25 \u539f\u521b\u70ed\u95e8 \ud83d\udd25\": \"\"},\n    {\"\u7537\u6027\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/male?mode=r18&lang=zh\"},\n    {\"\u5973\u6027\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/female?mode=r18&lang=zh\"},\n    {\"\u604b\u7231\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/romance?mode=r18&lang=zh\"},\n    {\"\u5f02\u4e16\u754c\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/isekai_fantasy?mode=r18&lang=zh\"},\n    {\"\u73b0\u4ee3\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/contemporary_fantasy?mode=r18&lang=zh\"},\n    {\"\u60ac\u7591\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/mystery?mode=r18&lang=zh\"},\n    {\"\u6050\u6016\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/horror?mode=r18&lang=zh\"},\n    {\"\u79d1\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/sci-fi?mode=r18&lang=zh\"},\n    {\"\u6587\u5b66\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/literature?mode=r18&lang=zh\"},\n    {\"\u60c5\u611f\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/drama?mode=r18&lang=zh\"},\n    {\"\u5386\u53f2\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/historical_pieces?mode=r18&lang=zh\"},\n    {\"\u803d\u7f8e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/bl?mode=r18&lang=zh\"},\n    {\"\u767e\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/yuri?mode=r18&lang=zh\"},\n    {\"\u6563\u6587\u00b7\u8bd7\u6b4c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/poetry?mode=r18&lang=zh\"},\n    {\"\u968f\u7b14\u00b7\u7eaa\u5b9e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/non-fiction??mode=r18&lang=zh\"},\n    {\"\u5267\u672c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/screenplays?mode=r18&lang=zh\"},\n    {\"\u8bc4\u8bba\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/reviews?mode=r18&lang=zh\"},\n    {\"\u5176\u4ed6\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/other?mode=r18&lang=zh\"}\n]\n\ngeneralgGenre = [\n    {\"\u2764\ufe0f\u200d\ud83d\udd25 \u539f\u521b\u70ed\u95e8 \u2764\ufe0f\u200d\ud83d\udd25\": \"\"},\n    {\"\u7efc\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/all?mode=safe&lang=zh\"},\n    {\"\u604b\u7231\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/romance?mode=safe&lang=zh\"},\n    {\"\u5f02\u4e16\u754c\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/isekai_fantasy?mode=safe&lang=zh\"},\n    {\"\u73b0\u4ee3\u5947\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/contemporary_fantasy?mode=safe&lang=zh\"},\n    {\"\u60ac\u7591\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/mystery?mode=safe&lang=zh\"},\n    {\"\u6050\u6016\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/horror?mode=safe&lang=zh\"},\n    {\"\u79d1\u5e7b\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/sci-fi?mode=safe&lang=zh\"},\n    {\"\u6587\u5b66\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/literature?mode=safe&lang=zh\"},\n    {\"\u60c5\u611f\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/drama?mode=safe&lang=zh\"},\n    {\"\u5386\u53f2\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/historical_pieces?mode=safe&lang=zh\"},\n    {\"\u803d\u7f8e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/bl?mode=safe&lang=zh\"},\n    {\"\u767e\u5408\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/yuri?mode=safe&lang=zh\"},\n    {\"\u6563\u6587\u00b7\u8bd7\u6b4c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/poetry?mode=safe&lang=zh\"},\n    {\"\u968f\u7b14\u00b7\u7eaa\u5b9e\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/non-fiction??mode=safe&lang=zh\"},\n    {\"\u5267\u672c\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/screenplays?mode=safe&lang=zh\"},\n    {\"\u8bc4\u8bba\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/reviews?mode=safe&lang=zh\"},\n    {\"\u5176\u4ed6\": \"https:\/\/www.pixiv.net\/ajax\/genre\/novel\/other?mode=safe&lang=zh\"}\n]\n\nbookmarks = [{\"\u2764\ufe0f \u4ed6\u4eba\u6536\u85cf \u2764\ufe0f\": \"\"}]\n\nli = li.concat(normal)\nli = li.concat(r18New)\nif (SHOW_GENERAL_NEW === true) {\n    li = li.concat(generalNew)\n}\nli = li.concat(r18Rank)\nif (SHOW_GENERAL_RANK === true) {\n    li = li.concat(generalRank)\n}\nif (SHOW_R18_GENRE === true) {\n    li = li.concat(r18Genre)\n}\nif (SHOW_GENERAL_GENRE === true) {\n    li = li.concat(generalgGenre)\n}\n\nsleepToast('\u4f7f\u7528\u6307\u5357\ud83d\udd16\\n\\n\u53d1\u73b0 - \u66f4\u65b0 - \u70b9\u51fb\"\ud83d\udd30 \u4f7f\u7528\u6307\u5357\" - \u67e5\u770b')\n\nlet isSourceRead = eval(String(cache.get(\"isSourceRead\")))\nlet isBackupSource = eval(String(cache.get(\"isBackupSource\")))\nif (!isBackupSource && !isSourceRead) {\n    let authors = JSON.parse(cache.get(\"pixivLikeAuthors\"))\n    if (authors !== null && authors.length >= 1) {\n        authors.forEach(authorId => {\n            let resp = getAjaxJson(urlUserDetailed(authorId))\n            if (resp.error !== true) {\n                let bookmark = {}\n                bookmark[resp.body.name] = `https:\/\/www.pixiv.net\/ajax\/user\/${authorId}\/novels\/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh`\n                bookmarks.push(bookmark)\n            }\n        })\n        li = li.concat(bookmarks)\n    } else {\n        sleepToast(\"\u2764\ufe0f \u4ed6\u4eba\u6536\u85cf\\n \u5237\u65b0\u53d1\u73b0\u524d\uff0c\u8bf7\u5728\u3010\u8ba2\u9605\u6e90\u3011\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff0c\u5e76\u5728\u3010\u8ba2\u9605\u6e90\u3011\u7684\u767b\u5f55\u754c\u9762\u70b9\u51fb \u2764\ufe0f \u4ed6\u4eba\u6536\u85cf \u5bfc\u5165\u6570\u636e\")\n    }\n}\n\nli.forEach(item => {\n    item.title = Object.keys(item)[0]\n    item.url = Object.values(item)[0]\n    delete item[Object.keys(item)[0]]\n    item.style = {}\n    item.style.layout_flexGrow = 1\n    item.style.layout_flexShrink = 1\n    item.style.layout_alignSelf = \"auto\"\n    item.style.layout_wrapBefore = \"false\"\n    if (item.url === \"\") {\n        item.style.layout_flexBasisPercent = 1\n    } else {\n        item.style.layout_flexBasisPercent = -1\n    }\n})\n\nJSON.stringify(li)","header":"{\"referer\":\"https:\/\/www.pixiv.net\"}","jsLib":"var checkTimes = 0\nvar cacheSaveSeconds = 7*24*60*60  \/\/ \u7f13\u5b58\u65f6\u95f47\u5929\n\n\nfunction cacheGetAndSet(cache, key, supplyFunc) {\n    let v = cache.get(key)\n    if (v === undefined || v === null) {\n        v = JSON.stringify(supplyFunc())\n        cache.put(key, v, cacheSaveSeconds)\n    }\n    return JSON.parse(v)\n}\nfunction putInCache(objectName, object, saveSeconds) {\n    const {java, cache} = this\n    if (object === undefined) object = null\n    if (saveSeconds === undefined) saveSeconds = 0\n    cache.put(objectName, JSON.stringify(object), saveSeconds)\n}\nfunction getFromCache(objectName) {\n    const {java, cache} = this\n    let object = cache.get(objectName)\n    if (object === undefined) return null  \/\/ \u517c\u5bb9\u6e90\u9605\n    return JSON.parse(object)\n}\n\nfunction isHtmlString(str) {\n    return str.startsWith(\"<!DOCTYPE html>\")\n}\nfunction isJsonString(str) {\n    try {\n        if (typeof JSON.parse(str) === \"object\") {\n            return true\n        }\n    } catch(e) {}\n    return false\n}\n\nfunction getWebViewUA() {\n    const {java, cache} = this\n    let userAgent = String(java.getWebViewUA())\n    if (userAgent.includes(\"Windows NT 10.0; Win64; x64\")) {\n        userAgent = \"Mozilla\/5.0 (Linux; Android 10; K) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Mobile Safari\/537.36\"\n    }\n    \/\/ java.log(`userAgent=${userAgent}`)\n    cache.put(\"userAgent\", userAgent)\n    return String(userAgent)\n}\nfunction isLogin() {\n    const {java, cache} = this\n    let cookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n    return cookie.includes(\"first_visit_datetime\")\n}\n\nfunction getAjaxJson(url, forceUpdate) {\n    const {java, cache} = this\n    if (forceUpdate === true) {\n        let result = JSON.parse(java.ajax(url))\n        cache.put(url, JSON.stringify(result), cacheSaveSeconds)\n        return result\n    }\n    return cacheGetAndSet(cache, url, () => {\n        return JSON.parse(java.ajax(url))\n    })\n}\nfunction getAjaxAllJson(urls, forceUpdate) {\n    const {java, cache} = this\n    if (forceUpdate === true) {\n        let result = java.ajaxAll(urls).map(resp => JSON.parse(resp.body()))\n        cache.put(urls, JSON.stringify(result), cacheSaveSeconds)\n        for (let i in urls) cache.put(urls[i], JSON.stringify(result[i]), cacheSaveSeconds)\n        return result\n    }\n    return cacheGetAndSet(cache, urls, () => {\n        let result = java.ajaxAll(urls).map(resp => JSON.parse(resp.body()))\n        cache.put(urls, JSON.stringify(result), cacheSaveSeconds)\n        for (let i in urls) cache.put(urls[i], JSON.stringify(result[i]), cacheSaveSeconds)\n        return result\n    })\n}\nfunction getWebviewJson(url, parseFunc) {\n    const {java, cache} = this\n    return cacheGetAndSet(cache, url, () => {\n        let html = java.webView(null, url, null)\n        return JSON.parse(parseFunc(html))\n    })\n}\n\nfunction urlNovelUrl(novelId) {\n    return `https:\/\/www.pixiv.net\/novel\/show.php?id=${novelId}`\n}\nfunction urlNovelDetailed(novelId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/${novelId}`\n}\nfunction urlNovelsDetailed(userId, nidList) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\nfunction urlNovelBookmarkData(novelId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/${novelId}\/bookmarkData`\n}\nfunction urlNovelComments(novelId, offset, limit) {\n    return `https:\/\/www.pixiv.net\/ajax\/novels\/comments\/roots?novel_id=${novelId}&offset=${offset}&limit=${limit}&lang=zh`\n}\nfunction urlNovelCommentsReply(commentId, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/novels\/comments\/replies?comment_id=${commentId}&page=${page}&lang=zh`\n}\n\nfunction urlSeriesUrl(seriesId) {\n    return `https:\/\/www.pixiv.net\/novel\/series\/${seriesId}`\n}\nfunction urlSeriesDetailed(seriesId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${seriesId}?lang=zh`\n}\nfunction urlSeriesNovelsTitles(seriesId) {\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${seriesId}\/content_titles`\n}\nfunction urlSeriesNovels(seriesId, limit, offset) {\n    if (limit > 30) limit = 30\n    if (limit < 10) limit = 10\n    return `https:\/\/www.pixiv.net\/ajax\/novel\/series_content\/${seriesId}?limit=${limit}&last_order=${offset}&order_by=asc&lang=zh`\n}\n\nfunction urlUserUrl(userID) {\n    return `https:\/\/www.pixiv.net\/users\/${userID}\/novels`\n}\nfunction urlUserDetailed(userID) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userID}`\n}\nfunction urlUserWorkLatest(userID) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userID}\/works\/latest`\n}\nfunction urlUserAllWorks(userId) {\n    return `https:\/\/www.pixiv.net\/ajax\/user\/${userId}\/profile\/all?lang=zh`\n}\n\nfunction urlSearchNovel(novelName, page) {\n    return `https:\/\/www.pixiv.net\/ajax\/search\/novels\/${encodeURI(novelName)}?word=${encodeURI(novelName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`\n}\nfunction urlSearchSeries(seriesName, page) {\n    return`https:\/\/www.pixiv.net\/ajax\/search\/novels\/${encodeURI(seriesName)}?word=${encodeURI(seriesName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&gs=1&lang=zh`\n}\n\/\/ \u4e0d\u5b8c\u5168\u5339\u914d\u7528\u6237\u540d\nfunction urlSearchUser(userName, full) {\n    if (full === undefined || full === false) {\n        return `https:\/\/www.pixiv.net\/search\/users?nick=${userName}&s_mode=s_usr&nick_mf=1`\n    } else {\n        return `https:\/\/www.pixiv.net\/search\/users?nick=${userName}&s_mode=s_usr_full&i=1`\n    }\n}\n\nfunction urlCoverUrl(url) {\n    return `${url}, {\"headers\": {\"Referer\":\"https:\/\/www.pixiv.net\/\"}}`\n}\nfunction urlIllustDetailed(illustId) {\n    return `https:\/\/www.pixiv.net\/ajax\/illust\/${illustId}?lang=zh`\n}\nfunction urlIllustOriginal(illustId, order) {\n    const {java, cache} = this\n    if (order <= 1) order = 1\n    let url = urlIllustDetailed(illustId)\n    let illustOriginal = cacheGetAndSet(cache, url, () => {\n        return JSON.parse(java.ajax(url))\n    }).body.urls.original\n    return urlCoverUrl(illustOriginal.replace(`_p0`, `_p${order - 1}`))\n}\nfunction urlEmojiUrl(emojiId) {\n    return urlCoverUrl(`https:\/\/s.pximg.net\/common\/images\/emoji\/${emojiId}.png`)\n}\nfunction urlStampUrl(stampId) {\n    return urlCoverUrl(`https:\/\/s.pximg.net\/common\/images\/stamp\/generated-stamps\/${stampId}_s.jpg`)\n}\n\nfunction urlMessageThreadLatest(max) {\n    if (max === undefined || max <= 5) max = 5\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=latest_message_threads2&num=${max}&lang=zh`\n}\nfunction urlMessageThreadContents(threadId, max) {\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=message_thread_contents&thread_id=${threadId}&num=${max}`\n}\nfunction urlMessageThreadDetail(threadId) {\n    return `https:\/\/www.pixiv.net\/rpc\/index.php?mode=message_thread&thread_id=${threadId}`\n}\nfunction urlNotification() {\n    return `https:\/\/www.pixiv.net\/ajax\/notification&lang=zh`\n}\n\nfunction dateFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let Y = time.getFullYear() + \"\u5e74\";\n    let M = addZero(time.getMonth() + 1) + \"\u6708\";\n    let D = addZero(time.getDate()) + \"\u65e5\";\n    return Y + M + D;\n}\nfunction timeFormat(str) {\n    let addZero = function (num) {\n        return num < 10 ? '0' + num : num;\n    }\n    let time = new Date(str);\n    let YY = time.getFullYear()\n    let MM = addZero(time.getMonth() + 1)\n    let DD = addZero(time.getDate())\n    let hh = addZero(time.getHours())\n    let mm = addZero(time.getMinutes())\n    let ss = addZero(time.getSeconds())\n    return `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n}\nfunction timeTextFormat(text) {\n    return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n}\nfunction sleep(time) {\n    let endTime = new Date().getTime() + time\n    while(true){\n        if (new Date().getTime() > endTime){\n            return;\n        }\n    }\n}\nfunction sleepToast(text, second) {\n    const {java} = this\n    java.log(text)\n    java.longToast(text)\n    if (second === undefined) second = 0.01\n    sleep(1000*second)\n}\n\nfunction updateSource() {\n    const { java, source } = this\n    java.longToast(\"\ud83c\udd99 \u66f4\u65b0\u4e66\u6e90\\n\\nJsdelivr CDN \u66f4\u65b0\u6709\u5ef6\u8fdf\\nGithub \u66f4\u65b0\u9700\u4ee3\u7406\")\n    let onlineSource, comment, sourceName, sourceNameCapitalize, index = 0\n    if (source.bookSourceUrl.includes(\"pixiv\")) sourceName = \"pixiv\"\n    else if (source.bookSourceUrl.includes(\"furrynovel\")) sourceName = \"linpx\"\n    sourceNameCapitalize = sourceName[0].toUpperCase() + sourceName.substring(1)\n\n    if (source.bookSourceName.includes(\"\u5907\u7528\")) index = 1\n    else if (source.bookSourceName.includes(\"\u6f2b\u753b\")) index = 2\n    if (source.bookSourceUrl.includes(\"furrynovel.com\")) {\n        sourceNameCapitalize = \"FurryNovel\"\n        index = 1\n    }\n\n    try {\n        let updateUrl = `https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/${sourceName}.json`\n        onlineSource = JSON.parse(java.get(updateUrl, { 'User-Agent': 'Mozilla\/5.0 (Linux; Android 14)', 'X-Requested-With': 'XMLHttpRequest' }).body())[index]\n    } catch (e) {\n        try {\n            let updateUrl = `https:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/${sourceName}.json`\n            onlineSource = JSON.parse(java.get(updateUrl, { 'User-Agent': 'Mozilla\/5.0 (Linux; Android 14)', 'X-Requested-With': 'XMLHttpRequest' }).body())[index]\n        } catch (e) {\n            onlineSource = { lastUpdateTime: new Date().getTime(), bookSourceComment: source.bookSourceComment }\n        }\n    }\n    comment = onlineSource.bookSourceComment.split(\"\\n\")\n    \/\/ comment = source.bookSourceComment.split(\"\\n\")\n    let htm = `\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>\u66f4\u65b0 ${source.bookSourceName} \u4e66\u6e90<\/title>\n    <style> \n    table { text-align: center; margin: 0 auto; } .ann { display: flex; justify-content: center; align-items: center; height: 5vh; } \n    button { background-color: rgb(76, 175, 80); color: white; border: none; border-radius: 4px; height: 6vh; width: 30vw; overflow: hidden; } \n    button span { cursor: pointer; display: inline-block; position: relative; transition: 0.4s; } \n    button span:after { content: '>'; position: absolute; opacity: 0; top: 0; right: 30px; transition: 0.2s; } \n    button:active span { padding-right: 20px; } \n    button:active span:after { opacity: 1; right: -40px; }\n    <\/style>\n<\/head>\n\n<body>\n    <table border=\"1\" cellspacing=\"0\">\n        <th colspan=\"2\"> ${source.bookSourceName} \u4e66\u6e90 <a href=\"https:\/\/github.com\/windyhusky\/PixivSource\/blob\/main\/doc\/${sourceNameCapitalize}.md\">\ud83d\udd30 \u4f7f\u7528\u6307\u5357<\/a><\/th>\n        <tr>\n            <td>\u2601\ufe0f \u8fdc\u7a0b\u7248\u672c\uff1a${onlineSource.bookSourceComment.split(\"\\n\")[2].replace(\"\u4e66\u6e90\u7248\u672c\uff1a\", \"\")}<\/td>\n            <td>\ud83d\udcc6 \u66f4\u65b0\uff1a${timeFormat(onlineSource.lastUpdateTime)}<\/td>\n        <\/tr>\n        <tr>\n            <td>\ud83d\udce5 \u672c\u5730\u7248\u672c\uff1a${source.bookSourceComment.split(\"\\n\")[2].replace(\"\u4e66\u6e90\u7248\u672c\uff1a\", \"\")}<\/td>\n            <td>\ud83d\udcc6 \u66f4\u65b0\uff1a${timeFormat(source.lastUpdateTime)}<\/td>\n        <\/tr> \n        <tr><td colspan=\"2\" style=\"text-align: left;\">${comment.slice(3, 10).join(\"<br>\")}<\/td><\/tr>\n        <tr><td colspan=\"2\" style=\"text-align: left;\">${comment.slice(comment.length - 15, comment.length).join(\"<br>\")}<\/td><\/tr>\n    <\/table>\n    \n    <table border=\"0\" cellspacing=\"20\">\n        <th colspan=\"2\"> \u66f4\u65b0 ${source.bookSourceName} \u4e66\u6e90 <\/th>\n        <tr><td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/${sourceName}.json\">\n            <button><span>\u66f4\u65b0\u4e66\u6e90<br>(Jsdelivr CDN)<\/span><\/button>\n            <\/a><\/div><\/td>\n            \n            <td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/cdn.jsdelivr.net\/gh\/windyhusky\/PixivSource@main\/btsrk.json\">\n            <button><span>\u66f4\u65b0\u8ba2\u9605<br>(Jsdelivr CDN)<\/span><\/button>\n            <\/a><\/div><\/td>\n        <\/tr>\n        \n        <tr><td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/${sourceName}.json\">\n            <button><span>\u4e66\u6e90\u94fe\u63a5<br>(GitHub)<\/span><\/button>\n            <\/a><\/div><\/td>\n            \n            <td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/raw.githubusercontent.com\/windyhusky\/PixivSource\/main\/btsrk.json\">\n            <button><span>\u8ba2\u9605\u94fe\u63a5<br>(GitHub)<\/span><\/button>\n            <\/a><\/div><\/td>\n        <\/tr>\n        \n        <tr><td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/codeberg.org\/DowneyRem\/PixivSource\/raw\/branch\/main\/${sourceName}.json\">\n            <button><span>\u5907\u7528\u4e66\u6e90\u94fe\u63a5<br>(Codeberg)<\/span><\/button>\n            <\/a><\/div><\/td>\n            \n            <td><div class=\"ann\">\n            <a href=\"legado:\/\/import\/importonline?src=https:\/\/codeberg.org\/DowneyRem\/PixivSource\/raw\/branch\/main\/btsrk.json\">\n            <button><span>\u5907\u7528\u8ba2\u9605\u94fe\u63a5<br>(Codeberg)<\/span><\/button>\n            <\/a><\/div><\/td>\n        <\/tr>\n    <\/table>\n<\/body>\n<\/html>`;\n    java.startBrowser(`data:text\/html; charset=utf-8,` + encodeURIComponent(htm), '\u66f4\u65b0\u4e66\u6e90');\n    return []\n}","lastUpdateTime":"1752916663123","loginCheckJs":"var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\nfunction isBackupSource() {\n    let isBackupSource = source.bookSourceName.includes(\"\u5907\u7528\")\n    cache.put(\"isBackupSource\", isBackupSource)\n    return isBackupSource\n}\n\/\/ \u68c0\u6d4b \u6e90\u9605\n\/\/ \u53ef\u7528 java.ajax() \u4e0d\u53ef\u7528 java.webview() java.ajaxAll()\n\/\/ \u53ef\u7528 java.getCookie() cache.put() cache.get() \u9ed8\u8ba4\u503c\u4e3a undefined\n\/\/ \u53ef\u7528 java.startBrowser() \u4e0d\u53ef\u7528 java.startBrowserAwaitAwait\n\/\/ \u53ef\u7528 source.bookSourceName source.getVariable() source.setVariable()\u7b49\n\/\/ java.getUserAgent() java.getWebViewUA() \u76ee\u524d\u8fd4\u56de\u5185\u5bb9\u76f8\u540c\n\/\/ \u4e0d\u80fd\u8bfb\u5199\u6e90\u53d8\u91cf\nfunction isSourceRead() {\n    let isSourceReadStatus = java.getUserAgent() === java.getWebViewUA()\n    cache.put(\"isSourceRead\", isSourceReadStatus)\n    return isSourceReadStatus\n}\n\nfunction publicFunc() {\n    let u = {}, settings\n    \/\/ \u8f93\u51fa\u4e66\u6e90\u4fe1\u606f\n    java.log(`\ud83c\udd7f\ufe0f ${source.bookSourceComment.split(\"\\n\")[0]}`)\n    java.log(`\ud83d\udccc ${source.bookSourceComment.split(\"\\n\")[2]}`)\n    if (isSourceRead()) {\n        java.log(`\ud83d\udcc6 \u66f4\u65b0\u65f6\u95f4\uff1a${java.timeFormat(source.lastUpdateTime)}`)\n        java.log(\"\ud83d\udcf1 \u8f6f\u4ef6\u5e73\u53f0\uff1a\ud83c\udf4e \u6e90\u9605 SourceRead\")\n    } else {\n        java.log(`\ud83d\udcc6 \u66f4\u65b0\u65f6\u95f4\uff1a${timeFormat(source.lastUpdateTime)}`)\n        java.log(\"\ud83d\udcf1 \u8f6f\u4ef6\u5e73\u53f0\uff1a\ud83e\udd16 \u5f00\u6e90\u9605\u8bfb Leagdo\")\n    }\n\n    \/\/ \u83b7\u53d6\u8bbe\u7f6e\uff0c\u5907\u7528\u4e66\u6e90\u4f7f\u7528\u65e7\u7248\u8bbe\u7f6e\uff0c\u4e66\u6e90\u4ece\u7f13\u5b58\u83b7\u53d6\u8bbe\u7f6e\n    if (isBackupSource() || isSourceRead()) {\n        settings = JSON.parse(String(source.variableComment).match(RegExp(\/{([\\s\\S]*?)}\/gm)))\n    } else {\n        \/\/ cache.delete(\"pixivSettings\")\n        settings = getFromCache(\"pixivSettings\")\n    }\n    if (settings !== null) {\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u81ea\u5b9a\u4e49\u8bbe\u7f6e\")\n    } else {\n        settings = {}\n        settings.SEARCH_AUTHOR = true       \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n        settings.CONVERT_CHINESE = true     \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\n        settings.SHOW_LIKE_NOVELS = true    \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\n        settings.SHOW_WATCHED_SERIES = true \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u8ffd\u6574\u7cfb\u5217\u5c0f\u8bf4\n        settings.MORE_INFORMATION = false   \/\/ \u8be6\u60c5\uff1a\u4e66\u7c4d\u7b80\u4ecb\u663e\u793a\u66f4\u591a\u4fe1\u606f\n        settings.SHOW_UPDATE_TIME = true    \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u66f4\u65b0\u65f6\u95f4\uff0c\u4f46\u4f1a\u589e\u52a0\u5c11\u8bb8\u8bf7\u6c42\n        settings.SHOW_ORIGINAL_LINK = true  \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u539f\u59cb\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u5927\u91cf\u8bf7\u6c42\n        settings.REPLACE_TITLE_MARKS = true \/\/ \u6b63\u6587\uff1a\u6ce8\u97f3\u5185\u5bb9\u4e3a\u6c49\u5b57\u65f6\uff0c\u66ff\u6362\u4e3a\u4e66\u540d\u53f7\n        settings.SHOW_CAPTIONS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u9996\u663e\u793a\u63cf\u8ff0\n        settings.SHOW_COMMENTS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u5c3e\u663e\u793a\u8bc4\u8bba\n        settings.FAST  = false              \/\/ \u5168\u5c40\uff1a\u5feb\u901f\u6a21\u5f0f\n        settings.DEBUG = false              \/\/ \u5168\u5c40\uff1a\u8c03\u8bd5\u6a21\u5f0f\n        java.log(\"\u2699\ufe0f \u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\uff08\u65e0\u81ea\u5b9a\u4e49\u8bbe\u7f6e \u6216 \u81ea\u5b9a\u4e49\u8bbe\u7f6e\u6709\u8bef\uff09\")\n    }\n    if (settings.FAST === true) {\n        settings.SEARCH_AUTHOR = false        \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n        settings.CONVERT_CHINESE = false      \/\/ \u641c\u7d22\uff1a\u7e41\u7b80\u901a\u641c\n        settings.SHOW_UPDATE_TIME = false     \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u66f4\u65b0\u65f6\u95f4\n        settings.SHOW_ORIGINAL_LINK = false   \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u6e90\u94fe\u63a5\n        settings.SHOW_COMMENTS = false        \/\/ \u6b63\u6587\uff1a\u663e\u793a\u8bc4\u8bba\n    } else {\n        settings.SEARCH_AUTHOR = true        \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n    }\n    settings.IS_LEGADO = !isSourceRead()\n    settings.IS_SOURCE_READ = isSourceRead()\n    settings.IS_BACKUP_SOURCE = isBackupSource()\n    u.settings = settings\n    putInCache(\"pixivSettings\", settings)  \/\/ \u8bbe\u7f6e\u5199\u5165\u7f13\u5b58\n\n    u.debugFunc = (func) => {\n        if (util.settings.DEBUG === true) {\n            func()\n        }\n    }\n\n    u.checkStatus = function(status) {\n        if (status === true) return \"\u2705 \u5df2\"\n        else if (status === false) return \"\u274c \u672a\"\n        else if (status === undefined) return \"\ud83c\ude1a\ufe0f \u65e0\u6570\u636e\uff1a\"\n    }\n\n    u.login = function() {\n        let resp = java.startBrowserAwait(`https:\/\/accounts.pixiv.net\/login,\n    {\"headers\": {\"User-Agent\": \"${java.getWebViewUA()}\"}}`, '\u767b\u5f55\u8d26\u53f7', false)\n        if (resp.code() === 200) {\n            this.getCookie(); this.getCsrfToken()\n        } else {\n            java.log(resp.code()); sleepToast(\"\u26a0\ufe0f \u767b\u5f55\u5931\u8d25\")\n        }\n    }\n\n    u.logout = function() {\n        this.removeCookie()\n        java.startBrowser(\"https:\/\/www.pixiv.net\/logout.php\", \"\u9000\u51fa\u8d26\u53f7\")\n        this.removeCookie()\n        sleepToast(`\u2705 \u5df2\u9000\u51fa\u5f53\u524d\u8d26\u53f7\\n\\n\u9000\u51fa\u540e\u8bf7\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \u2714\ufe0f \u9000\u51fa\\n\\n\u767b\u5f55\u8bf7\u70b9\u51fb\u3010\u767b\u5f55\u8d26\u53f7\u3011\u8fdb\u884c\u767b\u5f55`)\n    }\n\n    u.getCookie = function() {\n        let pixivCookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n        if (pixivCookie.includes(\"first_visit_datetime\")) {\n            \/\/ java.log(typeof pixivCookie)\n            \/\/ java.log(pixivCookie)\n            cache.put(\"pixivCookie\", pixivCookie, 60*60)\n            return pixivCookie\n        } else {\n            cache.delete(\"pixivCookie\")\n            sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(pixivCookie)\")\n            return null\n        }\n    }\n\n    u.removeCookie = function() {\n        cookie.removeCookie('https:\/\/www.pixiv.net')\n        cookie.removeCookie('https:\/\/accounts.pixiv.net')\n        cookie.removeCookie('https:\/\/accounts.google.com')\n        cookie.removeCookie('https:\/\/api.weibo.com')\n        cache.delete(\"pixivCookie\")\n        cache.delete(\"csfrToken\")  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n        cache.delete(\"headers\")\n    }\n\n    u.vote = function (id, to, dt) {\n        id = id || 25245136; let k = 'vote_' + id;\n        if (Date.now() > (+dt || 1754e9) || +String(cache.get(k)) > 0) return;\n        let b = `https:\/\/www.pixiv.net\/ajax\/novel\/${id}`,\n            t = _ => Date.parse(new Date().toLocaleDateString()) + 828e5 - Date.now(),\n            f = _ => cache.put(k, '1', Math.min(3600, t() \/ 1e3 | 0)) & java.ajax(b);\n        try {\n            java.post(b + '\/poll\/answer', `{\"choice_id\":${to || 2}}`, {\n                'x-csrf-token': cache.get('csfrToken') || this.getCsrfToken(),\n                'Cookie': cache.get(\"pixivCookie\") || this.getCookie(),\n                'Content-Type': 'application\/json'\n            }).statusCode() === 200 && f();\n        } catch (e) {\n            String(e).includes('403') && f();\n        }\n    }\n\n    \/\/ \u83b7\u53d6 Csrf Token\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6536\u85cf\u7b49\u8bf7\u6c42\n    \/\/ \u83b7\u53d6\u65b9\u6cd5\u6765\u81ea\u811a\u672c Pixiv Previewer\n    \/\/ https:\/\/github.com\/Ocrosoft\/PixivPreviewer\n    \/\/ https:\/\/greasyfork.org\/zh-CN\/scripts\/30766-pixiv-previewer\/code\n    u.getCsrfToken = function() {\n        let csfrToken\n        let html = java.webView(null, \"https:\/\/www.pixiv.net\/\", null)\n        try {\n            csfrToken = html.match(\/token\\\\\":\\\\\"([a-z0-9]{32})\/)[1]\n        } catch (e) {\n            csfrToken = null\n            sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(csfrToken)\")\n        }\n        java.log(typeof csfrToken)\n        java.log(csfrToken)\n        cache.put(\"csfrToken\", csfrToken)  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n        return csfrToken\n    }\n\n    \/\/ \u5c06\u591a\u4e2a\u957f\u7bc7\u5c0f\u8bf4\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n    u.combineNovels = function(novels) {\n        return novels.filter(novel => {\n            \/\/ \u5355\u672c\u76f4\u63a5\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                return true\n            }\n            \/\/ \u96c6\u5408\u4e2d\u6ca1\u6709\u8be5\u7cfb\u5217\u89e3\u6790\u4e3a\u4e00\u672c\u4e66\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                return true\n            }\n            return false\n        })\n    }\n\n    \/\/ \u5c4f\u853d\u4f5c\u8005\n    u.authorFilter = function(novels) {\n        let authors = getFromCache(\"blockAuthorList\")\n        if (authors !== null && authors.length >= 0) {\n            java.log(`\ud83d\udeab \u5c4f\u853d\u4f5c\u8005ID\uff1a${JSON.stringify(authors)}`)\n            authors.forEach(author => {\n                novels = novels.filter(novel => novel.userId !== String(author))\n            })\n        }\n        return novels\n    }\n\n    u.novelFilter = function(novels) {\n        let novels1 = [], novels2 = [], msg\n        let likeNovels = getFromCache(\"likeNovels\")\n        let watchedSeries = getFromCache(\"watchedSeries\")\n        let novels0 = novels.map(novel => novel.id)\n\n        msg = util.checkStatus(util.settings.SHOW_LIKE_NOVELS).replace(\"\u672a\",\"\u4e0d\")\n        java.log(`${msg}\u663e\u793a\u6536\u85cf\u5c0f\u8bf4`)\n        if (util.settings.SHOW_LIKE_NOVELS === false) {\n            novels = novels.filter(novel => !likeNovels.includes(Number(novel.id)))\n            novels1 = novels.map(novel => novel.id)\n            java.log(`\u23ec \u8fc7\u6ee4\u6536\u85cf\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels1.length}`)\n        }\n\n        msg = util.checkStatus(util.settings.SHOW_WATCHED_SERIES).replace(\"\u672a\",\"\u4e0d\")\n        java.log(`${msg}\u663e\u793a\u8ffd\u66f4\u7cfb\u5217`)\n        if (util.settings.SHOW_WATCHED_SERIES === false) {\n            novels = novels.filter(novel => !watchedSeries.includes(Number(novel.seriesId)))\n            novels2 = novels.map(novel => novel.id)\n            if (novels1.length >= 1) novels0 = novels1\n            java.log(`\u23ec \u8fc7\u6ee4\u8ffd\u66f4\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n        }\n\n        let novels3 = novels.map(novel => novel.id)\n        if (novels0.length >= 1 && novels3.length === 0) {\n            let msg = `\u23ec \u8fc7\u6ee4\u5c0f\u8bf4\\n\u26a0\ufe0f \u8fc7\u6ee4\u540e\u65e0\u7ed3\u679c\\n\\n\u8bf7\u6839\u636e\u9700\u8981\\n`\n            if (util.settings.SHOW_LIKE_NOVELS === false) msg += \"\u5f00\u542f\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\\n\"\n            if (util.settings.SHOW_WATCHED_SERIES === false) msg += \"\u5f00\u542f\u663e\u793a\u8ffd\u66f4\u7cfb\u5217\"\n            sleepToast(msg, 1)\n        }\n\n        util.debugFunc(() => {\n            \/\/ java.log(JSON.stringify(novels0))\n            java.log(JSON.stringify(novels0.length))\n            \/\/ java.log(JSON.stringify(novels1))\n            java.log(JSON.stringify(novels1.length))\n            \/\/ java.log(JSON.stringify(novels2))\n            java.log(JSON.stringify(novels2.length))\n        })\n        return novels\n    }\n\n    \/\/ \u6536\u85cf\u5c0f\u8bf4\/\u8ffd\u66f4\u7cfb\u5217 \u5199\u5165\u7f13\u5b58\n    u.saveNovels = function(listInCacheName, list) {\n        let listInCache = getFromCache(listInCacheName)\n        if (listInCache === null) listInCache = []\n\n        listInCache = listInCache.concat(list)\n        listInCache = Array.from(new Set(listInCache))\n        cache.put(listInCacheName, JSON.stringify(listInCache))\n\n        if (listInCacheName === \"likeNovels\") listInCacheName = \"\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4ID\"\n        else if (listInCacheName === \"watchedSeries\") listInCacheName = \"\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217ID\"\n        java.log(`${listInCacheName}\uff1a${JSON.stringify(listInCache)}`)\n    }\n\n    \/\/ \u5904\u7406 novels \u5217\u8868\n    u.handNovels = function(novels, detailed) {\n        detailed=detailed||false\n        let likeNovels = [], watchedSeries = []\n        novels = util.authorFilter(novels)\n        novels.forEach(novel => {\n            \/\/ novel.id = novel.id\n            \/\/ novel.title = novel.title\n            \/\/ novel.userName = novel.userName\n            \/\/ novel.userId = novel.userId\n            \/\/ novel.tags = novel.tags\n            cache.put(`${novel.userName}`, novel.userId)  \/\/ \u52a0\u5165\u7f13\u5b58\uff0c\u4fbf\u4e8e\u641c\u7d22\u4f5c\u8005\n            if (novel.tags === undefined || novel.tags === null) {\n                novel.tags = []\n            }\n            \/\/ \u641c\u7d22\u5355\u7bc7\n            if (novel.isOneshot === undefined) {\n                \/\/ novel.seriesId = novel.seriesId\n                \/\/ novel.seriesTitle = novel.seriesTitle\n                \/\/ novel.textCount = novel.textCount\n                \/\/ novel.description = novel.description\n                novel.coverUrl = novel.url\n                \/\/ novel.createDate = novel.createDate\n                \/\/ novel.updateDate = novel.updateDate\n            }\n\n            \/\/ \u641c\u7d22\u7cfb\u5217\n            if (novel.isOneshot !== undefined) {\n                if (novel.isOneshot === true) {\n                    novel.seriesId = undefined\n                    novel.id = novel.novelId  \/\/ \u83b7\u53d6\u771f\u6b63\u7684 novelId\n                    novel.seriesTitle = undefined\n                } else {\n                    novel.seriesId = novel.id\n                    novel.id = novel.novelId = novel.latestEpisodeId  \/\/ \u83b7\u53d6\u771f\u6b63\u7684 novelId\n                    novel.seriesTitle = novel.title\n                    \/\/ novel.isWatched = novel.isWatched  \/\/ \u641c\u7d22\u7cfb\u5217\u53ef\u83b7\u53d6\n                }\n                novel.textCount = novel.textLength\n                novel.description = novel.caption\n                novel.coverUrl = novel.cover.urls[\"480mw\"]\n                novel.createDate = novel.createDateTime\n                novel.updateDate = novel.updateDateTime\n            }\n\n            \/\/ \u5355\u7bc7\u6b63\u6587\u8be6\u60c5\u9875\n            if (novel.content) {\n                novel.novelId = novel.id\n                novel.tags = novel.tags.tags.map(item => item.tag)\n                novel.textCount = novel.userNovels[`${novel.id}`].textCount\n                \/\/ novel.latestChapter = novel.title\n                \/\/ novel.description = novel.description\n                novel.coverUrl = novel.userNovels[`${novel.id}`].url\n                \/\/ novel.createDate = novel.createDate\n                novel.updateDate = novel.uploadDate\n\n                if (novel.seriesNavData) {\n                    novel.seriesId = novel.seriesNavData.seriesId\n                    novel.seriesTitle = novel.seriesNavData.title\n                }\n            }\n\n            \/\/ \u7cfb\u5217\u8be6\u60c5\n            if (novel.firstNovelId) {\n                novel.seriesId = novel.id\n                novel.id = novel.novelId = novel.firstNovelId\n                novel.seriesTitle = novel.title\n                novel.coverUrl = novel.cover.urls[\"480mw\"]\n                \/\/ novel.isWatched = novel.isWatched  \/\/ \u641c\u7d22\u7cfb\u5217\u53ef\u83b7\u53d6\n            }\n\n            \/\/ \u5355\u7bc7\u52a0\u66f4\u591a\u4fe1\u606f\n            if (!novel.seriesId) {\n                novel.tags.unshift(\"\u5355\u672c\")\n                novel.latestChapter = novel.title\n                novel.detailedUrl = urlNovelDetailed(novel.id)\n                novel.total = 1\n                if (novel.bookmarkData) {\n                    novel.isBookmark = true\n                    cache.put(`collect${novel.id}`, novel.bookmarkData.id)\n                    likeNovels.push(Number(novel.id))\n                } else {\n                    novel.isBookmark = false\n                }\n            }\n            \/\/ \u7cfb\u5217\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\n            if (novel.seriesId) {\n                let series = getAjaxJson(urlSeriesDetailed(novel.seriesId)).body\n                novel.id = series.firstNovelId\n                novel.title = series.title\n                novel.tags = novel.tags.concat(series.tags)\n                novel.tags.unshift(\"\u957f\u7bc7\")\n                novel.textCount = series.publishedTotalCharacterCount\n                novel.description = series.caption\n                novel.coverUrl = series.cover.urls[\"480mw\"]\n                novel.detailedUrl = urlSeriesDetailed(novel.seriesId)\n                novel.createDate = series.createDate\n                novel.updateDate = series.updateDate\n                novel.total = series.publishedContentCount\n                novel.isWatched = series.isWatched\n                if (novel.isWatched === true) {\n                    watchedSeries.push(Number(novel.seriesId))\n                }\n\n                \/\/ \u53d1\u9001\u8bf7\u6c42\u83b7\u53d6\u7b2c\u4e00\u7ae0 \u83b7\u53d6\u6807\u7b7e\u4e0e\u7b80\u4ecb\n                let firstNovel = {}\n                try {\n                    firstNovel = getAjaxJson(urlNovelDetailed(series.firstNovelId)).body\n                    novel.tags = novel.tags.concat(firstNovel.tags.tags.map(item => item.tag))\n                    if (firstNovel.bookmarkData) {\n                        firstNovel.isBookmark = true\n                        cache.put(`collect${firstNovel.id}`, firstNovel.bookmarkData.id)\n                        likeNovels.push(Number(firstNovel.id))\n                    }\n                } catch (e) {  \/\/ \u9632\u6b62\u7cfb\u5217\u9996\u7bc7\u65e0\u6743\u9650\u83b7\u53d6\n                    try {\n                        firstNovel = getAjaxJson(urlSeriesNovels(novel.seriesId, 30, 0)).body.thumbnails.novel[0]\n                        novel.id = novel.firstNovelId = firstNovel.id\n                        novel.tags = novel.tags.concat(firstNovel.tags)\n                    } catch (e) { \/\/ \u9632\u6b62\u7cfb\u5217\u9996\u7bc7\u65e0\u6743\u9650\u83b7\u53d6\n                        firstNovel = {}\n                        firstNovel.description = \"\"\n                    }\n                }\n                novel.tags.unshift(\"\u957f\u7bc7\")\n                if (novel.description === \"\") {\n                    novel.description = firstNovel.description\n                }\n            }\n        })\n        \/\/ \u6536\u85cf\u5c0f\u8bf4\/\u8ffd\u66f4\u7cfb\u5217 \u5199\u5165\u7f13\u5b58\n        util.saveNovels(\"likeNovels\", likeNovels)\n        util.saveNovels(\"watchedSeries\", watchedSeries)\n        util.debugFunc(() => {\n            java.log(`\u5904\u7406\u5c0f\u8bf4\u5b8c\u6210`)\n        })\n        return novels\n    }\n\n    \/\/ \u5c0f\u8bf4\u4fe1\u606f\u683c\u5f0f\u5316\n    u.formatNovels = function(novels) {\n        novels = util.novelFilter(novels)\n        novels.forEach(novel => {\n            if (novel.title) novel.title = novel.title.trim()\n            novel.coverUrl = urlCoverUrl(novel.coverUrl)\n            novel.readingTime = `${novel.readingTime \/ 60} \u5206\u949f`\n            novel.createDate = dateFormat(novel.createDate)\n            novel.updateDate = dateFormat(novel.updateDate)\n\n            novel.tags2 = []\n            for (let i in novel.tags) {\n                let tag = novel.tags[i]\n                if (tag.includes(\"\/\")) {\n                    let tags = tag.split(\"\/\")\n                    novel.tags2 = novel.tags2.concat(tags)\n                } else {\n                    novel.tags2.push(tag)\n                }\n            }\n            novel.tags = Array.from(new Set(novel.tags2))\n            novel.tags = novel.tags.join(\",\")\n            if (novel.seriesId) {\n                collectMsg = `\ud83d\udcc3 \u8ffd\u66f4\uff1a${util.checkStatus(novel.isWatched)}\u8ffd\u66f4\u7cfb\u5217`\n            } else {\n                collectMsg = `\u2764\ufe0f \u6536\u85cf\uff1a${util.checkStatus(novel.isBookmark)}\u52a0\u5165\u6536\u85cf`\n            }\n\n            if (util.settings.MORE_INFORMATION) {\n                novel.description = `\\n\ud83c\udd7f\ufe0f \u767b\u5f55\uff1a${util.checkStatus(isLogin())}\u767b\u5f55\u8d26\u53f7\n                ${collectMsg}\\n\ud83d\udcd6 \u4e66\u540d\uff1a${novel.title}\\n\ud83d\udc64 \u4f5c\u8005\uff1a${novel.userName}\n                #\ufe0f \u6807\u7b7e\uff1a${novel.tags}\\n\u2b06\ufe0f \u4e0a\u4f20\uff1a${novel.createDate}\n                \ud83d\udd04 \u66f4\u65b0\uff1a${novel.updateDate}\\n\ud83d\udcc4 \u7b80\u4ecb\uff1a${novel.description}`\n            } else {\n                novel.description = `\\n\ud83c\udd7f\ufe0f \u767b\u5f55\uff1a${util.checkStatus(isLogin())}\u767b\u5f55\u8d26\u53f7\n                ${collectMsg}\\n\u2b06\ufe0f \u4e0a\u4f20\uff1a${novel.createDate}\\n\ud83d\udd04 \u66f4\u65b0\uff1a${novel.updateDate}\n                \ud83d\udcc4 \u7b80\u4ecb\uff1a${novel.description}`\n            }\n        })\n        return novels\n    }\n\n    \/\/ \u6b63\u6587\uff0c\u8be6\u60c5\uff0c\u641c\u7d22\uff1a\u4ece\u7f51\u5740\u83b7\u53d6id\uff0c\u8fd4\u56de\u5355\u7bc7\u5c0f\u8bf4 res\uff0c\u7cfb\u5217\u8fd4\u56de\u9996\u7bc7\u5c0f\u8bf4 res\n    \/\/ pixiv \u9ed8\u8ba4\u5206\u4eab\u4fe1\u606f\u4e2d\u6709#\u53f7\uff0c\u4e0d\u4f1a\u88ab\u8bc6\u522b\u6210\u94fe\u63a5\uff0c\u65e0\u6cd5\u4f7f\u7528\u6dfb\u52a0\u7f51\u5740\n    u.getNovelRes = function(result) {\n        let novelId = 0, res = {\"body\": {}}\n        let isJson = isJsonString(result)\n        let isHtml = isHtmlString(result)\n\n        if (!isJson && isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/series\/\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                java.log(`\u7cfb\u5217ID\uff1a${id}`)\n                try {\n                    novelId = getAjaxJson(urlSeriesDetailed(id)).body.firstNovelId\n                } catch (e) {\n                    novelId = getAjaxJson(urlSeriesNovels(id, 30, 0)).body.thumbnails.novel[0].id\n                }\n            } else {\n                let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    novelId = id\n                }\n            }\n        }\n        if (isJson) {\n            res = JSON.parse(result)\n        }\n\n        if (novelId) {\n            java.log(`\u5339\u914d\u5c0f\u8bf4ID\uff1a${novelId}`)\n            res = getAjaxJson(urlNovelDetailed(novelId))\n       java.log(urlNovelDetailed(novelId))\n            java.log(JSON.stringify(res))\n        }\n        if (res.error === true) {\n            java.log(`\u65e0\u6cd5\u4ece Pixiv \u83b7\u53d6\u5f53\u524d\u5c0f\u8bf4`)\n            java.log(JSON.stringify(res))\n        }\n        return res.body\n    }\n\n    \/\/ \u76ee\u5f55\uff1a\u4ece\u7f51\u5740\u83b7\u53d6id\uff0c\u5c3d\u53ef\u80fd\u8fd4\u56de\u7cfb\u5217 res\uff0c\u5355\u7bc7\u5c0f\u8bf4\u8fd4\u56de\u5c0f\u8bf4 res\n    u.getNovelResSeries = function(result) {\n        let seriesId = 0, res = {\"body\": {}}\n        let isJson = isJsonString(result)\n        let isHtml = isHtmlString(result)\n\n        if (!isJson && isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/series\/\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                seriesId = id\n            } else {\n                let pattern = \"(https?:\/\/)?(www\\\\.)?pixiv\\\\.net\/novel\/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    java.log(`\u5339\u914d\u5c0f\u8bf4ID\uff1a${id}`)\n                    res = getAjaxJson(urlNovelDetailed(id))\n                }\n            }\n        }\n        if (isJson) {\n            res = JSON.parse(result)\n        }\n\n        if (res.body && res.body.seriesNavData) {\n            seriesId = res.body.seriesNavData.seriesId\n        }\n        if (seriesId) {\n            java.log(`\u7cfb\u5217ID\uff1a${seriesId}`)\n            res = getAjaxJson(urlSeriesDetailed(seriesId))\n        }\n        if (res.error === true) {\n            java.log(`\u65e0\u6cd5\u4ece Pixiv \u83b7\u53d6\u5f53\u524d\u5c0f\u8bf4`)\n            java.log(JSON.stringify(res))\n        }\n        return res.body\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\nfunction checkMessageThread(checkTimes) {\n    if (checkTimes === undefined) {\n        checkTimes = cache.get(\"checkTimes\")\n    }\n    if (checkTimes === 0 && isLogin()) {\n        let latestMsg = getAjaxJson(urlMessageThreadLatest(5))\n        if (latestMsg.error === true) {\n            java.log(JSON.stringify(latestMsg))\n        } else if (latestMsg.body.total >= 1) {\n            let msg = latestMsg.body.message_threads.filter(item => item.thread_name === \"pixiv\u4e8b\u52d9\u5c40\")[0]\n            if (msg && new Date().getTime()- 1000*msg.modified_at <= 3*24*60*60*1000) { \/\/ 3\u5929\u5185\u8fdb\u884c\u63d0\u793a\n                sleepToast(`\u60a8\u4e8e ${timeFormat(1000*msg.modified_at)} \u89e6\u53d1 Pixiv \u3010\u8fc7\u5ea6\u8bbf\u95ee\u3011\uff0c\u8bf7\u4fee\u6539\u5bc6\u7801\u5e76\u91cd\u65b0\u767b\u5f55\u3002\\n\u5982\u5df2\u4fee\u6539\u8bf7\u5ffd\u7565`, 3)\n                sleepToast(`${msg.latest_content}`, 5)\n                java.startBrowser(\"https:\/\/accounts.pixiv.net\/password\/change\",'\u4fee\u6539\u5bc6\u7801')\n            }\n        }\n    }\n    cache.put(\"checkTimes\", checkTimes + 1, 4*60*60)  \/\/ \u7f13\u5b584h\uff0c\u6bcf4h\u63d0\u9192\u4e00\u6b21\n    \/\/ cache.put(\"checkTimes\", checkTimes + 1, 60)  \/\/ \u6d4b\u8bd5\u7528\uff0c\u7f13\u5b5860s\uff0c\u6bcf\u5206\u949f\u63d0\u9192\u4e00\u6b21\n    \/\/ java.log(checkTimes + 1)\n}\n\n\/\/ \u83b7\u53d6\u8bf7\u6c42\u7684user id\u65b9\u4fbf\u5176\u4ed6ajax\u8bf7\u6c42\u6784\u9020\nfunction getPixivUid() {\n    let uid = java.getResponse().headers().get(\"x-userid\")\n    if (uid != null) {\n        cache.put(\"pixiv:uid\", String(uid))\n    } else {\n        cache.delete(\"pixiv:uid\")\n    }\n}\n\nfunction getHeaders() {\n    let headers = {\n        \"accept\": \"application\/json\",\n        \"accept-encoding\": \"gzip, deflate, br, zstd\",\n        \"accept-language\": \"zh-CN\",\n        \/\/ \"content-type\": \"application\/json; charset=utf-8\",\n        \/\/ \"content-type\": \"application\/x-www-form-urlencoded; charset=utf-8\",\n        \"origin\": \"https\/\/www.pixiv.net\",\n        \"referer\": \"https:\/\/www.pixiv.net\/\",\n        \/\/ \"sec-ch-ua\": `\"Not\/A)Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"`,\n        \/\/ \"sec-ch-ua-mobile\": \"?0\",\n        \/\/ \"sec-ch-ua-platform\": \"Windows\",\n        \/\/ \"sec-fetch-dest\": \"empty\",\n        \/\/ \"sec-fetch-mode\": \"cors\",\n        \/\/ \"sec-fetch-site\": \"same-origin\",\n        \"user-agent\": cache.get(\"userAgent\"),\n        \"x-csrf-token\": cache.get(\"csfrToken\"),\n        \"Cookie\": cache.get(\"pixivCookie\")\n    }\n    putInCache(\"headers\", headers)\n    return headers\n}\n\nfunction getBlockAuthorsFromSource() {\n    let authors = []\n    try {\n        authors = JSON.parse(`[${source.getVariable().replace(\"\uff0c\", \",\")}]`)\n        \/\/ sleepToast(JSON.stringify(authors))\n    } catch (e) {\n        sleepToast(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\\n\u26a0\ufe0f \u3010\u4e66\u6e90\u3011\u6e90\u53d8\u91cf\u8bbe\u7f6e\u6709\u8bef\\n\u8f93\u5165\u4f5c\u8005ID\uff0c\u4ee5\u82f1\u6587\u9017\u53f7\u95f4\u9694\uff0c\u4fdd\u5b58\")\n    }\n    return authors\n}\n\nfunction syncBlockAuthorList() {\n    let authors1 = getFromCache(\"blockAuthorList\")\n    let authors2 = getBlockAuthorsFromSource()\n    util.debugFunc(() => {\n        java.log(`\u5c4f\u853d\u4f5c\u8005\uff1a\u7f13\u5b58\u3000\uff1a${JSON.stringify(authors1)}`)\n        java.log(`\u5c4f\u853d\u4f5c\u8005\uff1a\u6e90\u53d8\u91cf\uff1a${JSON.stringify(authors2)}`)\n    })\n    putInCache(\"blockAuthorList\", authors2)\n    if (authors1 === null || authors1.length !== authors2.length) {\n        java.log(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\uff1a\u5df2\u5c06\u6e90\u53d8\u91cf\u540c\u6b65\u81f3\u7f13\u5b58\")\n    } else if (authors2.length === 0) {\n        java.log(\"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\uff1a\u5df2\u6e05\u7a7a\u5c4f\u853d\u4f5c\u8005\")\n    }\n}\n\npublicFunc()\nsyncBlockAuthorList()\nif (result.code() === 200) {\n    if (isBackupSource() && !isLogin()) {\n        util.getCsrfToken()\n    }\n    getPixivUid(); getWebViewUA(); util.getCookie(); getHeaders()\n    if (!util.settings.FAST) checkMessageThread()   \/\/ \u68c0\u6d4b\u8fc7\u5ea6\u8bbf\u95ee\n    util.vote();\n}\n\nutil.debugFunc(() => {\n    java.log(`DEBUG = ${util.settings.DEBUG}\\n`)\n    java.log(JSON.stringify(util.settings, null, 4))\n    java.log(`${getWebViewUA()}\\n`)\n    java.log(`${cache.get(\"csfrToken\")}\\n`)\n    java.log(`${cache.get(\"pixivCookie\")}\\n`)\n})\n\njava.getStrResponse(null, null)","loginUi":"[\n    {\n        \"name\": \"\\uD83C\\uDD7F\ufe0f \u767b\u5f55\u8d26\u53f7\",\n        \"type\": \"button\",\n        \"action\": \"login()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2699\ufe0f \u8d26\u53f7\u8bbe\u7f6e\",\n        \"type\": \"button\",\n        \"action\": \"startPixivSettings()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDD19 \u9000\u51fa\u8d26\u53f7\",\n        \"type\": \"button\",\n        \"action\": \"logout()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\ud83c\udd99 \u66f4\u65b0\u4e66\u6e90\",\n        \"type\": \"button\",\n        \"action\": \"updateSource()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDD30 \u4f7f\u7528\u6307\u5357\",\n        \"type\": \"button\",\n        \"action\": \"startGithubReadme()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDC1E \u53cd\u9988\u95ee\u9898\",\n        \"type\": \"button\",\n        \"action\": \"startGithubIssue()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2764\ufe0f \u516c\u5f00\u6536\u85cf\",\n        \"type\": \"button\",\n        \"action\": \"novelBookmarkFactory(1)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u3299\ufe0f \u79c1\u5bc6\u6536\u85cf\",\n        \"type\": \"button\",\n        \"action\": \"novelBookmarkFactory(2)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCCC \u5f53\u524d\u7ae0\u8282\",\n        \"type\": \"button\",\n        \"action\": \"charpterReading()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCC3 \u8ffd\u66f4\u7cfb\u5217\",\n        \"type\": \"button\",\n        \"action\": \"seriesWatchFactory()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2b50\ufe0f \u5173\u6ce8\u4f5c\u8005\",\n        \"type\": \"button\",\n        \"action\": \"userFollowFactory()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDEAB \u5c4f\u853d\u4f5c\u8005\",\n        \"type\": \"button\",\n        \"action\": \"userBlock()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u53d1\u9001\u8bc4\u8bba\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"\u2705 \u53d1\u9001\u8bc4\u8bba\",\n        \"type\": \"button\",\n        \"action\": \"novelCommentAdd()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDDD1 \u5220\u9664\u8bc4\u8bba\",\n        \"type\": \"button\",\n        \"action\": \"novelCommentDelete()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83E\\uDDF9 \u6e05\u9664\u7f13\u5b58\",\n        \"type\": \"button\",\n        \"action\": \"cleanCache()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2934\ufe0f \u5206\u4eab\u4f5c\u8005\",\n        \"type\": \"button\",\n        \"action\": \"shareFactory('author')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2934\ufe0f \u5206\u4eab\u7ae0\u8282\",\n        \"type\": \"button\",\n        \"action\": \"shareFactory('novel')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2934\ufe0f \u5206\u4eab\u7cfb\u5217\",\n        \"type\": \"button\",\n        \"action\": \"shareFactory('series')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n\n    {\n        \"name\": \"\u2699\ufe0f \u5f53\u524d\u8bbe\u7f6e\",\n        \"type\": \"button\",\n        \"action\": \"showSettings()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDD27 \u9ed8\u8ba4\u8bbe\u7f6e\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDC64 \u641c\u7d22\u4f5c\u8005\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SEARCH_AUTHOR')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83C\\uDC04 \u7e41\u7b80\u901a\u641c\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('CONVERT_CHINESE')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCD6 \u66f4\u591a\u7b80\u4ecb\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('MORE_INFORMATION')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCC5 \u66f4\u65b0\u65f6\u95f4\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_UPDATE_TIME')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDD17 \u539f\u59cb\u94fe\u63a5\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_ORIGINAL_LINK')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCDA \u6062\u590d\u300a\u300b\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('REPLACE_TITLE_MARKS')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDDBC\ufe0f \u663e\u793a\u63cf\u8ff0\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_CAPTIONS')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCAC \u663e\u793a\u8bc4\u8bba\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_COMMENTS')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u2764\ufe0f \u663e\u793a\u6536\u85cf\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_LIKE_NOVELS')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCC3 \u663e\u793a\u8ffd\u66f4\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('SHOW_WATCHED_SERIES')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u23e9 \u5feb\u901f\u6a21\u5f0f\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('FAST')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDC1E \u8c03\u8bd5\u6a21\u5f0f\",\n        \"type\": \"button\",\n        \"action\": \"editSettings('DEBUG')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDD0D \u641c\u7d22\u8bf4\u660e\",\n        \"type\": \"button\",\n        \"action\": \"readMeSearch()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\\uD83D\\uDCC4 \u641c\u7d22\u9875\u7801\",\n        \"type\": \"button\",\n        \"action\": \"showMaxPages()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u23eb \u589e\u52a0\u9875\u7801\",\n        \"type\": \"button\",\n        \"action\": \"editMaxPages('add')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    },\n    {\n        \"name\": \"\u23ec \u51cf\u5c11\u9875\u7801\",\n        \"type\": \"button\",\n        \"action\": \"editMaxPages('minus')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": -1\n        }\n    }\n]","loginUrl":"function login() {\n    sleepToast(\"\ud83d\udd04 \u6b63\u5728\u68c0\u6d4b\u767b\u9646\u72b6\u6001\uff0c\u8bf7\u7a0d\u5019\")\n    if (isLogin()) {\n        sleepToast(\"\ufe0f\ud83c\udd7f\ufe0f \u767b\u5f55\u8d26\u53f7\\n\u2705 \u5df2\u7ecf\u767b\u5f55\u8fc7\u8d26\u53f7\u4e86\\n\\n\u53ef\u4ee5\u70b9\u51fb\u3010\ud83d\udd19 \u9000\u51fa\u8d26\u53f7\u3011\u6765\u5207\u6362\u8d26\u53f7\")\n        return false\n    }\n\n    let resp = java.startBrowserAwait(`https:\/\/accounts.pixiv.net\/login,\n    {\"headers\": {\"User-Agent\": ${getWebViewUA()}}}`, '\u767b\u5f55\u8d26\u53f7', false)\n    if (resp.code() === 200) {\n        getCookie(); getCsrfToken()\n        return true\n    } else {\n        java.log(resp.code()); sleepToast(\"\ud83c\udd7f\ufe0f \u767b\u5f55\u8d26\u53f7\\n\\n\u26a0\ufe0f \u767b\u5f55\u5931\u8d25\")\n        return false\n    }\n}\n\nfunction logout() {\n    removeCookie()\n    java.startBrowser(\"https:\/\/www.pixiv.net\/logout.php\", \"\u9000\u51fa\u8d26\u53f7\")\n    removeCookie()\n    sleepToast(`\u2705 \u5df2\u9000\u51fa\u5f53\u524d\u8d26\u53f7\\n\\n\u9000\u51fa\u540e\u8bf7\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \u2714\ufe0f \u9000\u51fa\\n\\n\u767b\u5f55\u8bf7\u70b9\u51fb\u3010\u767b\u5f55\u8d26\u53f7\u3011\u8fdb\u884c\u767b\u5f55`)\n}\n\nfunction removeCookie() {\n    cookie.removeCookie('https:\/\/www.pixiv.net')\n    cookie.removeCookie('https:\/\/accounts.pixiv.net')\n    cookie.removeCookie('https:\/\/accounts.google.com')\n    cookie.removeCookie('https:\/\/api.weibo.com')\n    cache.delete(\"pixivCookie\")\n    cache.delete(\"csfrToken\")  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n    cache.delete(\"headers\")\n}\n\n\/\/ \u83b7\u53d6 Csrf Token\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6536\u85cf\u7b49\u8bf7\u6c42\n\/\/ \u83b7\u53d6\u65b9\u6cd5\u6765\u81ea\u811a\u672c Pixiv Previewer\n\/\/ https:\/\/github.com\/Ocrosoft\/PixivPreviewer\n\/\/ https:\/\/greasyfork.org\/zh-CN\/scripts\/30766-pixiv-previewer\/code\nfunction getCsrfToken() {\n    let csfrToken\n    let html = java.webView(null, \"https:\/\/www.pixiv.net\/\", null)\n    try {\n        csfrToken = html.match(\/token\\\\\":\\\\\"([a-z0-9]{32})\/)[1]\n    } catch (e) {\n        csfrToken = null\n    }\n    \/\/ java.log(csfrToken)\n    cache.put(\"csfrToken\", csfrToken)  \/\/ \u4e0e\u767b\u5f55\u8bbe\u5907\u6709\u5173\n    return csfrToken\n}\n\nfunction getCookie() {\n    let pixivCookie = String(java.getCookie(\"https:\/\/www.pixiv.net\/\", null))\n    if (pixivCookie.includes(\"first_visit_datetime\")) {\n        \/\/ java.log(pixivCookie)\n        cache.put(\"pixivCookie\", pixivCookie, 60*60)\n        return pixivCookie\n    } else {\n        cache.delete(\"pixivCookie\")\n        sleepToast(\"\u672a\u767b\u5f55\u8d26\u53f7(pixivCookie)\")\n        return null\n    }\n}\n\nfunction getNovel() {\n    let novel = source.getLoginInfoMap()\n    if (novel === undefined) novel = getFromCache(\"novel\")\n    return novel\n}\n\nfunction getPostBody(url, body, headers) {\n    if (headers === undefined) headers = getFromCache(\"headers\")\n    if (isJsonString(body)) {\n        headers[\"content-type\"] = \"application\/json; charset=utf-8\"\n    } else if (typeof(body) == \"string\") {\n        headers[\"content-type\"] = \"application\/x-www-form-urlencoded; charset=utf-8\"\n    }\n    try {\n        return JSON.parse(java.post(url, body, headers).body())\n    } catch (e) {\n        \/\/ sleepToast(e)\n        \/\/ sleepToast(JSON.stringify(headers))\n        if (String(e).includes(400)) sleepToast(`\u26a0\ufe0f \u7f3a\u5c11 headers`, 1)\n        else if (String(e).includes(403)) sleepToast(`\u26a0\ufe0f \u7f3a\u5c11 cookie \u6216 cookie \u8fc7\u671f`, 1)\n        else if (String(e).includes(404)) sleepToast(`\u26a0\ufe0f 404`, 1)\n        else if (String(e).includes(422)) sleepToast(`\u26a0\ufe0f \u8bf7\u6c42\u4fe1\u606f\u6709\u8bef`, 1)\n        return {error: true}\n    }\n}\n\nfunction novelBookmarkAdd(restrict=0) {\n    let novel = getNovel()\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/ajax\/novels\/bookmarks\/add\",\n        JSON.stringify({\"novel_id\": novel.id, \"restrict\": restrict, \"comment\":\"\", \"tags\":[]})\n    )\n    if (resp.error === true) sleepToast(`\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\n    \\n\\n\u26a0\ufe0f \u6536\u85cf\u3010${novel.title}\u3011\u5931\u8d25`)\n    else if (resp.body === null) sleepToast(`\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u2705 \u5df2\u7ecf\u6536\u85cf\u3010${novel.title}\u3011\u4e86`)\n    else {\n        cache.put(`collect${novel.id}`, resp.body)\n        sleepToast(`\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u2705 \u5df2\u6536\u85cf\u3010${novel.title}\u3011`)\n\n        let likeNovels = getFromCache(\"likeNovels\")\n        likeNovels.push(Number(novel.id))\n        putInCache(\"likeNovels\", likeNovels)\n\n        let novelObj = getAjaxJson(urlNovelDetailed(novel.id))\n        novelObj.body.isBookmark = true\n        putInCache(urlNovelDetailed(novel.id), novelObj, cacheSaveSeconds)\n    }\n}\n\nfunction getNovelBookmarkId(novelId) {\n    let bookmarkId = getFromCache(`collect${novelId}`)\n    if (bookmarkId === null) {\n        bookmarkId = getAjaxJson(urlNovelBookmarkData(novelId), true).body.bookmarkData.id\n    }\n    return bookmarkId\n}\n\nfunction novelBookmarkDelete() {\n    let novel = getNovel()\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/ajax\/novels\/bookmarks\/delete\",\n        `del=1&book_id=${getNovelBookmarkId(novel.id)}`\n    )\n    if (resp.error === true) sleepToast(`\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u26a0\ufe0f \u53d6\u6d88\u6536\u85cf\u3010${novel.title}\u3011\u5931\u8d25`)\n    else {\n        cache.delete(`collect${novel.id}`)\n        sleepToast(`\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u2705 \u5df2\u53d6\u6d88\u6536\u85cf\u3010${novel.title}\u3011`)\n\n        let likeNovels = getFromCache(\"likeNovels\")\n        likeNovels = likeNovels.filter(item => item !== Number(novel.id))\n        putInCache(\"likeNovels\", likeNovels)\n\n        let novelObj = getAjaxJson(urlNovelDetailed(novel.id))\n        novelObj.body.isBookmark = false\n        putInCache(urlNovelDetailed(novel.id), novelObj, cacheSaveSeconds)\n    }\n}\n\nfunction novelsBookmarkDelete(novelIds) {\n    let bookmarkIds = []\n    novelIds.forEach(novelId => {bookmarkIds.push(getNovelBookmarkId(novelId))})\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/ajax\/novels\/bookmarks\/remove\",\n        JSON.stringify({\"bookmarkIds\": bookmarkIds})\n    )\n    if (resp.error === true) sleepToast(\"\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u26a0\ufe0f \u53d6\u6d88\u6536\u85cf\u5931\u8d25\", 1)\n    else {\n        sleepToast(\"\u2764\ufe0f \u6536\u85cf\u5c0f\u8bf4\\n\\n\u2705 \u5df2\u53d6\u6d88\u6536\u85cf\")\n        novelIds.forEach(novelId => {cache.delete(`collect${novelId}`)})\n\n        let likeNovels = getFromCache(\"likeNovels\")\n        likeNovels = likeNovels.filter(item => !novelIds.includes(Number(item)))\n        putInCache(\"likeNovels\", likeNovels)\n\n        novelIds.forEach(novelId => {\n            let novelObj = getAjaxJson(urlNovelDetailed(novelId))\n            novelObj.body.isBookmark = false\n            putInCache(urlNovelDetailed(novelId), novelObj, cacheSaveSeconds)\n        })\n    }\n}\n\nfunction novelBookmarkFactory(code) {\n    let novel = getNovel()\n    let collectId = getFromCache(`collect${novel.id}`)\n    if (collectId >= 1) code = 0\n\n    if (code === 0) novelBookmarkDelete()\n    else if (code === 1) novelBookmarkAdd(0)\n    else if (code === 2) novelBookmarkAdd(1)\n}\n\nfunction novelMarker(page=1) {\n    let novel = getNovel()\n    let lastMarker = getFromCache(`marker${novel.id}`)\n    if (lastMarker === true) page = 0\n\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/novel\/rpc_marker.php\",\n        `mode=save&i_id=${novel.id}&u_id=${getFromCache(\"pixiv:uid\")}&page=${page}`\n    )\n    java.log(`mode=save&i_id=${novel.id}&u_id=${getFromCache(\"pixiv:uid\")}&page=${page}`)\n    if (resp.error === true) sleepToast(\"\ud83c\udff7\ufe0f \u6dfb\u52a0\u4e66\u7b7e\\n\\n\u26a0\ufe0f \u64cd\u4f5c\u5931\u8d25\", 1)\n    else if (lastMarker === true) {\n        cache.put(`marker${novel.id}`, false)\n        sleepToast(`\ud83c\udff7\ufe0f \u6dfb\u52a0\u4e66\u7b7e\\n\\n\u2705 \u5df2\u5220\u9664\u4e66\u7b7e`)\n    } else {\n        cache.put(`marker${novel.id}`, true)\n        sleepToast(`\ud83c\udff7\ufe0f \u6dfb\u52a0\u4e66\u7b7e\\n\\n\u2705 \u5df2\u52a0\u5165\u4e66\u7b7e`)\n    }\n}\n\nfunction seriesWatch() {\n    let novel = getNovel()\n    let resp = getPostBody(\n        `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${novel.seriesId}\/watch`,\n        \"{}\"\n    )\n    if (resp.error === true) sleepToast(`\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217\\n\\n\u26a0\ufe0f \u8ffd\u66f4\u3010${novel.seriesTitle}\u3011\u5931\u8d25`, 1)\n    else {\n        cache.put(`watch${novel.seriesId}`, true)\n        sleepToast(`\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217\\n\\n\u2705 \u5df2\u8ffd\u66f4\u3010${novel.seriesTitle}\u3011`)\n\n        let watchedSeries = getFromCache(\"watchedSeries\")\n        watchedSeries.push(Number(novel.seriesId))\n        putInCache(\"watchedSeries\", watchedSeries)\n\n        let novelObj = getAjaxJson(urlSeriesDetailed(novel.seriesId))\n        novelObj.body.isWatched = true\n        putInCache(urlSeriesDetailed(novel.seriesId), novelObj, cacheSaveSeconds)\n    }\n}\n\nfunction seriesUnWatch() {\n    let novel = getNovel()\n    let resp = getPostBody(\n        `https:\/\/www.pixiv.net\/ajax\/novel\/series\/${novel.seriesId}\/unwatch`,\n        \"{}\"\n    )\n    if (resp.error === true) sleepToast(`\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217\\n\\n\u26a0\ufe0f \u53d6\u6d88\u8ffd\u66f4\u3010${novel.seriesTitle}\u3011\u5931\u8d25`, 1)\n    else {\n        cache.delete(`watch${novel.seriesId}`)\n        sleepToast(`\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217\\n\\n\u2705 \u5df2\u53d6\u6d88\u8ffd\u66f4\u3010${novel.seriesTitle}\u3011`)\n\n        let watchedSeries = getFromCache(\"watchedSeries\")\n        watchedSeries = watchedSeries.filter(item => item !== Number(novel.seriesId))\n        putInCache(\"watchedSeries\", watchedSeries)\n\n        let novelObj = getAjaxJson(urlSeriesDetailed(novel.seriesId))\n        novelObj.body.isWatched = false\n        putInCache(urlSeriesDetailed(novel.seriesId), novelObj, cacheSaveSeconds)\n    }\n}\n\nfunction seriesWatchFactory(code=1) {\n    let novel = getNovel()\n    if (!novel.seriesId) {\n        return sleepToast(`\ud83d\udcc3 \u8ffd\u66f4\u7cfb\u5217\\n\\n\u26a0\ufe0f \u3010${novel.title}\u3011\u975e\u7cfb\u5217\u5c0f\u8bf4\uff0c\u65e0\u6cd5\u52a0\u5165\u8ffd\u66f4\u5217\u8868`)\n    }\n\n    let lastStatus = getFromCache(`watch${novel.seriesId}`)\n    if (lastStatus === true) code = 0\n    if (code === 0) seriesUnWatch()\n    else if (code === 1) seriesWatch()\n}\n\nfunction userFollow(restrict=0) {\n    let novel = getNovel()\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/bookmark_add.php\",\n        `mode=add&type=user&user_id=${novel.userId}&tag=\"\"&restrict=${restrict}&format=json`\n    )\n    if (resp.error === true) sleepToast(`\u2b50\ufe0f \u5173\u6ce8\u4f5c\u8005\\n\\n\u26a0\ufe0f \u5173\u6ce8\u3010${novel.userName}\u3011\u5931\u8d25`, 1)\n    else {\n        sleepToast(`\u2b50\ufe0f \u5173\u6ce8\u4f5c\u8005\\n\\n\u2705 \u5df2\u5173\u6ce8\u3010${novel.userName}\u3011`)\n        cache.put(`follow${novel.userId}`, true)\n    }\n}\n\nfunction userUnFollow() {\n    let novel = getNovel()\n    let resp = getPostBody(\n        \"https:\/\/www.pixiv.net\/rpc_group_setting.php\",\n        `mode=del&type=bookuser&id=${novel.userId}`\n    )\n    if (resp.error === true) sleepToast(`\u2b50\ufe0f \u5173\u6ce8\u4f5c\u8005\\n\\n\u26a0\ufe0f \u53d6\u6d88\u5173\u6ce8\u3010${novel.userName}\u3011\u5931\u8d25`, 1)\n    else {\n        sleepToast(`\u2b50\ufe0f \u5173\u6ce8\u4f5c\u8005\\n\\n\u2705 \u5df2\u53d6\u6d88\u5173\u6ce8\u3010${novel.userName}\u3011`)\n        cache.delete(`follow${novel.userId}`)\n    }\n}\n\nfunction userFollowFactory(code=1) {\n    let novel = getNovel()\n    let lastStatus = getFromCache(`follow${novel.userId}`)\n    if (lastStatus === true) code = 0\n\n    if (code === 0) userUnFollow()\n    else if (code === 1) userFollow()\n}\n\nfunction userBlackList() {\n    let action = \"block\"  \/\/ \u62c9\u9ed1\u4f5c\u8005\uff0c\u975e\u5c4f\u853d\u4f5c\u8005\u4f5c\u54c1\n    let novel = getNovel()\n    let lastStatus = getFromCache(`block${novel.userId}`)\n    if (lastStatus === true) action = \"unblock\"\n\n    let resp = getPostBody(\n        `https:\/\/www.pixiv.net\/ajax\/block\/save`,\n        JSON.stringify({\"user_id\": novel.userId, \"action\": action})\n    )\n    \/\/ java.log(JSON.stringify({\"user_id\": novel.userId, \"action\": action}))\n    if (resp.error === true) sleepToast(\"\u26a0\ufe0f \u64cd\u4f5c\u5931\u8d25\", 1)\n    else if (lastStatus === true) {\n        cache.put(`block${novel.userId}`, false)\n        sleepToast(`\u2705 \u5df2\u53d6\u6d88\u62c9\u9ed1\u3010${novel.userName}\u3011\\n\\n\u5df2\u5141\u8bb8\u5176\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u6536\u85cf\u3001\u5173\u6ce8\u3001\u79c1\u4fe1\u7b49`)\n    } else {\n        cache.put(`block${novel.userId}`, true)\n        sleepToast(`\u2705 \u5df2\u62c9\u9ed1\u3010${novel.userName}\u3011(Pixiv)\\n\\n\u5df2\u7981\u6b62\u5176\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u6536\u85cf\u3001\u5173\u6ce8\u3001\u79c1\u4fe1\u7b49`)\n    }\n}\n\nfunction userBlock() {\n    let authors = getFromCache(\"blockAuthorList\")\n    let novel = getNovel()\n    if (authors.includes(Number(novel.userId))) {\n        authors = authors.filter(author => author !== Number(novel.userId))\n        sleepToast(`\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\\n\\n\u2705 \u5df2\u53d6\u6d88\u5c4f\u853d\u3010${novel.userName}\u3011\\n\u73b0\u5df2\u6062\u590d\u663e\u793a\u5176\u5c0f\u8bf4`)\n    } else if (novel.userId !== undefined && novel.userId !== null) {\n        authors.push(Number(novel.userId))\n        sleepToast(`\ud83d\udeab \u5c4f\u853d\u4f5c\u8005\\n\\n\u2705 \u672c\u5730\u5df2\u5c4f\u853d\u3010${novel.userName}\u3011\\n\u4eca\u540e\u4e0d\u518d\u663e\u793a\u5176\u5c0f\u8bf4`)\n    }\n    putInCache(\"blockAuthorList\", authors)\n    source.setVariable(authors.toString())\n    \/\/ sleepToast(JSON.stringify(authors))\n}\n\nfunction novelCommentAdd() {\n    let resp, novel = getNovel()\n    let userId = getFromCache(\"pixiv:uid\")\n    let comment = String(result.get(\"\u53d1\u9001\u8bc4\u8bba\")).trim()\n    if (comment === \"\") {\n        return sleepToast(`\u2705 \u53d1\u9001\u8bc4\u8bba\\n\u26a0\ufe0f \u8bf7\u8f93\u5165\u9700\u8981\u53d1\u9001\u7684\u8bc4\u8bba\\n\\n\u8f93\u5165\u3010\u8bc4\u8bba\u5185\u5bb9\uff1b\u8bc4\u8bbaID\u3011\u53ef\u56de\u590d\u8be5\u6761\u8bc4\u8bba\uff0c\u5982\u3010\u975e\u5e38\u559c\u6b22\uff1b123456\u3011\\n\\n\ud83d\udccc \u5f53\u524d\u7ae0\u8282\uff1a${novel.title}\\n\\n\u5982\u975e\u5f53\u524d\u7ae0\u8282\uff0c\u8bf7\u5237\u65b0\u6b63\u6587`)\n    }\n\n    let matched = comment.match(RegExp(\/(\uff1b|;\\s*)\\d{8,}\/))\n    if (matched) {\n        let commentId = comment.match(new RegExp(\/\uff1b(\\d{8,})\/))[1]\n        comment = comment.replace(new RegExp(`(\uff1b|;\\s*)${commentId}`), \"\")\n        resp = getPostBody(\n            \"https:\/\/www.pixiv.net\/novel\/rpc\/post_comment.php\",\n            `type=comment&novel_id=${novel.id}&author_user_id=${userId}&comment=${encodeURI(comment)}&parent_id=${commentId}`)\n    } else {\n        resp = getPostBody(\n            \"https:\/\/www.pixiv.net\/novel\/rpc\/post_comment.php\",\n            `type=comment&novel_id=${novel.id}&author_user_id=${userId}&comment=${encodeURI(comment)}`\n        )\n    }\n\n    if (resp.error === true) sleepToast(\"\u2705 \u53d1\u9001\u8bc4\u8bba\\n\\n\u26a0\ufe0f \u8bc4\u8bba\u5931\u8d25\", 1)\n    else sleepToast(`\u2705 \u53d1\u9001\u8bc4\u8bba\\n\\n\u2705 \u5df2\u5728\u3010${novel.title}\u3011\u53d1\u5e03\u8bc4\u8bba\uff1a\\n${comment}`)\n}\n\nfunction getNovelCommentID(novelId, commentText) {\n    let list = [], uid = String(getFromCache(\"pixiv:uid\"))\n    let resp = getAjaxJson(urlNovelComments(novelId, 0, 50), true)\n    resp.body.comments.forEach(comment => {\n        if (comment.userId === uid && comment.comment === commentText) list.push(comment.id)\n\n        if (comment.hasReplies === true) {\n            let resp = getAjaxJson(urlNovelCommentsReply(comment.id, 1), true)\n            resp.body.comments.forEach(comment => {\n                if (comment.userId === uid && comment.comment === commentText) list.push(comment.id)\n            })\n        }\n    })\n    \/\/ java.log(JSON.stringify(list))\n    return list\n}\n\nfunction novelCommentDelete() {\n    let commentIDs, novel = getNovel()\n    let comment = String(result.get(\"\u53d1\u9001\u8bc4\u8bba\")).trim()\n    if (comment === \"\") {\n        return sleepToast(`\ud83d\uddd1 \u5220\u9664\u8bc4\u8bba\\n\u26a0\ufe0f \u8bf7\u8f93\u5165\u9700\u8981\u5220\u9664\u7684\u3010\u8bc4\u8bbaID\u3011\\n\u6216\u8f93\u5165\u9700\u8981\u5220\u9664\u7684\u3010\u8bc4\u8bba\u5185\u5bb9\u3011\\n\\n\ud83d\udccc \u5f53\u524d\u7ae0\u8282\uff1a${novel.title}\\n\\n\u5982\u975e\u5f53\u524d\u7ae0\u8282\uff0c\u8bf7\u5237\u65b0\u6b63\u6587`)\n    }\n\n    let matched = comment.match(RegExp(\/\\d{8,}\/))\n    if (matched) {\n        commentIDs = [matched[0]]\n    } else {\n        commentIDs = getNovelCommentID(novel.id, comment)\n        java.log(JSON.stringify(commentIDs))\n        if (commentIDs.length === 0) {\n            return sleepToast(`\ud83d\uddd1 \u5220\u9664\u8bc4\u8bba\\n\\n\u26a0\ufe0f \u672a\u80fd\u627e\u5230\u8fd9\u6761\u8bc4\u8bba\\n\u8bf7\u68c0\u67e5\u662f\u5426\u6709\u9519\u522b\u5b57\u6216\u6807\u70b9\u7b26\u53f7\u662f\u5426\u4e00\u81f4`)\n        }\n    }\n\n    commentIDs.forEach(commentID =>{\n        let resp = getPostBody(\n            \"https:\/\/www.pixiv.net\/novel\/rpc_delete_comment.php\",\n            `i_id=${novel.id}&del_id=${commentID}`\n        )\n        \/\/ java.log(JSON.stringify(resp))\n        if (resp.error === true) sleepToast(\"\ud83d\uddd1 \u5220\u9664\u8bc4\u8bba\\n\\n\u26a0\ufe0f \u8bc4\u8bba\u5220\u9664\u5931\u8d25\", 1)\n        else sleepToast(`\ud83d\uddd1 \u5220\u9664\u8bc4\u8bba\\n\\n\u2705 \u5df2\u5728\u3010${novel.title}\u3011\u5220\u9664\u8bc4\u8bba\uff1a\\n${comment}`)\n    })\n}\n\nfunction startBrowser(url, title) {\n    let msg = \"\", headers = `{\"headers\": {\"User-Agent\":\"${getWebViewUA()}\"}}`\n    if (url.includes(\"https:\/\/www.pixiv.net\")) {\n        if (url.includes(\"settings\")) msg += \"\u2699\ufe0f \u8d26\u53f7\u8bbe\u7f6e\"\n        else msg += \"\u2934\ufe0f \u5206\u4eab\u5c0f\u8bf4\"\n        msg += \"\\n\\n\u5373\u5c06\u6253\u5f00 Pixiv\\n\u8bf7\u786e\u8ba4\u5df2\u5f00\u542f\u4ee3\u7406\/\u68af\u5b50\/VPN\u7b49\"\n    } else if (url.includes(\"https:\/\/github.com\")) {\n        if (url.includes(\"issues\")) msg += \"\ud83d\udc1e \u53cd\u9988\u95ee\u9898\"\n        else if (url.includes(\"doc\")) msg += \"\ud83d\udd30 \u4f7f\u7528\u6307\u5357\"\n        else msg += \"\u2b50\ufe0f \u6536\u85cf\u9879\u76ee\"\n        msg += \"\\n\\n\u5373\u5c06\u6253\u5f00 Github\\n\u8bf7\u786e\u8ba4\u5df2\u5f00\u542f\u4ee3\u7406\/\u68af\u5b50\/VPN\u7b49\"\n    }\n    sleepToast(msg, 0.01)\n    java.startBrowser(`${url}, ${headers}`, title)\n}\n\nfunction shareFactory(type) {\n    let novel = getNovel()\n    if (novel === undefined || novel === null) return sleepToast(\"\u26a0\ufe0f \u8bf7\u5728\u5c0f\u8bf4\u9605\u8bfb\u9875\u9762\uff0c\u4f7f\u7528\u672c\u529f\u80fd\")\n    if (type.includes(\"author\")) {\n        startBrowser(urlUserUrl(novel.userId), novel.userName)\n    }\n    else if (type.includes(\"novel\") || (!novel.seriesId)) {\n        startBrowser(urlNovelUrl(novel.id), novel.title)\n    }\n    else if (type.includes(\"series\") && novel.seriesId) {\n        startBrowser(urlSeriesUrl(novel.seriesId), novel.seriesTitle)\n    }\n}\n\nfunction startPixivSettings() {\n    startBrowser(\"https:\/\/www.pixiv.net\/settings\/viewing\", \"\u8d26\u53f7\u8bbe\u7f6e\")\n}\nfunction startGithubIssue() {\n    startBrowser(\"https:\/\/github.com\/windyhusky\/PixivSource\/issues\", \"\u53cd\u9988\u95ee\u9898\")\n}\nfunction startGithubReadme() {\n    startBrowser(\"https:\/\/github.com\/windyhusky\/PixivSource\/blob\/main\/doc\/Pixiv.md\", \"\u4f7f\u7528\u6307\u5357\")\n}\n\nfunction checkStatus(status) {\n    if (eval(String(status)) === true) return \"\u2764\ufe0f\"\n    else return \"\ud83d\udda4\"\n}\n\nfunction charpterReading() {\n    let novel = getNovel()\n    \/\/ let novel = source.getLoginInfoMap()\n    let msg = `\ud83d\udccc \u5f53\u524d\u7ae0\u8282\\n\\n${checkStatus(novel.isWatched)} \u7cfb\u5217\uff1a${novel.seriesTitle}\\n${checkStatus(novel.isBookmark)} \u7ae0\u8282\uff1a${novel.title}\\n\ud83d\udc64 \u4f5c\u8005\uff1a${novel.userName}\\n\\n\u5982\u975e\u5f53\u524d\u7ae0\u8282\uff0c\u8bf7\u5237\u65b0\u6b63\u6587`\n    msg = msg.replace(\"\ud83d\udda4 \u7cfb\u5217\uff1a\\n\", \"\")\n    sleepToast(msg, 2)\n}\n\nfunction readMeLogin() {\n    return sleepToast(`\ud83c\udd7f\ufe0f \u767b\u5f55\u754c\u9762\u529f\u80fd\\n\n    \u4f7f\u7528\u6536\u85cf\u3001\u8ffd\u66f4\u3001\u5173\u6ce8\u4f5c\u8005\u3001\u8bc4\u8bba\u7b49\u529f\u80fd\u65f6\uff0c\u9700\u8981\u767b\u5f55\n    \u4f7f\u7528\u524d\u8bf7\u5148\u5237\u65b0\u6b63\u6587\uff0c\u83b7\u53d6\u5f53\u524d\u7ae0\u8282\u4fe1\u606f\\n\n    \u70b9\u51fb\u3010\ud83d\udccc \u5f53\u524d\u7ae0\u8282\u3011\u67e5\u770b\u4e66\u6e90\u5185\u90e8\u7ae0\u8282\u4fe1\u606f`.replace(\"    \",\"\"), 5)\n}\n\nfunction readMeSearch() {\n    return sleepToast(`\ud83d\udd0d \u641c\u7d22\u8bf4\u660e\\n\n    \u6807\u7b7e\u4e4b\u95f4\u9700\u8981\u4ee5\u3010\u7a7a\u683c\u3011\u95f4\u9694\n    \u2796 \u6392\u9664\u6807\u7b7e\uff1a#\u6807\u7b7e1 -\u6807\u7b7e2\n    \ud83d\udc64 \u4f5c\u8005\u4e13\u641c\uff1a@\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n    #\ufe0f \u6807\u7b7e\u4e13\u641c\uff1a#\u6807\u7b7e1 \u6807\u7b7e2 \n    \u23ec \u5b57\u6570\u7b5b\u90091\uff1a#\u6807\u7b7e1 \u6807\u7b7e2 \u5b57\u65703k5\n    \u23ec \u5b57\u6570\u7b5b\u90092\uff1a@\u4f5c\u8005\u7684\u540d\u79f0 \u5b57\u65703w5`.replace(\"    \",\"\"), 5)\n}\n\nlet settingsName = {\n    \"SEARCH_AUTHOR\": \"\ud83d\udd0d \u641c\u7d22\u4f5c\u8005\",\n    \"CONVERT_CHINESE\": \"\ud83c\udc04\ufe0f \u7e41\u7b80\u901a\u641c\",\n    \"SHOW_UPDATE_TIME\": \"\ud83d\udcc5 \u66f4\u65b0\u65f6\u95f4\",\n    \"SHOW_ORIGINAL_LINK\": \"\ud83d\udd17 \u539f\u59cb\u94fe\u63a5\",\n    \"SHOW_COMMENTS\": \"\ud83d\udcac \u663e\u793a\u8bc4\u8bba\",\n    \"MORE_INFORMATION\": \"\ud83d\udcd6 \u66f4\u591a\u7b80\u4ecb\",\n    \"REPLACE_TITLE_MARKS\": \"\ud83d\udcda \u6062\u590d\u300a\u300b\",\n    \"SHOW_CAPTIONS\": \"\ud83d\uddbc\ufe0f \u663e\u793a\u63cf\u8ff0\",\n    \"SHOW_LIKE_NOVELS\" :\"\u2764\ufe0f \u663e\u793a\u6536\u85cf\",\n    \"SHOW_WATCHED_SERIES\" :\"\ud83d\udcc3 \u663e\u793a\u8ffd\u66f4\",\n    \"FAST\": \"\u23e9 \u5feb\u901f\u6a21\u5f0f\",\n    \"DEBUG\": \"\ud83d\udc1e \u8c03\u8bd5\u6a21\u5f0f\"\n}\n\nfunction statusMsg(status) {\n    if (status === true) return \"\u2705 \u5df2\u5f00\u542f\"\n    else if (status === false) return \"\ud83d\udeab \u5df2\u5173\u95ed\"\n    else return \"\ud83c\ude1a\ufe0f \u672a\u8bbe\u7f6e\"\n}\n\n\/\/ \u68c0\u6d4b\u5feb\u901f\u6a21\u5f0f\u4fee\u6539\u76844\u4e2a\u8bbe\u7f6e\nfunction getSettingStatus(mode=\"\") {\n    let keys = [], msgList = []\n    let settings = getFromCache(\"pixivSettings\")\n    if (mode !== \"FAST\") keys = Object.keys(settingsName)\n    else keys = Object.keys(settingsName).slice(0, 5)\n    for (let i in keys) {\n        msgList.push(`${statusMsg(settings[keys[i]])}\u3000${settingsName[keys[i]]}`)\n    }\n    return msgList.join(\"\\n\").trim()\n}\n\nfunction showSettings() {\n    sleepToast(`\u2699\ufe0f \u5f53\u524d\u8bbe\u7f6e\\n\\n${getSettingStatus()}`)\n}\n\nfunction editSettings(object) {\n    let msg = \"\", status\n    let settings = getFromCache(\"pixivSettings\")\n    if (settings[object] !== undefined) {\n        status = settings[object] = (!settings[object])\n    } else {\n        status = settings[object] = true  \/\/ \u65e0\u8bbe\u7f6e\u5219\u9ed8\u8ba4\u5f00\u542f\n    }\n\n    if (object === \"\") {\n        settings.SEARCH_AUTHOR = true       \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\u540d\u79f0\n        settings.CONVERT_CHINESE = true     \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u65f6\u8fdb\u884c\u7e41\u7b80\u8f6c\u6362\n        settings.SHOW_LIKE_NOVELS = true    \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u6536\u85cf\u5c0f\u8bf4\n        settings.SHOW_WATCHED_SERIES = true \/\/ \u641c\u7d22\uff1a\u641c\u7d22\u7ed3\u679c\u663e\u793a\u8ffd\u6574\u7cfb\u5217\u5c0f\u8bf4\n        settings.MORE_INFORMATION = false   \/\/ \u8be6\u60c5\uff1a\u4e66\u7c4d\u7b80\u4ecb\u663e\u793a\u66f4\u591a\u4fe1\u606f\n        settings.SHOW_UPDATE_TIME = true    \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u66f4\u65b0\u65f6\u95f4\uff0c\u4f46\u4f1a\u589e\u52a0\u5c11\u8bb8\u8bf7\u6c42\n        settings.SHOW_ORIGINAL_LINK = true  \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u539f\u59cb\u94fe\u63a5\uff0c\u4f46\u4f1a\u589e\u52a0\u5927\u91cf\u8bf7\u6c42\n        settings.REPLACE_TITLE_MARKS = true \/\/ \u6b63\u6587\uff1a\u6ce8\u97f3\u5185\u5bb9\u4e3a\u6c49\u5b57\u65f6\uff0c\u66ff\u6362\u4e3a\u4e66\u540d\u53f7\n        settings.SHOW_CAPTIONS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u9996\u663e\u793a\u63cf\u8ff0\n        settings.SHOW_COMMENTS = true       \/\/ \u6b63\u6587\uff1a\u7ae0\u5c3e\u663e\u793a\u8bc4\u8bba\n        settings.FAST  = false              \/\/ \u5168\u5c40\uff1a\u5feb\u901f\u6a21\u5f0f\n        settings.DEBUG = false              \/\/ \u5168\u5c40\uff1a\u8c03\u8bd5\u6a21\u5f0f\n        msg = `\\n\u2705 \u5df2\u6062\u590d\u3000\ud83d\udd27 \u9ed8\u8ba4\u8bbe\u7f6e\\n\\n${getSettingStatus()}`\n\n    } else if (object !== \"FAST\") {\n        msg = `${statusMsg(status)}\u3000${settingsName[object]}`\n    } else if (object === \"FAST\") {\n        if (settings[object] === true) {\n            putInCache(\"pixivLastSettings\", settings)\n            settings.CONVERT_CHINESE = false      \/\/ \u641c\u7d22\uff1a\u7e41\u7b80\u901a\u641c\n            settings.SEARCH_AUTHOR = false        \/\/ \u641c\u7d22\uff1a\u9ed8\u8ba4\u641c\u7d22\u4f5c\u8005\n            settings.SHOW_UPDATE_TIME = false     \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u66f4\u65b0\u65f6\u95f4\n            settings.SHOW_ORIGINAL_LINK = false   \/\/ \u76ee\u5f55\uff1a\u663e\u793a\u7ae0\u8282\u6e90\u94fe\u63a5\n            settings.SHOW_COMMENTS = false        \/\/ \u6b63\u6587\uff1a\u663e\u793a\u8bc4\u8bba\n            putInCache(\"pixivSettings\", settings)\n            let message = getSettingStatus(\"FAST\")\n            msg = `\\n${statusMsg(status)}\u3000${settingsName[object]}\\n\\n${message}`\n        } else {\n            settings = getFromCache(\"pixivLastSettings\")\n            settings.SEARCH_AUTHOR = true\n            settings.FAST = false\n            putInCache(\"pixivSettings\", settings)\n            let message = getSettingStatus(\"FAST\")\n            msg = `\\n${statusMsg(status)}\u3000${settingsName[object]}\\n\\n${message}`\n        }\n    }\n    sleepToast(msg)\n    putInCache(\"pixivSettings\", settings)\n}\n\nfunction cleanCache() {\n    let novel = getNovel()\n    cache.delete(`${urlNovelUrl(novel.id)}`)\n    cache.delete(`${urlNovelDetailed(novel.id)}`)\n    \/\/ cache.delete(`${urlSearchNovel(novel.title, 1)}`)\n    \/\/ if (novel.seriesId) {\n    \/\/     cache.delete(`${urlSeriesUrl(novel.seriesId)}`)\n    \/\/     cache.delete(`${urlSeriesDetailed(novel.seriesId)}`)\n    \/\/     cache.delete(`${urlSearchSeries(novel.seriesTitle, 1)}`)\n    \/\/ }\n    sleepToast(`\ud83e\uddf9 \u6e05\u9664\u7f13\u5b58\\n\\n\ud83d\udccc \u5f53\u524d\u7ae0\u8282\uff1a${novel.title}\\n\\n\u5df2\u6e05\u9664\u672c\u7ae0\u6b63\u6587\u7f13\u5b58\uff0c\u5237\u65b0\u6b63\u6587\u4ee5\u66f4\u65b0`, 5)\n}\n\nlet maxPagesName = {\n    \"seriesMaxPages\": \"\u7cfb\u5217\u6700\u5927\u9875\u7801\",\n    \"novelsMaxPages\": \"\u5355\u7bc7\u6700\u5927\u9875\u7801\"\n}\n\nfunction showMaxPages() {\n    let keys = Object.keys(maxPagesName)\n    let key = getFromCache(\"maxPagesKey\")\n    if (!key) key = keys[0]\n    if (key === keys[0]) key = keys[1]\n    if (key === keys[1]) key = keys[0]\n    putInCache(\"maxPagesKey\", key)\n    return sleepToast(`\ud83d\udcc4 \u641c\u7d22\u9875\u7801\\n\u8bbe\u7f6e #\ufe0f\u20e3 \u641c\u7d22\u6807\u7b7e\u7684\u6700\u5927\u9875\u7801\u6570\\n\n    \u5f53\u524d${maxPagesName[keys[0]]}\uff1a${getFromCache(keys[0])}\\n\u5f53\u524d${maxPagesName[keys[1]]}\uff1a${getFromCache(keys[1])}\\n\n    \u70b9\u51fb \u23eb \u589e\u52a0\u9875\u7801\/ \u23ec \u51cf\u5c11\u9875\u7801\\n\u8c03\u6574\u3010${maxPagesName[key]}\u3011\\n\n    \ud83d\udccc \u9875\u7801\u8d8a\u591a\uff0c\u5c0f\u8bf4\u8d8a\u591a\uff0c\u901f\u5ea6\u8d8a\u6162`.replace(\"    \", \"\"))\n}\n\nfunction editMaxPages(method) {\n    let msg = \"\", key = getFromCache(\"maxPagesKey\")\n    if (!key) key = Object.keys(maxPagesName)[0]\n    let maxPages = getFromCache(key)\n    if (!maxPages) maxPages = 1\n    if (method.includes(\"add\")) maxPages += 1\n    if (method.includes(\"min\")) maxPages -= 1\n\n    if (maxPages <= 1) {\n        maxPages = 1\n        msg += \"\u26a0\ufe0f \u641c\u7d22\u9875\u7801\u4e0d\u80fd\u518d\u51cf\u5c0f\u4e86\\n\"\n    }\n    if (maxPages >= 3) {\n        msg += \"\u26a0\ufe0f \u641c\u7d22\u9875\u7801\u8d8a\u591a\uff0c\u641c\u7d22\u901f\u5ea6\u8d8a\u6162\\n\"\n    }\n    if (maxPages >= 10) {\n        maxPages = 10\n        msg += \"\u26a0\ufe0f \u641c\u7d22\u9875\u7801\u4e0d\u80fd\u518d\u589e\u5927\u4e86\\n\"\n    }\n    putInCache(`${key}`, maxPages)\n    sleepToast(`\ud83d\udcc4 \u641c\u7d22\u9875\u7801\\n\\n\u5f53\u524d\u641c\u7d22\u3010${maxPagesName[key]}\u3011\uff1a${maxPages}\\n\\n${(msg)}`.trim())\n    return maxPages\n}\n\nfunction sleepToast(text, second=0) {\n    java.log(text)\n    \/\/ java.toast(text)\n    java.longToast(text)\n    sleep(1000*second)\n}","respondTime":180000,"ruleBookInfo":{"author":"userName","canReName":"true","coverUrl":"coverUrl","init":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction novelHandler(novel){\n    novel = util.formatNovels(util.handNovels([novel]))[0]\n    if (novel.seriesId === undefined || novel.seriesId === null) {\n        book.bookUrl = novel.detailedUrl = urlNovelUrl(novel.id)\n        book.tocUrl = novel.catalogUrl = urlNovelDetailed(novel.id)\n    } else {\n        book.bookUrl = novel.detailedUrl = urlSeriesUrl(novel.seriesId)\n        book.tocUrl = novel.catalogUrl = urlSeriesDetailed(novel.seriesId)\n    }\n    \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    source.putLoginInfo(JSON.stringify(novel))\n    cache.put(\"novel\", JSON.stringify(novel))\n    return novel\n}\n\n(() => {\n    return novelHandler(util.getNovelRes(result))\n})()","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","tocUrl":"catalogUrl","wordCount":"textCount"},"ruleContent":{"content":"@js:\nvar util = objParse(String(java.get(\"util\")))\nlet emoji = {\n    \"normal\": 101, \"surprise\": 102, \"serious\": 103, \"heaven\": 104, \"happy\": 105,\n    \"excited\": 106, \"sing\": 107, \"cry\": 108, \"normal2\": 201, \"shame2\": 202,\n    \"love2\": 203, \"interesting2\": 204, \"blush2\": 205, \"fire2\": 206, \"angry2\": 207,\n    \"shine2\": 208, \"panic2\": 209, \"normal3\": 301, \"satisfaction3\": 302, \"surprise3\": 303,\n    \"smile3\": 304, \"shock3\": 305, \"gaze3\": 306, \"wink3\": 307, \"happy3\": 308,\n    \"excited3\": 309, \"love3\": 310, \"normal4\": 401, \"surprise4\": 402, \"serious4\": 403,\n    \"love4\": 404, \"shine4\": 405, \"sweet4\": 406, \"shame4\": 407, \"sleep4\": 408,\n    \"heart\": 501, \"teardrop\": 502, \"star\": 503\n}\n\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction getNovelInfo(res) {\n    \/\/ \u653e\u5165\u5c0f\u8bf4\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    let novel = source.getLoginInfoMap()\n    if (novel === undefined) novel = JSON.parse(cache.get(\"novel\"))\n    novel.id = Number(res.id)\n    novel.title = res.title\n    novel.userId = res.userId\n    novel.userName = res.userName\n\n    if (res.bookmarkData) {\n        novel.isBookmark = true\n        cache.put(`collect${novel.id}`, res.bookmarkData.id)\n        util.saveNovels(\"likeNovels\", [Number(novel.id)])\n    } else {\n        novel.isBookmark = false\n    }\n\n    if (res.seriesNavData) {\n        novel.seriesId = Number(res.seriesNavData.seriesId)\n        novel.seriesTitle = res.seriesNavData.title\n        novel.isWatched = res.seriesNavData.isWatched\n        util.saveNovels(\"watchedSeries\", [Number(novel.seriesId)])\n    } else {\n        novel.seriesId = null\n        novel.seriesTitle = \"\"\n        novel.isWatched = false\n    }\n\n    \/\/ \u7cfb\u5217 + \u9605\u8bfb\uff0c\u4f7f\u7528\u5f53\u524d\u7ae0\u8282\u540d\u79f0\n    if (novel.seriesId && util.settings.IS_LEGADO) {\n        let novelIds = JSON.parse(cache.get(`novelIds${novel.seriesId}`))\n        novel.id = novelIds[book.durChapterIndex]\n        novel.title = book.durChapterTitle\n\n        let bookmarkId = JSON.parse(cache.get(`collect${novel.id}`))\n        novel.isBookmark = !!bookmarkId\n    }\n\n    source.putLoginInfo(JSON.stringify(novel))\n    cache.put(\"novel\", JSON.stringify(novel))\n}\n\nfunction getContent(res) {\n    getNovelInfo(res)  \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    \/\/ charpterReading()  \/\/ \u8f93\u51fa\u7ae0\u8282\u4fe1\u606f\n    let content = String(res.content)\n    \/\/ let content = \"undefined\"\n    if (content.includes(\"undefined\")) {\n        return checkContent()\n    }\n\n    \/\/ \u5728\u6b63\u6587\u5185\u90e8\u6dfb\u52a0\u5c0f\u8bf4\u63cf\u8ff0\n    if (util.settings.SHOW_CAPTIONS && res.description !== \"\") {\n        content = res.description + \"\\n\" + \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\".repeat(2) + content\n    }\n\n    \/\/ \u83b7\u53d6 [uploadedimage:] \u7684\u56fe\u7247\u94fe\u63a5\n    let hasEmbeddedImages = res.textEmbeddedImages !== undefined && res.textEmbeddedImages !== null\n    if (hasEmbeddedImages) {\n        Object.keys(res.textEmbeddedImages).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${urlCoverUrl(res.textEmbeddedImages[key].urls.original)}\">`)\n        })\n    }\n\n    \/\/ \u83b7\u53d6 [pixivimage:] \u7684\u56fe\u7247\u94fe\u63a5 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(\/\\[pixivimage:(\\d+)-?(\\d+)]\/gm))\n    if (matched) {\n        matched.forEach(pixivimage => {\n            let matched2, illustId, order = 0\n            if (pixivimage.includes(\"-\")) {\n                matched2 = pixivimage.match(RegExp(\"(\\\\d+)-(\\\\d+)\"))\n                illustId = matched2[1]; order = matched2[2]\n            } else {\n                matched2 = pixivimage.match(RegExp(\"\\\\d+\"))\n                illustId = matched2[0];\n            }\n            content = content.replace(`${pixivimage}`, `<img src=\"${urlIllustOriginal(illustId, order)}\">`)\n        })\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u5206\u9875\u6807\u8bb0\u7b26\u53f7 [newpage]\n    matched = content.match(RegExp(\/[ \u3000]*\\[newpage][ \u3000]*\/gm))\n    if (matched) {\n        for (let i in matched) {\n            content = content.replace(`${matched[i]}`, `${\"<p>\u200b<p\/>\".repeat(3)}`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u7ae0\u8282\u6807\u8bb0\u7b26\u53f7 [chapter:]\n    matched = content.match(RegExp(\/\\[chapter:(.*?)]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[chapter:(.*?)]\/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>\u200b<p\/>`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u8df3\u8f6c\u9875\u9762\u6807\u8bb0\u7b26\u53f7 [[jump:]]\n    matched = content.match(RegExp(\/\\[jump:(\\d+)]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(\/\\d+\/)\n            content = content.replace(`${matched[i]}`, `\\n\\n\u8df3\u8f6c\u81f3\u7b2c${page}\u8282`)\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u94fe\u63a5\u6807\u8bb0\u7b26\u53f7 [[jumpuri: > ]]\n    matched = content.match(RegExp(\/\\[\\[jumpuri:(.*?)>(.*?)]]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[\\[jumpuri:(.*?)>(.*?)]]\/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            \/\/ \u9605\u8bfb\u4e0d\u652f\u6301\u8d85\u94fe\u63a5\n            \/\/content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}<\/a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    \/\/ \u66ff\u6362 Pixiv \u6ce8\u97f3\u6807\u8bb0\u7b26\u53f7 [[rb: > ]]\n    matched = content.match(RegExp(\/\\[\\[rb:(.*?)>(.*?)]]\/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(\/\\[\\[rb:(.*?)>(.*?)]]\/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (!util.settings.REPLACE_TITLE_MARKS) {\n                \/\/ \u9ed8\u8ba4\u66ff\u6362\u6210\uff08\u62ec\u53f7\uff09\n                content = content.replace(`${matchedText}`, `${kanji}\uff08${kana}\uff09`)\n            } else {\n                let reg = RegExp(\"[\\\\u4E00-\\\\u9FFF]+\", \"g\");\n                if (reg.test(kana)) {\n                    \/\/ kana\u4e3a\u4e2d\u6587\uff0c\u5219\u66ff\u6362\u56de\u300a\u4e66\u540d\u53f7\u300b\n                    content = content.replace(`${matchedText}`, `${kanji}\u300a${kana}\u300b`)\n                } else {\n                    \/\/ \u9605\u8bfb\u4e0d\u652f\u6301 <ruby> <rt> \u6ce8\u97f3\n                    \/\/ content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}<\/rt><\/ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}\uff08${kana}\uff09`)\n                }\n            }\n        }\n    }\n\n    if (util.settings.SHOW_COMMENTS) {\n        return content + getComment(res)\n    } else {\n        return content\n    }\n}\n\nfunction getComment(res) {\n    let comments = \"\"\n    let resp = getAjaxJson(urlNovelComments(res.id, 0, 1000), true)\n    if (resp.error === true) return comments;\n    let getTime = obj => obj.commentDate && obj.commentDate.replace(\/-0?\/g, '.');\n    let func = ($, x) => emoji[x] ? `<img src=\"${urlEmojiUrl(emoji[x])}\">` : $;\n    let addImg = obj => obj.comment === '' && obj.stampId ? `<img src=\"${urlStampUrl(obj.stampId)}\">` : obj.comment.replace(\/\\(([a-z]\\w+)\\)\/g, func);\n    resp.body.comments.forEach(comment => {\n        if (comment.comment === \"\") {\n            comment.comment = `<img src=\"${urlStampUrl(comment.stampId)}\">`\n        }\n        comments += `\ud83d\udc64${comment.userName}\uff1a${addImg(comment)}\\n(${getTime(comment)})\\n`\n\n        \/\/ \u83b7\u53d6\u8bc4\u8bba\u56de\u590d\n        if (comment.hasReplies === true) {\n            let resp = getAjaxJson(urlNovelCommentsReply(comment.id, 1), true)\n            if (resp.error === true) return comments;\n\n            resp.body.comments.reverse().forEach(reply => {\n                comments += `\ud83d\udc64${reply.userName}(\u2934\ufe0f${reply.replyToUserName})\uff1a${addImg(reply)}\\n(${getTime(reply)})\\n`\n            })\n            comments += \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\"\n        }\n    })\n    if (comments) {\n        comments = \"\\n\" + \"\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\".repeat(2) + \"\u7ae0\u8282\u8bc4\u8bba\uff1a\\n\" + comments\n    }\n    return comments;\n}\n\nfunction checkContent() {\n    let latestMsg = getAjaxJson(urlMessageThreadLatest(5))\n    if (latestMsg.error === true) {\n        java.log(JSON.stringify(latestMsg))\n\n    } else if (latestMsg.body.total >= 1) {\n        let msg = latestMsg.body.message_threads.filter(item => item.thread_name === \"pixiv\u4e8b\u52d9\u5c40\")[0]\n        if (msg === undefined) {\n            sleepToast(`\u60a8\u4e8e ${java.timeFormat(new Date().getTime())} \u89e6\u53d1 Pixiv \u3010\u8bf7\u6c42\u9650\u5236\u3011\uff0c\u5efa\u8bae\u7a0d\u5019\/\u91cd\u65b0\u767b\u5f55\u518d\u7ee7\u7eed`, 3)\n            \/\/ java.startBrowser(\"https:\/\/www.pixiv.net\", '\u9000\u51fa\u767b\u5f55')\n            \/\/ java.startBrowser(\"https:\/\/www.pixiv.net\/logout.php\",'\u9000\u51fa\u767b\u5f55')  \/\/ \u4e0d\u6e05\u9664 WebView \u7f13\u5b58\u65e0\u6cd5\u91cd\u65b0\u767b\u5f55\n\n        } else if (new Date().getTime()- 1000*msg.modified_at <= 3*24*60*60*1000) { \/\/ 3*24h\u5185\u63d0\u9192\n            sleepToast(`\u60a8\u4e8e ${java.timeFormat(1000*msg.modified_at)} \u89e6\u53d1 Pixiv \u3010\u8fc7\u5ea6\u8bbf\u95ee\u3011\uff0c\u8bf7\u4fee\u6539\u5bc6\u7801\u5e76\u91cd\u65b0\u767b\u5f55`, 3)\n            sleepToast(`${msg.latest_content}`, 5)\n            java.startBrowser(\"https:\/\/accounts.pixiv.net\/password\/change\",'\u4fee\u6539\u5bc6\u7801')\n        }\n    }\n}\n\n(() => {\n    return getContent(util.getNovelRes(result))\n})()","imageStyle":"DEFAULT"},"ruleExplore":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  \/\/ \u5b58\u50a8seriesID \u6709BUG\u65e0\u6cd5\u5904\u7406\u7ffb\u9875\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction handlerFactory() {\n    if (baseUrl.includes(\"https:\/\/cdn.jsdelivr.net\")) {\n        return () => {updateSource(); return []}\n    }\n    if (!isLogin()) {\n        return handlerNoLogin()\n    }\n    if (baseUrl.includes(\"\/bookmark\")) {\n        return handlerBookMarks()\n    }\n    if (baseUrl.includes(\"\/top\")) {\n        return handlerRecommend()\n    }\n    if (baseUrl.includes(\"\/follow_latest\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/watch_list\")) {\n        return handlerWatchList()\n    }\n    if (baseUrl.includes(\"\/discovery\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/new\")) {\n        return handlerDiscovery()\n    }\n    if (baseUrl.includes(\"\/commission\/\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/user_event\/portal\")) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.includes(\"\/genre\")) {\n        return handlerWatchList()\n    }\n    \/\/ \u6b63\u5219\u5339\u914d\u7f51\u5740\u5185\u5bb9\n    if (baseUrl.includes(\"\/ranking\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"\/marker_all\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"\/editors_picks\")) {\n        return handlerRanking()\n    }\n    if (baseUrl.includes(\"https:\/\/www.pixiv.net\")) {\n        return handlerRanking()\n    }\n    else {\n        return []\n    }\n}\n\nfunction handlerNoLogin() {\n    return () => {\n        sleepToast(\"\u26a0\ufe0f \u5f53\u524d\u672a\u767b\u5f55\u8d26\u53f7\\n\\n\u8bf7\u767b\u5f55 Pixiv \u8d26\u53f7\", 1.5)\n        util.removeCookie(); util.login()\n        sleepToast(\"\u767b\u5f55\u6210\u529f\u540e\uff0c\u8bf7\u91cd\u65b0\u8fdb\u5165\u53d1\u73b0\", 2)\n        return []\n    }\n}\n\n\/\/ \u63a8\u8350\u5c0f\u8bf4\nfunction handlerRecommend() {\n    return () => {\n        let res = JSON.parse(result)\n        const recommend = res.body.page.recommend\n        const novels = res.body.thumbnails.novel\n        let nidSet = new Set(recommend.ids)\n        \/\/ java.log(nidSet.size)\n        let list = novels.filter(novel => nidSet.has(String(novel.id)))\n        \/\/ java.log(`\u8fc7\u6ee4\u7ed3\u679c:${JSON.stringify(list)}`)\n        return util.formatNovels(util.handNovels(util.combineNovels(list)))\n    }\n}\n\n\/\/ \u6536\u85cf\u5c0f\u8bf4\uff0c\u4ed6\u4eba\u6536\u85cf\nfunction handlerBookMarks() {\n    return () => {\n        let res = JSON.parse(result).body.works\n        if (res === undefined || res.length === 0) {\n            \/\/\u6d41\u7a0b\u65e0\u6cd5\u672c\u73af\u8282\u4e2d\u6b62 \u53ea\u80fd\u4ea4\u7ed9\u4e0b\u4e00\u6d41\u7a0b\u5904\u7406\n            return []\n        }\n        return util.formatNovels(util.handNovels(res))\n    }\n}\n\n\/\/\u5173\u6ce8\u4f5c\u8005\uff0c\u5c0f\u8bf4\u59d4\u6258\uff0c\u5c0f\u8bf4\u4f01\u5212\nfunction handlerFollowLatest() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(util.combineNovels(res.body.thumbnails.novel)))\n    }\n}\n\n\/\/\u63a8\u8350\u5c0f\u8bf4\uff0c\u6700\u8fd1\u5c0f\u8bf4\nfunction handlerDiscovery() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(util.combineNovels(res.body.novels)))\n    }\n}\n\n\/\/ \u8ffd\u66f4\u5217\u8868\uff0c\u70ed\u95e8\u5206\u7c7b\nfunction handlerWatchList() {\n    return () => {\n        let res = JSON.parse(result)\n        return util.formatNovels(util.handNovels(res.body.thumbnails.novelSeries))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\uff0c\u7f16\u8f91\u90e8\u63a8\u8350\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRanking() {\n    if (util.settings.IS_LEGADO) return handlerRankingAjaxAll()\n    \/\/ else if (util.settings.IS_SOURCE_READ) return handlerRankingWebview()\n    else if (util.settings.IS_SOURCE_READ) return handlerRankingAjax()\n    else return []\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\uff0c\u7f16\u8f91\u90e8\u63a8\u8350\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRankingAjaxAll() {\n    return () => {\n        let  novelIds = [], novelUrls = []\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n                novelUrls.push(urlNovelDetailed(novelId))\n            }\n        }\n        \/\/ java.log(JSON.stringify(novelIds))\n        let novels = getAjaxAllJson(novelUrls).map(resp => resp.body)\n        return util.formatNovels(util.handNovels(util.combineNovels(novels)))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u9996\u9875\nfunction handlerRankingWebview() {\n    return () => {\n        let novelIds = []  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n            }\n        }\n        \/\/ java.log(JSON.stringify(novelIds))\n        let userNovels = getWebviewJson(\n            urlNovelsDetailed(`${cache.get(\"pixiv:uid\")}`, novelIds), html => {\n                return (html.match(new RegExp(\">\\\\{.*?}<\"))[0].replace(\">\", \"\").replace(\"<\", \"\"))\n            }).body\n        return util.formatNovels(util.handNovels(util.combineNovels(Object.values(userNovels))))\n    }\n}\n\n\/\/ \u6392\u884c\u699c\uff0c\u4e66\u7b7e\uff0c\u987a\u5e8f\u76f8\u540c\nfunction handlerRankingAjax() {\n    return () => {\n        let novels = [], novelIds = []\n        \/\/ let result = result + java.ajax(`${baseUrl}&p=2`)  \/\/ \u6b63\u5219\u83b7\u53d6\u7f51\u5740\u4e2d\u7684 novelId\n        let matched = result.match(RegExp(\/\\\/novel\\\/show\\.php\\?id=\\d{5,}\/gm))\n        for (let i in matched) {\n            let novelId = matched[i].match(RegExp(\/\\d{5,}\/))[0]\n            if (novelIds.indexOf(novelId) === -1) {\n                novelIds.push(novelId)\n                \/\/ java.log(urlNovelDetailed(novelId))\n                let res = getAjaxJson(urlNovelDetailed(novelId))\n                if (res.error !== true) {\n                    novels.push(res.body)\n                } else {\n                    java.log(JSON.stringify(res))\n                }\n            }\n        }\n        return util.formatNovels(util.handNovels(util.combineNovels(novels)))\n    }\n}\n\n(() => {\n    return handlerFactory()()\n})()","bookUrl":"detailedUrl","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","wordCount":"textCount"},"ruleSearch":{"author":"userName","bookList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nvar first = true;\n\/\/ \u5b58\u50a8seriesID\nvar seriesSet = {\n    keywords: \"Pixiv:Search\",\n    has: (value) => {\n        let page = Number(java.get(\"page\"))\n        if (page === 1 && first) {\n            first = false\n            cache.deleteMemory(this.keywords)\n            return false\n        }\n\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            return false\n        }\n        let set = new Set(JSON.parse(v))\n        return set.has(value)\n    },\n\n    add: (value) => {\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            cache.putMemory(this.keywords, JSON.stringify([value]))\n\n        } else {\n            let arr = JSON.parse(v)\n            if (typeof arr === \"string\") {\n                arr = Array(arr)\n            }\n            arr.push(value)\n            cache.putMemory(this.keywords, JSON.stringify(arr))\n        }\n    },\n};\n\nfunction getUserNovels() {\n    if (!isLogin()) {\n        sleepToast(\"\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\\n\\n\u26a0\ufe0f \u5f53\u524d\u672a\u767b\u5f55\u8d26\u53f7\\n\u8bf7\u767b\u5f55 Pixiv \u8d26\u53f7\", 1.5)\n        util.removeCookie(); util.login()\n        sleepToast(\"\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\\n\\n\u767b\u5f55\u6210\u529f\u540e\uff0c\u8bf7\u91cd\u65b0\u641c\u7d22\", 2)\n        return []\n    }\n\n    let uidList = [], novels = []\n    let username = String(java.get(\"keyword\"))\n    let page = Number(java.get(\"page\"))\n\n    \/\/ cache.delete(username)\n    let userid = cache.get(username)\n    if (userid !== undefined && userid !== null) {\n        uidList = [userid]\n        java.log(`\ud83d\udc64 \u7f13\u5b58\u4f5c\u8005ID\uff1a${userid}`)\n    } else {\n        html = java.ajax(urlSearchUser(username))\n        \/\/ java.log(html)\n        \/\/ \u4ec5\u5339\u914d\u6709\u6295\u7a3f\u4f5c\u54c1\u7684\u7528\u6237\n        let match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n        \/\/ java.log(JSON.stringify(match))\n        if (match === null || match.length === 0) {\n            return []\n        }\n\n        match = JSON.stringify(match).replace(\"\\\\\",\"\").split(\",\")\n        \/\/ java.log(JSON.stringify(match))\n        let regNumber = new RegExp(\"\\\\d+\")\n        uidList = match.map(v => {\n            return v.match(regNumber)[0]\n        })\n        java.log(`\ud83d\udc64 \u83b7\u53d6\u4f5c\u8005ID\uff1a${JSON.stringify(uidList)}`)\n    }\n\n    let tempUids = []\n    for (let i in uidList) {\n        let uid = uidList[i]\n        let resp = getAjaxJson(urlUserAllWorks(uid), true)\n        \/\/ java.log(urlUserAllWorks(id))\n        \/\/ java.log(JSON.stringify(resp))\n        if (resp.error === true) {\n            return []\n        }\n\n        \/\/ \u4ec5\u83b7\u53d6\u524d3\u4e2a\u6709\u5c0f\u8bf4\u7684\u4f5c\u8005\n        let novelIds = Object.keys(resp.body.novels)\n        \/\/ java.log(`${uid}-${novelIds.length}`)\n        if (novelIds.length >= 1) tempUids.push(uid)\n        if (tempUids.length === 3) {\n            java.log(`\ud83d\udc64 \u663e\u793a\u4f5c\u8005ID\uff1a${JSON.stringify(tempUids)}`)\n            break\n        }\n\n        \/\/ \u83b7\u53d6\u7cfb\u5217\u5c0f\u8bf4\uff0c\u4e0e util.handnovels \u7cfb\u5217\u8be6\u60c5\u517c\u5bb9\n        let seriesIds = []\n        if (resp.body.novelSeries.length >= 1) {\n            resp.body.novelSeries.forEach(novel =>{\n                seriesIds.push(novel.id)\n                novel.textCount = novel.publishedTotalCharacterCount\n                novel.description = novel.caption\n            })\n            novels = novels.concat(resp.body.novelSeries)\n        }\n\n        \/\/ \u83b7\u53d6\u6240\u6709\u7cfb\u5217\u5185\u90e8\u7684\u5c0f\u8bf4 ID\n        let seriesNovelIds = []\n        seriesIds.forEach(seriesId => {\n            let returnList = getAjaxJson(urlSeriesNovelsTitles(seriesId)).body\n            returnList.map(novel => {return seriesNovelIds.push(novel.id)})\n        })\n        \/\/ java.log(`\u6709\u7cfb\u5217\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(seriesNovelIds)}`)\n        \/\/ java.log(JSON.stringify(seriesNovelIds.length))\n\n        \/\/ \u83b7\u53d6\u5355\u7bc7\u5c0f\u8bf4\n        if (novelIds.length >= 1 && util.settings.IS_LEGADO) {\n            novelIds = novelIds.filter(novelid => (!seriesNovelIds.includes(novelid)))\n            novelIds = novelIds.reverse().slice((page - 1) * 20, page * 20)\n            \/\/ java.log(`\u771f\u5355\u7bc7\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(novelIds)}`)\n            \/\/ java.log(JSON.stringify(novelIds.length))\n            let novelUrls = novelIds.map(novelId => {return urlNovelDetailed(novelId)})\n            \/\/ java.log(JSON.stringify(novelUrls))\n            \/\/ cache.delete(novelUrls)\n            novels = novels.concat(getAjaxAllJson(novelUrls).map(resp => resp.body))\n        }\n\n        \/\/ \/\/ \u83b7\u53d6\u5355\u7bc7\u5c0f\u8bf4\n        if (novelIds.length >= 1 && util.settings.IS_SOURCE_READ) {\n            novelIds = novelIds.filter(novelid => (!seriesNovelIds.includes(novelid)))\n            \/\/ java.log(`\u771f\u5355\u7bc7\u7684\u5c0f\u8bf4ID\uff1a${JSON.stringify(novelIds)}`)\n            \/\/ java.log(JSON.stringify(novelIds.length))\n            novelIds = novelIds.reverse().slice((page - 1) * 20, page * 20)\n            novelIds.forEach(novelId => {\n                \/\/ java.log(urlNovelDetailed(novelId))\n                let res = getAjaxJson(urlNovelDetailed(novelId))\n                if (res.error !== true) {\n                    novels.push(res.body)\n                } else {\n                    java.log(JSON.stringify(res))\n                }\n            })\n        }\n    }\n    \n    util.debugFunc(() => {\n        java.log(`\u83b7\u53d6\u7528\u6237\u641c\u7d22\u5c0f\u8bf4\u7ed3\u675f`)\n    })\n    return novels\n}\n\nfunction search(name, type, page) {\n    let resp = {}\n    if (type.includes(\"novel\")) {\n        resp = getAjaxJson(urlSearchNovel(name, page))\n        java.log(urlSearchNovel(name, page))\n    }\n    if (type.includes(\"series\")) {\n        resp = getAjaxJson(urlSearchSeries(name, page))\n        java.log(urlSearchSeries(name, page))\n    }\n    if (resp.error === true || resp.total === 0) {\n        return {\"data\": [], \"total\":0, \"lastPage\": 0}\n    }\n    return resp.body.novel\n}\n\nfunction getSeries() {\n    let novels = []\n    let name = String(java.get(\"keyword\"))\n    let maxPages = getFromCache(\"maxPages\")  \/\/ \u4ec5\u9ed8\u8ba4\u641c\u7d22\u4f7f\u7528\n    if (!maxPages) {\n        maxPages = getFromCache(\"seriesMaxPages\")  \/\/ \u641c\u7d22\u6807\u7b7e\u4f7f\u7528\n        if (!maxPages) maxPages = 1\n        putInCache(\"seriesMaxPages\", maxPages)\n    }\n    java.log(`\ud83d\udcc4 \u641c\u7d22\u7cfb\u5217\u6700\u5927\u9875\u7801\uff1a${maxPages}`)\n\n    if (JSON.parse(result).error === true) {\n        return []\n    }\n    let lastPage = JSON.parse(result).body.novel.lastPage\n    novels = novels.concat(JSON.parse(result).body.novel.data)\n    java.log(urlSearchSeries(name, 1))\n    cache.put(urlSearchSeries(name, 1), result, cacheSaveSeconds)  \/\/ \u52a0\u5165\u7f13\u5b58\n    for (let page = Number(java.get(\"page\")) + 1; page <= lastPage, page <= maxPages; page++) {\n        novels = novels.concat(search(name,\"series\", page).data)\n    }\n    return novels\n}\n\nfunction getNovels() {\n    let novels = []\n    let name = String(java.get(\"keyword\"))\n    let maxPages = getFromCache(\"maxPages\")  \/\/ \u4ec5\u9ed8\u8ba4\u641c\u7d22\u4f7f\u7528\n    if (!maxPages) {\n        maxPages = getFromCache(\"novelsMaxPages\")  \/\/ \u641c\u7d22\u6807\u7b7e\u4f7f\u7528\n        if (!maxPages) maxPages = 1\n        putInCache(\"novelsMaxPages\", maxPages)\n    }\n    java.log(`\ud83d\udcc4 \u641c\u7d22\u5355\u7bc7\u6700\u5927\u9875\u7801\uff1a${maxPages}`)\n\n    let resp = search(name, \"novel\", 1)\n    novels = novels.concat(resp.data)\n    for (let page = Number(java.get(\"page\")) + 1; page <= resp.lastPage, page <= maxPages; page++) {\n        novels = novels.concat(search(name,\"novel\", page).data)\n    }\n    return util.combineNovels(novels)\n}\n\nfunction getConvertNovels() {\n    let novels = []\n    let novelName = String(java.get(\"keyword\"))\n    let name1 = String(java.s2t(novelName))\n    let name2 = String(java.t2s(novelName))\n    if (name1 !== novelName) novels = novels.concat(search(name1, \"novel\", 1).data)\n    if (name2 !== novelName) novels = novels.concat(search(name2, \"novel\", 1).data)\n    novels = util.combineNovels(novels)\n    if (name1 !== novelName) novels = novels.concat(search(name1, \"series\", 1).data)\n    if (name2 !== novelName) novels = novels.concat(search(name2, \"series\", 1).data)\n    return novels\n}\n\nfunction novelFilter(novels) {\n    let textCount = 0, tags = []\n    let limitedTextCount = String(java.get(\"limitedTextCount\")).replace(\"\u5b57\u6570\", \"\").replace(\"\u5b57\u6578\", \"\")\n    \/\/ limitedTextCount = `3w 3k 3w5 3k5`.[0]\n    if (limitedTextCount.includes(\"w\") || limitedTextCount.includes(\"W\")) {\n        let num = limitedTextCount.toLowerCase().split(\"w\")\n        textCount = 10000 * num[0] + 1000 * num[1]\n    } else if (limitedTextCount.includes(\"k\") || limitedTextCount.includes(\"K\")) {\n        let num = limitedTextCount.toLowerCase().split(\"k\")\n        textCount = 1000 * num[0] + 100 * num[1]\n    }\n\n    let novels0 = novels.map(novel => novel.id)\n    if (textCount >= 1) {\n        novels = novels.filter(novel => novel.textCount >= textCount)\n        let novels1 = novels.map(novel => novel.id)\n        java.log(`\ud83d\udd22 \u5b57\u6570\u9650\u5236\uff1a${limitedTextCount}`)\n        java.log(`\u23ec \u5b57\u6570\u9650\u5236\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels1.length}`)\n    }\n\n    let inputTags = String(java.get(\"inputTags\")).split(\" \")\n    for (let i in inputTags) {\n        let tag = inputTags[i].trim()\n        if (tag !== \"\") tags.push(`${tag}`)\n    }\n\n    if (tags.length >= 1) {\n        \/\/ novels = novels.filter(novel => {\n        \/\/     \/\/ java.log(`${JSON.stringify(novel.tags)}\\n${tags.every(item => novel.tags.includes(item))}`)\n        \/\/     return tags.every(item => novel.tags.includes(item))\n        \/\/ })\n        novels = novels.filter(novel => tags.every(item => novel.tags.includes(item)))\n        let novels2 = novels.map(novel => novel.id)\n        java.log(`#\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a${tags.join(\"\u3001\")}`)\n        java.log(`#\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n    }\n\n    let inputAuthor = String(java.get(\"inputAuthor\")).trim()\n    if (inputAuthor) {\n        \/\/ novels = novels.filter(novel => {\n        \/\/     java.log(`${novel.userName}-${novel.userName.includes(inputAuthor)}`)\n        \/\/     return novel.userName.includes(inputAuthor)\n        \/\/ })\n        novels = novels.filter(novel => novel.userName.includes(inputAuthor))\n        let novels2 = novels.map(novel => novel.id)\n        java.log(`\ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a${tags.join(\"\u3001\")}`)\n        java.log(`\ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a\u8fc7\u6ee4\u524d${novels0.length}\uff1b\u8fc7\u6ee4\u540e${novels2.length}`)\n    }\n    return novels\n}\n\n(() => {\n    let novels = []\n    let keyword = String(java.get(\"keyword\"))\n    if (keyword.startsWith(\"@\") || keyword.startsWith(\"\uff20\")) {\n        java.put(\"keyword\", keyword.slice(1))\n        novels = novels.concat(getUserNovels())\n    } else if (keyword.startsWith(\"#\") || keyword.startsWith(\"\uff03\")) {\n        java.put(\"keyword\", keyword.slice(1))\n        \/\/ \u5220\u9664\u9ed8\u8ba4\u641c\u7d22\u6700\u5927\u9875\u7801\uff0c\u4f7f\u7528\u5185\u90e8\u8bbe\u5b9a\u7684\u6700\u5927\u9875\u7801\n        cache.delete(\"maxPages\")\n        novels = novels.concat(getSeries())\n        novels = novels.concat(getNovels())\n    } else {\n        \/\/ \u8bbe\u7f6e\u9ed8\u8ba4\u641c\u7d22\u6700\u5927\u9875\u7801\n        putInCache(\"maxPages\", 1)\n        novels = novels.concat(getSeries())\n        novels = novels.concat(getNovels())\n        if (util.settings.SEARCH_AUTHOR) novels = novels.concat(getUserNovels())\n        if (util.settings.CONVERT_CHINESE) novels = novels.concat(getConvertNovels())\n    }\n    \/\/ java.log(JSON.stringify(novels))\n    \/\/ \u8fd4\u56de\u7a7a\u5217\u8868\u4e2d\u6b62\u6d41\u7a0b\n    if (novels.length === 0) {\n        return []\n    }\n    return novelFilter(util.formatNovels(util.handNovels(novels)))\n})()","bookUrl":"detailedUrl","checkKeyWord":"\u6d4b\u8bd5\u9875\u9762","coverUrl":"coverUrl","intro":"description","kind":"tags","lastChapter":"latestChapter","name":"title","wordCount":"textCount"},"ruleToc":{"chapterList":"@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction urlNovel(novelId) {\n    if (util.settings.SHOW_ORIGINAL_LINK) {\n        return urlNovelUrl(novelId)\n    } else {\n        return urlNovelDetailed(novelId)\n    }\n}\n\nfunction oneShotHandler(res) {\n    res.textCount = res.userNovels[`${res.id}`].textCount\n    res.createDate = timeTextFormat(res.createDate)\n    return [{\n        title: res.title.trim(),\n        chapterUrl: urlNovel(res.id),\n        chapterInfo: `${res.createDate}\u3000\u3000${res.textCount}\u5b57`\n    }]\n}\n\nfunction seriesHandler(res) {\n    const limit = 30\n    let returnList = [], novelIds = []\n    let seriesID = res.id, allChaptersCount = res.total\n    util.debugFunc(() => {\n        java.log(`\u672c\u7cfb\u5217 ${seriesID} \u4e00\u5171\u6709${allChaptersCount}\u7ae0`);\n    })\n\n    \/\/\u53d1\u9001\u8bf7\u6c42\u83b7\u5f97\u76f8\u5e94\u6570\u91cf\u7684\u76ee\u5f55\u5217\u8868\n    function sendAjaxForGetChapters(lastIndex) {\n        resp = getAjaxJson(urlSeriesNovels(seriesID, limit, lastIndex), true)\n        res = resp.body.thumbnails.novel\n        \/\/ res = resp.body.page.seriesContents\n        res.forEach(v => {\n            v.title = v.title.trim()\n            java.log(urlNovel(v.id))\n            v.chapterUrl = urlNovel(v.id)\n            novelIds.push(v.id)\n            if (v.updateDate !== undefined) {\n                v.updateDate = timeTextFormat(v.createDate)\n                v.chapterInfo = `${v.updateDate}\u3000\u3000${v.textCount}\u5b57`\n            } else {\n                v.updateDate = java.timeFormat(v.uploadTimestamp)\n                v.chapterInfo = `${v.updateDate}\u3000\u3000${v.textLength}\u5b57`\n            }\n            util.debugFunc(() => {\n                java.log(`${v.title}`)\n            })\n        })\n        return res;\n    }\n\n    if (!util.settings.SHOW_UPDATE_TIME) {\n        returnList = getAjaxJson(urlSeriesNovelsTitles(seriesID), true).body\n        returnList.forEach(v => {\n            v.title = v.title.trim()\n            v.chapterUrl = urlNovel(v.id)\n            novelIds.push(v.id)\n        })\n    } else {\n        \/\/\u903b\u8f91\u63a7\u5236\u8005 \u4e5f\u5c31\u662f\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u4e24\u4e2a\u51fd\u6570\u6765\u505a\u5bf9\u5e94\u529f\u80fd\n        \/\/\u8981\u722c\u53d6\u7684\u603b\u6b21\u6570\n        let max = (allChaptersCount \/ limit) + 1\n        for (let i = 0; i < max; i++) {\n            \/\/java.log(\"i\u7684\u503c:\"+i)\n            let list = sendAjaxForGetChapters(i * limit);\n            \/\/\u53d6\u51fa\u6bcf\u4e2a\u503c\n            returnList = returnList.concat(list)\n        }\n    }\n    \/\/ \u653e\u5165\u4fe1\u606f\u4ee5\u4fbf\u767b\u9646\u754c\u9762\u4f7f\u7528\n    cache.put(`novelIds${seriesID}`, JSON.stringify(novelIds), cacheSaveSeconds)\n    \/\/ java.log(JSON.stringify(returnList))\n    return returnList\n}\n\n(function (res) {\n    res = util.getNovelResSeries(result)\n    if (res.firstNovelId === undefined || res.seriesNavData === null) {\n        return oneShotHandler(res)\n    } else {\n        return seriesHandler(res)\n    }\n})()","chapterName":"title","chapterUrl":"chapterUrl","isPay":"false ","isVip":"true","updateTime":"chapterInfo"},"searchUrl":"@js:\njava.put(\"key\", key)\njava.put(\"page\", page)\nlet keyword = key.split(\" \")\nlet limitedTextCount\nif (key.includes(\"\u5b57\u6570\") || key.includes(\"\u5b57\u6578\") ) {\n    limitedTextCount = keyword.pop()\n    keyword = keyword.join(\" \")\n} else {\n    limitedTextCount = \"\"\n    keyword = key\n}\njava.put(\"keyword\", keyword)\njava.put(\"limitedTextCount\", limitedTextCount)\n\nif (keyword.startsWith(\"@\") || keyword.startsWith(\"\uff20\")) {\n    if (keyword.includes(\"#\") || keyword.includes(\"\uff03\")) {\n        let author = keyword.split(\" \")[0]\n        let tags = keyword.replace(author, \"\").trim().slice(1)\n        java.put(\"keyword\", author)\n        java.put(\"inputTags\", tags)\n        java.log(`\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\uff1a${author} #\ufe0f\u20e3 \u8fc7\u6ee4\u6807\u7b7e\uff1a${tags.replace(\" \", \"\u3001\")}`)\n    } else {\n        java.put(\"keyword\", keyword)\n        java.log(`\ud83d\udc64 \u641c\u7d22\u4f5c\u8005\uff1a${keyword.slice(1)}`)\n    }\n\n} else if (keyword.startsWith(\"#\") || keyword.startsWith(\"\uff03\")) {\n    keyword = keyword.slice(1)\n    if (keyword.includes(\"@\") || keyword.includes(\"\uff20\")) {\n        let author = keyword.match(new RegExp(\/[@\uff20](.*)\/))\n        keyword = keyword.replace(author[0], \"\").trim()\n        java.put(\"inputAuthor\", author[1])\n        java.log(`#\ufe0f\u20e3 \u641c\u7d22\u6807\u7b7e\uff1a${keyword} \ud83d\udc64 \u8fc7\u6ee4\u4f5c\u8005\uff1a${author[1]}`)\n    } else {\n        java.log(`#\ufe0f\u20e3 \u641c\u7d22\u6807\u7b7e\uff1a${keyword}`)\n    }\n    java.put(\"keyword\", `#${keyword}`)\n\n} else {\n    java.log(`\ud83d\udd0d \u641c\u7d22\u5185\u5bb9\uff1a${keyword}`)\n}\nurlSearchSeries(keyword, page)","variableComment":"\ud83d\udeab \u5c4f\u853d\u4f5c\u8005(\u672c\u5730)\uff1a\n\u8bbe\u7f6e\u65b9\u6cd51\ufe0f\u20e3\uff1a\u6253\u5f00\u5c0f\u8bf4 - \u83dc\u5355 - \u767b\u5f55 - \ud83d\udeab \u5c4f\u853d\u4f5c\u8005\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u5c4f\u853d\u4f5c\u8005\u6570\u636e\n\n\u8bbe\u7f6e\u65b9\u6cd52\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u83dc\u5355 - \u8bbe\u7f6e\u6e90\u53d8\u91cf - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u8bbe\u7f6e\u6e90\u53d8\u91cf\uff1a\u8f93\u5165\u4f5c\u8005ID\uff0c\u3010\u82f1\u6587\u9017\u53f7\u3011\u95f4\u9694\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u5c4f\u853d\u4f5c\u8005\u6570\u636e\n\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u6e90\u53d8\u91cf\u6a21\u677f\uff1a\n12345, 67890\n\n\n\u2699\ufe0f \u4e66\u6e90\u8bbe\u7f6e\uff1a\n\u8bbe\u7f6e1\ufe0f\u20e3\uff1a\u6253\u5f00\u5c0f\u8bf4 - \u83dc\u5355 - \u767b\u5f55 - \u70b9\u51fb\u4e0b\u65b9\u6309\u94ae\n\u25b6\ufe0f \u641c\u7d22\u4efb\u610f\u5c0f\u8bf4\uff0c\u540c\u6b65\u8bbe\u7f6e\u6570\u636e\n\n\u8bbe\u7f6e2\ufe0f\u20e3\uff1a\u7f16\u8f91\u4e66\u6e90 - \u57fa\u672c - \u53d8\u91cf\u8bf4\u660e - \u4fee\u6539\u5e76\u4fdd\u5b58\n\u2699\ufe0f \u81ea\u5b9a\u4e49\u8bbe\u7f6e\uff1a\u5c06 true \u6539\u4e3a false\uff0c\u6216\u76f8\u53cd\n\u26a0\ufe0f \u8bbe\u7f6e\u6e90\u53d8\u91cf\u3010\u65e0\u6cd5\u3011\u66f4\u6539\u4e66\u6e90\u81ea\u5b9a\u4e49\u8bbe\u7f6e\n\u26a0\ufe0f \u6ce8\u610f\u4e0d\u8981\u6dfb\u52a0\u6216\u5220\u9664\u5c3e\u968f\u9017\u53f7\",\"\n\u26a0\ufe0f \u66f4\u65b0\u53d1\u73b0\u9875\u9700\u8981\u957f\u6309\"Pixiv\"\uff0c\u624b\u52a8\u5237\u65b0\n\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u4e66\u6e90\u8bbe\u7f6e\uff1a\n{\n\"SHOW_GENERAL_NEW\": false,\n\"SHOW_GENERAL_RANK\": false,\n\"SHOW_R18_GENRE\": false,\n\"SHOW_GENERAL_GENRE\": false\n}\n\n\/\/ SHOW_GENERAL_NEW\n\/\/ \u53d1\u73b0\uff1a\u6700\u65b0\u3001\u4f01\u5212\u3001\u7ea6\u7a3f\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\/\/ SHOW_GENERAL_RANK\n\/\/ \u53d1\u73b0\uff1a\u6392\u884c\u699c\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\/\/ SHOW_R18_GENRE\n\/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793aR18\u5c0f\u8bf4\n\/\/ SHOW_GENERAL_GENRE\n\/\/ \u53d1\u73b0\uff1a\u70ed\u95e8\u5206\u7c7b\u663e\u793a\u4e00\u822c\u5c0f\u8bf4\n\n","weight":0}]